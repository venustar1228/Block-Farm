//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/d3js_d3/packages/d3js_d3.js                              //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/d3js:d3/d3.js                                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function() {                                                                                                          // 1
  var d3 = {                                                                                                           // 2
    version: "3.5.8"                                                                                                   // 3
  };                                                                                                                   // 4
  var d3_arraySlice = [].slice, d3_array = function(list) {                                                            // 5
    return d3_arraySlice.call(list);                                                                                   // 6
  };                                                                                                                   // 7
  var d3_document = this.document;                                                                                     // 8
  function d3_documentElement(node) {                                                                                  // 9
    return node && (node.ownerDocument || node.document || node).documentElement;                                      // 10
  }                                                                                                                    // 11
  function d3_window(node) {                                                                                           // 12
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }                                                                                                                    // 14
  if (d3_document) {                                                                                                   // 15
    try {                                                                                                              // 16
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;                                                    // 17
    } catch (e) {                                                                                                      // 18
      d3_array = function(list) {                                                                                      // 19
        var i = list.length, array = new Array(i);                                                                     // 20
        while (i--) array[i] = list[i];                                                                                // 21
        return array;                                                                                                  // 22
      };                                                                                                               // 23
    }                                                                                                                  // 24
  }                                                                                                                    // 25
  if (!Date.now) Date.now = function() {                                                                               // 26
    return +new Date();                                                                                                // 27
  };                                                                                                                   // 28
  if (d3_document) {                                                                                                   // 29
    try {                                                                                                              // 30
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");                                            // 31
    } catch (error) {                                                                                                  // 32
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {                                                      // 34
        d3_element_setAttribute.call(this, name, value + "");                                                          // 35
      };                                                                                                               // 36
      d3_element_prototype.setAttributeNS = function(space, local, value) {                                            // 37
        d3_element_setAttributeNS.call(this, space, local, value + "");                                                // 38
      };                                                                                                               // 39
      d3_style_prototype.setProperty = function(name, value, priority) {                                               // 40
        d3_style_setProperty.call(this, name, value + "", priority);                                                   // 41
      };                                                                                                               // 42
    }                                                                                                                  // 43
  }                                                                                                                    // 44
  d3.ascending = d3_ascending;                                                                                         // 45
  function d3_ascending(a, b) {                                                                                        // 46
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;                                                                  // 47
  }                                                                                                                    // 48
  d3.descending = function(a, b) {                                                                                     // 49
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;                                                                  // 50
  };                                                                                                                   // 51
  d3.min = function(array, f) {                                                                                        // 52
    var i = -1, n = array.length, a, b;                                                                                // 53
    if (arguments.length === 1) {                                                                                      // 54
      while (++i < n) if ((b = array[i]) != null && b >= b) {                                                          // 55
        a = b;                                                                                                         // 56
        break;                                                                                                         // 57
      }                                                                                                                // 58
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;                                                      // 59
    } else {                                                                                                           // 60
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {                                        // 61
        a = b;                                                                                                         // 62
        break;                                                                                                         // 63
      }                                                                                                                // 64
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;                                    // 65
    }                                                                                                                  // 66
    return a;                                                                                                          // 67
  };                                                                                                                   // 68
  d3.max = function(array, f) {                                                                                        // 69
    var i = -1, n = array.length, a, b;                                                                                // 70
    if (arguments.length === 1) {                                                                                      // 71
      while (++i < n) if ((b = array[i]) != null && b >= b) {                                                          // 72
        a = b;                                                                                                         // 73
        break;                                                                                                         // 74
      }                                                                                                                // 75
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;                                                      // 76
    } else {                                                                                                           // 77
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {                                        // 78
        a = b;                                                                                                         // 79
        break;                                                                                                         // 80
      }                                                                                                                // 81
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;                                    // 82
    }                                                                                                                  // 83
    return a;                                                                                                          // 84
  };                                                                                                                   // 85
  d3.extent = function(array, f) {                                                                                     // 86
    var i = -1, n = array.length, a, b, c;                                                                             // 87
    if (arguments.length === 1) {                                                                                      // 88
      while (++i < n) if ((b = array[i]) != null && b >= b) {                                                          // 89
        a = c = b;                                                                                                     // 90
        break;                                                                                                         // 91
      }                                                                                                                // 92
      while (++i < n) if ((b = array[i]) != null) {                                                                    // 93
        if (a > b) a = b;                                                                                              // 94
        if (c < b) c = b;                                                                                              // 95
      }                                                                                                                // 96
    } else {                                                                                                           // 97
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {                                        // 98
        a = c = b;                                                                                                     // 99
        break;                                                                                                         // 100
      }                                                                                                                // 101
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {                                                  // 102
        if (a > b) a = b;                                                                                              // 103
        if (c < b) c = b;                                                                                              // 104
      }                                                                                                                // 105
    }                                                                                                                  // 106
    return [ a, c ];                                                                                                   // 107
  };                                                                                                                   // 108
  function d3_number(x) {                                                                                              // 109
    return x === null ? NaN : +x;                                                                                      // 110
  }                                                                                                                    // 111
  function d3_numeric(x) {                                                                                             // 112
    return !isNaN(x);                                                                                                  // 113
  }                                                                                                                    // 114
  d3.sum = function(array, f) {                                                                                        // 115
    var s = 0, n = array.length, a, i = -1;                                                                            // 116
    if (arguments.length === 1) {                                                                                      // 117
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;                                                           // 118
    } else {                                                                                                           // 119
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;                                         // 120
    }                                                                                                                  // 121
    return s;                                                                                                          // 122
  };                                                                                                                   // 123
  d3.mean = function(array, f) {                                                                                       // 124
    var s = 0, n = array.length, a, i = -1, j = n;                                                                     // 125
    if (arguments.length === 1) {                                                                                      // 126
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;                                       // 127
    } else {                                                                                                           // 128
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;                     // 129
    }                                                                                                                  // 130
    if (j) return s / j;                                                                                               // 131
  };                                                                                                                   // 132
  d3.quantile = function(values, p) {                                                                                  // 133
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;                             // 134
    return e ? v + e * (values[h] - v) : v;                                                                            // 135
  };                                                                                                                   // 136
  d3.median = function(array, f) {                                                                                     // 137
    var numbers = [], n = array.length, a, i = -1;                                                                     // 138
    if (arguments.length === 1) {                                                                                      // 139
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);                                        // 140
    } else {                                                                                                           // 141
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);                      // 142
    }                                                                                                                  // 143
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);                                            // 144
  };                                                                                                                   // 145
  d3.variance = function(array, f) {                                                                                   // 146
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;                                                           // 147
    if (arguments.length === 1) {                                                                                      // 148
      while (++i < n) {                                                                                                // 149
        if (d3_numeric(a = d3_number(array[i]))) {                                                                     // 150
          d = a - m;                                                                                                   // 151
          m += d / ++j;                                                                                                // 152
          s += d * (a - m);                                                                                            // 153
        }                                                                                                              // 154
      }                                                                                                                // 155
    } else {                                                                                                           // 156
      while (++i < n) {                                                                                                // 157
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {                                                   // 158
          d = a - m;                                                                                                   // 159
          m += d / ++j;                                                                                                // 160
          s += d * (a - m);                                                                                            // 161
        }                                                                                                              // 162
      }                                                                                                                // 163
    }                                                                                                                  // 164
    if (j > 1) return s / (j - 1);                                                                                     // 165
  };                                                                                                                   // 166
  d3.deviation = function() {                                                                                          // 167
    var v = d3.variance.apply(this, arguments);                                                                        // 168
    return v ? Math.sqrt(v) : v;                                                                                       // 169
  };                                                                                                                   // 170
  function d3_bisector(compare) {                                                                                      // 171
    return {                                                                                                           // 172
      left: function(a, x, lo, hi) {                                                                                   // 173
        if (arguments.length < 3) lo = 0;                                                                              // 174
        if (arguments.length < 4) hi = a.length;                                                                       // 175
        while (lo < hi) {                                                                                              // 176
          var mid = lo + hi >>> 1;                                                                                     // 177
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;                                                     // 178
        }                                                                                                              // 179
        return lo;                                                                                                     // 180
      },                                                                                                               // 181
      right: function(a, x, lo, hi) {                                                                                  // 182
        if (arguments.length < 3) lo = 0;                                                                              // 183
        if (arguments.length < 4) hi = a.length;                                                                       // 184
        while (lo < hi) {                                                                                              // 185
          var mid = lo + hi >>> 1;                                                                                     // 186
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;                                                     // 187
        }                                                                                                              // 188
        return lo;                                                                                                     // 189
      }                                                                                                                // 190
    };                                                                                                                 // 191
  }                                                                                                                    // 192
  var d3_bisect = d3_bisector(d3_ascending);                                                                           // 193
  d3.bisectLeft = d3_bisect.left;                                                                                      // 194
  d3.bisect = d3.bisectRight = d3_bisect.right;                                                                        // 195
  d3.bisector = function(f) {                                                                                          // 196
    return d3_bisector(f.length === 1 ? function(d, x) {                                                               // 197
      return d3_ascending(f(d), x);                                                                                    // 198
    } : f);                                                                                                            // 199
  };                                                                                                                   // 200
  d3.shuffle = function(array, i0, i1) {                                                                               // 201
    if ((m = arguments.length) < 3) {                                                                                  // 202
      i1 = array.length;                                                                                               // 203
      if (m < 2) i0 = 0;                                                                                               // 204
    }                                                                                                                  // 205
    var m = i1 - i0, t, i;                                                                                             // 206
    while (m) {                                                                                                        // 207
      i = Math.random() * m-- | 0;                                                                                     // 208
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;                                             // 209
    }                                                                                                                  // 210
    return array;                                                                                                      // 211
  };                                                                                                                   // 212
  d3.permute = function(array, indexes) {                                                                              // 213
    var i = indexes.length, permutes = new Array(i);                                                                   // 214
    while (i--) permutes[i] = array[indexes[i]];                                                                       // 215
    return permutes;                                                                                                   // 216
  };                                                                                                                   // 217
  d3.pairs = function(array) {                                                                                         // 218
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);                              // 219
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];                                                             // 220
    return pairs;                                                                                                      // 221
  };                                                                                                                   // 222
  d3.zip = function() {                                                                                                // 223
    if (!(n = arguments.length)) return [];                                                                            // 224
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {                            // 225
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {                                                   // 226
        zip[j] = arguments[j][i];                                                                                      // 227
      }                                                                                                                // 228
    }                                                                                                                  // 229
    return zips;                                                                                                       // 230
  };                                                                                                                   // 231
  function d3_zipLength(d) {                                                                                           // 232
    return d.length;                                                                                                   // 233
  }                                                                                                                    // 234
  d3.transpose = function(matrix) {                                                                                    // 235
    return d3.zip.apply(d3, matrix);                                                                                   // 236
  };                                                                                                                   // 237
  d3.keys = function(map) {                                                                                            // 238
    var keys = [];                                                                                                     // 239
    for (var key in map) keys.push(key);                                                                               // 240
    return keys;                                                                                                       // 241
  };                                                                                                                   // 242
  d3.values = function(map) {                                                                                          // 243
    var values = [];                                                                                                   // 244
    for (var key in map) values.push(map[key]);                                                                        // 245
    return values;                                                                                                     // 246
  };                                                                                                                   // 247
  d3.entries = function(map) {                                                                                         // 248
    var entries = [];                                                                                                  // 249
    for (var key in map) entries.push({                                                                                // 250
      key: key,                                                                                                        // 251
      value: map[key]                                                                                                  // 252
    });                                                                                                                // 253
    return entries;                                                                                                    // 254
  };                                                                                                                   // 255
  d3.merge = function(arrays) {                                                                                        // 256
    var n = arrays.length, m, i = -1, j = 0, merged, array;                                                            // 257
    while (++i < n) j += arrays[i].length;                                                                             // 258
    merged = new Array(j);                                                                                             // 259
    while (--n >= 0) {                                                                                                 // 260
      array = arrays[n];                                                                                               // 261
      m = array.length;                                                                                                // 262
      while (--m >= 0) {                                                                                               // 263
        merged[--j] = array[m];                                                                                        // 264
      }                                                                                                                // 265
    }                                                                                                                  // 266
    return merged;                                                                                                     // 267
  };                                                                                                                   // 268
  var abs = Math.abs;                                                                                                  // 269
  d3.range = function(start, stop, step) {                                                                             // 270
    if (arguments.length < 3) {                                                                                        // 271
      step = 1;                                                                                                        // 272
      if (arguments.length < 2) {                                                                                      // 273
        stop = start;                                                                                                  // 274
        start = 0;                                                                                                     // 275
      }                                                                                                                // 276
    }                                                                                                                  // 277
    if ((stop - start) / step === Infinity) throw new Error("infinite range");                                         // 278
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;                                                   // 279
    start *= k, stop *= k, step *= k;                                                                                  // 280
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;                                                                                                      // 282
  };                                                                                                                   // 283
  function d3_range_integerScale(x) {                                                                                  // 284
    var k = 1;                                                                                                         // 285
    while (x * k % 1) k *= 10;                                                                                         // 286
    return k;                                                                                                          // 287
  }                                                                                                                    // 288
  function d3_class(ctor, properties) {                                                                                // 289
    for (var key in properties) {                                                                                      // 290
      Object.defineProperty(ctor.prototype, key, {                                                                     // 291
        value: properties[key],                                                                                        // 292
        enumerable: false                                                                                              // 293
      });                                                                                                              // 294
    }                                                                                                                  // 295
  }                                                                                                                    // 296
  d3.map = function(object, f) {                                                                                       // 297
    var map = new d3_Map();                                                                                            // 298
    if (object instanceof d3_Map) {                                                                                    // 299
      object.forEach(function(key, value) {                                                                            // 300
        map.set(key, value);                                                                                           // 301
      });                                                                                                              // 302
    } else if (Array.isArray(object)) {                                                                                // 303
      var i = -1, n = object.length, o;                                                                                // 304
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {                                                                                                           // 306
      for (var key in object) map.set(key, object[key]);                                                               // 307
    }                                                                                                                  // 308
    return map;                                                                                                        // 309
  };                                                                                                                   // 310
  function d3_Map() {                                                                                                  // 311
    this._ = Object.create(null);                                                                                      // 312
  }                                                                                                                    // 313
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";                                                                // 314
  d3_class(d3_Map, {                                                                                                   // 315
    has: d3_map_has,                                                                                                   // 316
    get: function(key) {                                                                                               // 317
      return this._[d3_map_escape(key)];                                                                               // 318
    },                                                                                                                 // 319
    set: function(key, value) {                                                                                        // 320
      return this._[d3_map_escape(key)] = value;                                                                       // 321
    },                                                                                                                 // 322
    remove: d3_map_remove,                                                                                             // 323
    keys: d3_map_keys,                                                                                                 // 324
    values: function() {                                                                                               // 325
      var values = [];                                                                                                 // 326
      for (var key in this._) values.push(this._[key]);                                                                // 327
      return values;                                                                                                   // 328
    },                                                                                                                 // 329
    entries: function() {                                                                                              // 330
      var entries = [];                                                                                                // 331
      for (var key in this._) entries.push({                                                                           // 332
        key: d3_map_unescape(key),                                                                                     // 333
        value: this._[key]                                                                                             // 334
      });                                                                                                              // 335
      return entries;                                                                                                  // 336
    },                                                                                                                 // 337
    size: d3_map_size,                                                                                                 // 338
    empty: d3_map_empty,                                                                                               // 339
    forEach: function(f) {                                                                                             // 340
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);                                         // 341
    }                                                                                                                  // 342
  });                                                                                                                  // 343
  function d3_map_escape(key) {                                                                                        // 344
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;                           // 345
  }                                                                                                                    // 346
  function d3_map_unescape(key) {                                                                                      // 347
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;                                                        // 348
  }                                                                                                                    // 349
  function d3_map_has(key) {                                                                                           // 350
    return d3_map_escape(key) in this._;                                                                               // 351
  }                                                                                                                    // 352
  function d3_map_remove(key) {                                                                                        // 353
    return (key = d3_map_escape(key)) in this._ && delete this._[key];                                                 // 354
  }                                                                                                                    // 355
  function d3_map_keys() {                                                                                             // 356
    var keys = [];                                                                                                     // 357
    for (var key in this._) keys.push(d3_map_unescape(key));                                                           // 358
    return keys;                                                                                                       // 359
  }                                                                                                                    // 360
  function d3_map_size() {                                                                                             // 361
    var size = 0;                                                                                                      // 362
    for (var key in this._) ++size;                                                                                    // 363
    return size;                                                                                                       // 364
  }                                                                                                                    // 365
  function d3_map_empty() {                                                                                            // 366
    for (var key in this._) return false;                                                                              // 367
    return true;                                                                                                       // 368
  }                                                                                                                    // 369
  d3.nest = function() {                                                                                               // 370
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;                                                       // 371
    function map(mapType, array, depth) {                                                                              // 372
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values; // 374
      while (++i < n) {                                                                                                // 375
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {                                             // 376
          values.push(object);                                                                                         // 377
        } else {                                                                                                       // 378
          valuesByKey.set(keyValue, [ object ]);                                                                       // 379
        }                                                                                                              // 380
      }                                                                                                                // 381
      if (mapType) {                                                                                                   // 382
        object = mapType();                                                                                            // 383
        setter = function(keyValue, values) {                                                                          // 384
          object.set(keyValue, map(mapType, values, depth));                                                           // 385
        };                                                                                                             // 386
      } else {                                                                                                         // 387
        object = {};                                                                                                   // 388
        setter = function(keyValue, values) {                                                                          // 389
          object[keyValue] = map(mapType, values, depth);                                                              // 390
        };                                                                                                             // 391
      }                                                                                                                // 392
      valuesByKey.forEach(setter);                                                                                     // 393
      return object;                                                                                                   // 394
    }                                                                                                                  // 395
    function entries(map, depth) {                                                                                     // 396
      if (depth >= keys.length) return map;                                                                            // 397
      var array = [], sortKey = sortKeys[depth++];                                                                     // 398
      map.forEach(function(key, keyMap) {                                                                              // 399
        array.push({                                                                                                   // 400
          key: key,                                                                                                    // 401
          values: entries(keyMap, depth)                                                                               // 402
        });                                                                                                            // 403
      });                                                                                                              // 404
      return sortKey ? array.sort(function(a, b) {                                                                     // 405
        return sortKey(a.key, b.key);                                                                                  // 406
      }) : array;                                                                                                      // 407
    }                                                                                                                  // 408
    nest.map = function(array, mapType) {                                                                              // 409
      return map(mapType, array, 0);                                                                                   // 410
    };                                                                                                                 // 411
    nest.entries = function(array) {                                                                                   // 412
      return entries(map(d3.map, array, 0), 0);                                                                        // 413
    };                                                                                                                 // 414
    nest.key = function(d) {                                                                                           // 415
      keys.push(d);                                                                                                    // 416
      return nest;                                                                                                     // 417
    };                                                                                                                 // 418
    nest.sortKeys = function(order) {                                                                                  // 419
      sortKeys[keys.length - 1] = order;                                                                               // 420
      return nest;                                                                                                     // 421
    };                                                                                                                 // 422
    nest.sortValues = function(order) {                                                                                // 423
      sortValues = order;                                                                                              // 424
      return nest;                                                                                                     // 425
    };                                                                                                                 // 426
    nest.rollup = function(f) {                                                                                        // 427
      rollup = f;                                                                                                      // 428
      return nest;                                                                                                     // 429
    };                                                                                                                 // 430
    return nest;                                                                                                       // 431
  };                                                                                                                   // 432
  d3.set = function(array) {                                                                                           // 433
    var set = new d3_Set();                                                                                            // 434
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);                                        // 435
    return set;                                                                                                        // 436
  };                                                                                                                   // 437
  function d3_Set() {                                                                                                  // 438
    this._ = Object.create(null);                                                                                      // 439
  }                                                                                                                    // 440
  d3_class(d3_Set, {                                                                                                   // 441
    has: d3_map_has,                                                                                                   // 442
    add: function(key) {                                                                                               // 443
      this._[d3_map_escape(key += "")] = true;                                                                         // 444
      return key;                                                                                                      // 445
    },                                                                                                                 // 446
    remove: d3_map_remove,                                                                                             // 447
    values: d3_map_keys,                                                                                               // 448
    size: d3_map_size,                                                                                                 // 449
    empty: d3_map_empty,                                                                                               // 450
    forEach: function(f) {                                                                                             // 451
      for (var key in this._) f.call(this, d3_map_unescape(key));                                                      // 452
    }                                                                                                                  // 453
  });                                                                                                                  // 454
  d3.behavior = {};                                                                                                    // 455
  function d3_identity(d) {                                                                                            // 456
    return d;                                                                                                          // 457
  }                                                                                                                    // 458
  d3.rebind = function(target, source) {                                                                               // 459
    var i = 1, n = arguments.length, method;                                                                           // 460
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);                         // 461
    return target;                                                                                                     // 462
  };                                                                                                                   // 463
  function d3_rebind(target, source, method) {                                                                         // 464
    return function() {                                                                                                // 465
      var value = method.apply(source, arguments);                                                                     // 466
      return value === source ? target : value;                                                                        // 467
    };                                                                                                                 // 468
  }                                                                                                                    // 469
  function d3_vendorSymbol(object, name) {                                                                             // 470
    if (name in object) return name;                                                                                   // 471
    name = name.charAt(0).toUpperCase() + name.slice(1);                                                               // 472
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {                                                        // 473
      var prefixName = d3_vendorPrefixes[i] + name;                                                                    // 474
      if (prefixName in object) return prefixName;                                                                     // 475
    }                                                                                                                  // 476
  }                                                                                                                    // 477
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];                                                  // 478
  function d3_noop() {}                                                                                                // 479
  d3.dispatch = function() {                                                                                           // 480
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;                                                    // 481
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);                                              // 482
    return dispatch;                                                                                                   // 483
  };                                                                                                                   // 484
  function d3_dispatch() {}                                                                                            // 485
  d3_dispatch.prototype.on = function(type, listener) {                                                                // 486
    var i = type.indexOf("."), name = "";                                                                              // 487
    if (i >= 0) {                                                                                                      // 488
      name = type.slice(i + 1);                                                                                        // 489
      type = type.slice(0, i);                                                                                         // 490
    }                                                                                                                  // 491
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);                       // 492
    if (arguments.length === 2) {                                                                                      // 493
      if (listener == null) for (type in this) {                                                                       // 494
        if (this.hasOwnProperty(type)) this[type].on(name, null);                                                      // 495
      }                                                                                                                // 496
      return this;                                                                                                     // 497
    }                                                                                                                  // 498
  };                                                                                                                   // 499
  function d3_dispatch_event(dispatch) {                                                                               // 500
    var listeners = [], listenerByName = new d3_Map();                                                                 // 501
    function event() {                                                                                                 // 502
      var z = listeners, i = -1, n = z.length, l;                                                                      // 503
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);                                                       // 504
      return dispatch;                                                                                                 // 505
    }                                                                                                                  // 506
    event.on = function(name, listener) {                                                                              // 507
      var l = listenerByName.get(name), i;                                                                             // 508
      if (arguments.length < 2) return l && l.on;                                                                      // 509
      if (l) {                                                                                                         // 510
        l.on = null;                                                                                                   // 511
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));                       // 512
        listenerByName.remove(name);                                                                                   // 513
      }                                                                                                                // 514
      if (listener) listeners.push(listenerByName.set(name, {                                                          // 515
        on: listener                                                                                                   // 516
      }));                                                                                                             // 517
      return dispatch;                                                                                                 // 518
    };                                                                                                                 // 519
    return event;                                                                                                      // 520
  }                                                                                                                    // 521
  d3.event = null;                                                                                                     // 522
  function d3_eventPreventDefault() {                                                                                  // 523
    d3.event.preventDefault();                                                                                         // 524
  }                                                                                                                    // 525
  function d3_eventSource() {                                                                                          // 526
    var e = d3.event, s;                                                                                               // 527
    while (s = e.sourceEvent) e = s;                                                                                   // 528
    return e;                                                                                                          // 529
  }                                                                                                                    // 530
  function d3_eventDispatch(target) {                                                                                  // 531
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;                                                     // 532
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);                                              // 533
    dispatch.of = function(thiz, argumentz) {                                                                          // 534
      return function(e1) {                                                                                            // 535
        try {                                                                                                          // 536
          var e0 = e1.sourceEvent = d3.event;                                                                          // 537
          e1.target = target;                                                                                          // 538
          d3.event = e1;                                                                                               // 539
          dispatch[e1.type].apply(thiz, argumentz);                                                                    // 540
        } finally {                                                                                                    // 541
          d3.event = e0;                                                                                               // 542
        }                                                                                                              // 543
      };                                                                                                               // 544
    };                                                                                                                 // 545
    return dispatch;                                                                                                   // 546
  }                                                                                                                    // 547
  d3.requote = function(s) {                                                                                           // 548
    return s.replace(d3_requote_re, "\\$&");                                                                           // 549
  };                                                                                                                   // 550
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;                                                               // 551
  var d3_subclass = {}.__proto__ ? function(object, prototype) {                                                       // 552
    object.__proto__ = prototype;                                                                                      // 553
  } : function(object, prototype) {                                                                                    // 554
    for (var property in prototype) object[property] = prototype[property];                                            // 555
  };                                                                                                                   // 556
  function d3_selection(groups) {                                                                                      // 557
    d3_subclass(groups, d3_selectionPrototype);                                                                        // 558
    return groups;                                                                                                     // 559
  }                                                                                                                    // 560
  var d3_select = function(s, n) {                                                                                     // 561
    return n.querySelector(s);                                                                                         // 562
  }, d3_selectAll = function(s, n) {                                                                                   // 563
    return n.querySelectorAll(s);                                                                                      // 564
  }, d3_selectMatches = function(n, s) {                                                                               // 565
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];                                      // 566
    d3_selectMatches = function(n, s) {                                                                                // 567
      return d3_selectMatcher.call(n, s);                                                                              // 568
    };                                                                                                                 // 569
    return d3_selectMatches(n, s);                                                                                     // 570
  };                                                                                                                   // 571
  if (typeof Sizzle === "function") {                                                                                  // 572
    d3_select = function(s, n) {                                                                                       // 573
      return Sizzle(s, n)[0] || null;                                                                                  // 574
    };                                                                                                                 // 575
    d3_selectAll = Sizzle;                                                                                             // 576
    d3_selectMatches = Sizzle.matchesSelector;                                                                         // 577
  }                                                                                                                    // 578
  d3.selection = function() {                                                                                          // 579
    return d3.select(d3_document.documentElement);                                                                     // 580
  };                                                                                                                   // 581
  var d3_selectionPrototype = d3.selection.prototype = [];                                                             // 582
  d3_selectionPrototype.select = function(selector) {                                                                  // 583
    var subgroups = [], subgroup, subnode, group, node;                                                                // 584
    selector = d3_selection_selector(selector);                                                                        // 585
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 586
      subgroups.push(subgroup = []);                                                                                   // 587
      subgroup.parentNode = (group = this[j]).parentNode;                                                              // 588
      for (var i = -1, n = group.length; ++i < n; ) {                                                                  // 589
        if (node = group[i]) {                                                                                         // 590
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));                                           // 591
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;                                         // 592
        } else {                                                                                                       // 593
          subgroup.push(null);                                                                                         // 594
        }                                                                                                              // 595
      }                                                                                                                // 596
    }                                                                                                                  // 597
    return d3_selection(subgroups);                                                                                    // 598
  };                                                                                                                   // 599
  function d3_selection_selector(selector) {                                                                           // 600
    return typeof selector === "function" ? selector : function() {                                                    // 601
      return d3_select(selector, this);                                                                                // 602
    };                                                                                                                 // 603
  }                                                                                                                    // 604
  d3_selectionPrototype.selectAll = function(selector) {                                                               // 605
    var subgroups = [], subgroup, node;                                                                                // 606
    selector = d3_selection_selectorAll(selector);                                                                     // 607
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 608
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 609
        if (node = group[i]) {                                                                                         // 610
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));                               // 611
          subgroup.parentNode = node;                                                                                  // 612
        }                                                                                                              // 613
      }                                                                                                                // 614
    }                                                                                                                  // 615
    return d3_selection(subgroups);                                                                                    // 616
  };                                                                                                                   // 617
  function d3_selection_selectorAll(selector) {                                                                        // 618
    return typeof selector === "function" ? selector : function() {                                                    // 619
      return d3_selectAll(selector, this);                                                                             // 620
    };                                                                                                                 // 621
  }                                                                                                                    // 622
  var d3_nsPrefix = {                                                                                                  // 623
    svg: "http://www.w3.org/2000/svg",                                                                                 // 624
    xhtml: "http://www.w3.org/1999/xhtml",                                                                             // 625
    xlink: "http://www.w3.org/1999/xlink",                                                                             // 626
    xml: "http://www.w3.org/XML/1998/namespace",                                                                       // 627
    xmlns: "http://www.w3.org/2000/xmlns/"                                                                             // 628
  };                                                                                                                   // 629
  d3.ns = {                                                                                                            // 630
    prefix: d3_nsPrefix,                                                                                               // 631
    qualify: function(name) {                                                                                          // 632
      var i = name.indexOf(":"), prefix = name;                                                                        // 633
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);                                 // 634
      return d3_nsPrefix.hasOwnProperty(prefix) ? {                                                                    // 635
        space: d3_nsPrefix[prefix],                                                                                    // 636
        local: name                                                                                                    // 637
      } : name;                                                                                                        // 638
    }                                                                                                                  // 639
  };                                                                                                                   // 640
  d3_selectionPrototype.attr = function(name, value) {                                                                 // 641
    if (arguments.length < 2) {                                                                                        // 642
      if (typeof name === "string") {                                                                                  // 643
        var node = this.node();                                                                                        // 644
        name = d3.ns.qualify(name);                                                                                    // 645
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);                     // 646
      }                                                                                                                // 647
      for (value in name) this.each(d3_selection_attr(value, name[value]));                                            // 648
      return this;                                                                                                     // 649
    }                                                                                                                  // 650
    return this.each(d3_selection_attr(name, value));                                                                  // 651
  };                                                                                                                   // 652
  function d3_selection_attr(name, value) {                                                                            // 653
    name = d3.ns.qualify(name);                                                                                        // 654
    function attrNull() {                                                                                              // 655
      this.removeAttribute(name);                                                                                      // 656
    }                                                                                                                  // 657
    function attrNullNS() {                                                                                            // 658
      this.removeAttributeNS(name.space, name.local);                                                                  // 659
    }                                                                                                                  // 660
    function attrConstant() {                                                                                          // 661
      this.setAttribute(name, value);                                                                                  // 662
    }                                                                                                                  // 663
    function attrConstantNS() {                                                                                        // 664
      this.setAttributeNS(name.space, name.local, value);                                                              // 665
    }                                                                                                                  // 666
    function attrFunction() {                                                                                          // 667
      var x = value.apply(this, arguments);                                                                            // 668
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);                                      // 669
    }                                                                                                                  // 670
    function attrFunctionNS() {                                                                                        // 671
      var x = value.apply(this, arguments);                                                                            // 672
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }                                                                                                                  // 674
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }                                                                                                                    // 676
  function d3_collapse(s) {                                                                                            // 677
    return s.trim().replace(/\s+/g, " ");                                                                              // 678
  }                                                                                                                    // 679
  d3_selectionPrototype.classed = function(name, value) {                                                              // 680
    if (arguments.length < 2) {                                                                                        // 681
      if (typeof name === "string") {                                                                                  // 682
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;                                // 683
        if (value = node.classList) {                                                                                  // 684
          while (++i < n) if (!value.contains(name[i])) return false;                                                  // 685
        } else {                                                                                                       // 686
          value = node.getAttribute("class");                                                                          // 687
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;                              // 688
        }                                                                                                              // 689
        return true;                                                                                                   // 690
      }                                                                                                                // 691
      for (value in name) this.each(d3_selection_classed(value, name[value]));                                         // 692
      return this;                                                                                                     // 693
    }                                                                                                                  // 694
    return this.each(d3_selection_classed(name, value));                                                               // 695
  };                                                                                                                   // 696
  function d3_selection_classedRe(name) {                                                                              // 697
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");                                            // 698
  }                                                                                                                    // 699
  function d3_selection_classes(name) {                                                                                // 700
    return (name + "").trim().split(/^|\s+/);                                                                          // 701
  }                                                                                                                    // 702
  function d3_selection_classed(name, value) {                                                                         // 703
    name = d3_selection_classes(name).map(d3_selection_classedName);                                                   // 704
    var n = name.length;                                                                                               // 705
    function classedConstant() {                                                                                       // 706
      var i = -1;                                                                                                      // 707
      while (++i < n) name[i](this, value);                                                                            // 708
    }                                                                                                                  // 709
    function classedFunction() {                                                                                       // 710
      var i = -1, x = value.apply(this, arguments);                                                                    // 711
      while (++i < n) name[i](this, x);                                                                                // 712
    }                                                                                                                  // 713
    return typeof value === "function" ? classedFunction : classedConstant;                                            // 714
  }                                                                                                                    // 715
  function d3_selection_classedName(name) {                                                                            // 716
    var re = d3_selection_classedRe(name);                                                                             // 717
    return function(node, value) {                                                                                     // 718
      if (c = node.classList) return value ? c.add(name) : c.remove(name);                                             // 719
      var c = node.getAttribute("class") || "";                                                                        // 720
      if (value) {                                                                                                     // 721
        re.lastIndex = 0;                                                                                              // 722
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));                                      // 723
      } else {                                                                                                         // 724
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));                                                   // 725
      }                                                                                                                // 726
    };                                                                                                                 // 727
  }                                                                                                                    // 728
  d3_selectionPrototype.style = function(name, value, priority) {                                                      // 729
    var n = arguments.length;                                                                                          // 730
    if (n < 3) {                                                                                                       // 731
      if (typeof name !== "string") {                                                                                  // 732
        if (n < 2) value = "";                                                                                         // 733
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));                         // 734
        return this;                                                                                                   // 735
      }                                                                                                                // 736
      if (n < 2) {                                                                                                     // 737
        var node = this.node();                                                                                        // 738
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);                                    // 739
      }                                                                                                                // 740
      priority = "";                                                                                                   // 741
    }                                                                                                                  // 742
    return this.each(d3_selection_style(name, value, priority));                                                       // 743
  };                                                                                                                   // 744
  function d3_selection_style(name, value, priority) {                                                                 // 745
    function styleNull() {                                                                                             // 746
      this.style.removeProperty(name);                                                                                 // 747
    }                                                                                                                  // 748
    function styleConstant() {                                                                                         // 749
      this.style.setProperty(name, value, priority);                                                                   // 750
    }                                                                                                                  // 751
    function styleFunction() {                                                                                         // 752
      var x = value.apply(this, arguments);                                                                            // 753
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);                  // 754
    }                                                                                                                  // 755
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;                    // 756
  }                                                                                                                    // 757
  d3_selectionPrototype.property = function(name, value) {                                                             // 758
    if (arguments.length < 2) {                                                                                        // 759
      if (typeof name === "string") return this.node()[name];                                                          // 760
      for (value in name) this.each(d3_selection_property(value, name[value]));                                        // 761
      return this;                                                                                                     // 762
    }                                                                                                                  // 763
    return this.each(d3_selection_property(name, value));                                                              // 764
  };                                                                                                                   // 765
  function d3_selection_property(name, value) {                                                                        // 766
    function propertyNull() {                                                                                          // 767
      delete this[name];                                                                                               // 768
    }                                                                                                                  // 769
    function propertyConstant() {                                                                                      // 770
      this[name] = value;                                                                                              // 771
    }                                                                                                                  // 772
    function propertyFunction() {                                                                                      // 773
      var x = value.apply(this, arguments);                                                                            // 774
      if (x == null) delete this[name]; else this[name] = x;                                                           // 775
    }                                                                                                                  // 776
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;           // 777
  }                                                                                                                    // 778
  d3_selectionPrototype.text = function(value) {                                                                       // 779
    return arguments.length ? this.each(typeof value === "function" ? function() {                                     // 780
      var v = value.apply(this, arguments);                                                                            // 781
      this.textContent = v == null ? "" : v;                                                                           // 782
    } : value == null ? function() {                                                                                   // 783
      this.textContent = "";                                                                                           // 784
    } : function() {                                                                                                   // 785
      this.textContent = value;                                                                                        // 786
    }) : this.node().textContent;                                                                                      // 787
  };                                                                                                                   // 788
  d3_selectionPrototype.html = function(value) {                                                                       // 789
    return arguments.length ? this.each(typeof value === "function" ? function() {                                     // 790
      var v = value.apply(this, arguments);                                                                            // 791
      this.innerHTML = v == null ? "" : v;                                                                             // 792
    } : value == null ? function() {                                                                                   // 793
      this.innerHTML = "";                                                                                             // 794
    } : function() {                                                                                                   // 795
      this.innerHTML = value;                                                                                          // 796
    }) : this.node().innerHTML;                                                                                        // 797
  };                                                                                                                   // 798
  d3_selectionPrototype.append = function(name) {                                                                      // 799
    name = d3_selection_creator(name);                                                                                 // 800
    return this.select(function() {                                                                                    // 801
      return this.appendChild(name.apply(this, arguments));                                                            // 802
    });                                                                                                                // 803
  };                                                                                                                   // 804
  function d3_selection_creator(name) {                                                                                // 805
    function create() {                                                                                                // 806
      var document = this.ownerDocument, namespace = this.namespaceURI;                                                // 807
      return namespace ? document.createElementNS(namespace, name) : document.createElement(name);                     // 808
    }                                                                                                                  // 809
    function createNS() {                                                                                              // 810
      return this.ownerDocument.createElementNS(name.space, name.local);                                               // 811
    }                                                                                                                  // 812
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;                 // 813
  }                                                                                                                    // 814
  d3_selectionPrototype.insert = function(name, before) {                                                              // 815
    name = d3_selection_creator(name);                                                                                 // 816
    before = d3_selection_selector(before);                                                                            // 817
    return this.select(function() {                                                                                    // 818
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);                    // 819
    });                                                                                                                // 820
  };                                                                                                                   // 821
  d3_selectionPrototype.remove = function() {                                                                          // 822
    return this.each(d3_selectionRemove);                                                                              // 823
  };                                                                                                                   // 824
  function d3_selectionRemove() {                                                                                      // 825
    var parent = this.parentNode;                                                                                      // 826
    if (parent) parent.removeChild(this);                                                                              // 827
  }                                                                                                                    // 828
  d3_selectionPrototype.data = function(value, key) {                                                                  // 829
    var i = -1, n = this.length, group, node;                                                                          // 830
    if (!arguments.length) {                                                                                           // 831
      value = new Array(n = (group = this[0]).length);                                                                 // 832
      while (++i < n) {                                                                                                // 833
        if (node = group[i]) {                                                                                         // 834
          value[i] = node.__data__;                                                                                    // 835
        }                                                                                                              // 836
      }                                                                                                                // 837
      return value;                                                                                                    // 838
    }                                                                                                                  // 839
    function bind(group, groupData) {                                                                                  // 840
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {                                                                                                       // 842
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;                                         // 843
        for (i = -1; ++i < n; ) {                                                                                      // 844
          if (node = group[i]) {                                                                                       // 845
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {                                     // 846
              exitNodes[i] = node;                                                                                     // 847
            } else {                                                                                                   // 848
              nodeByKeyValue.set(keyValue, node);                                                                      // 849
            }                                                                                                          // 850
            keyValues[i] = keyValue;                                                                                   // 851
          }                                                                                                            // 852
        }                                                                                                              // 853
        for (i = -1; ++i < m; ) {                                                                                      // 854
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {              // 855
            enterNodes[i] = d3_selection_dataNode(nodeData);                                                           // 856
          } else if (node !== true) {                                                                                  // 857
            updateNodes[i] = node;                                                                                     // 858
            node.__data__ = nodeData;                                                                                  // 859
          }                                                                                                            // 860
          nodeByKeyValue.set(keyValue, true);                                                                          // 861
        }                                                                                                              // 862
        for (i = -1; ++i < n; ) {                                                                                      // 863
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {                                           // 864
            exitNodes[i] = group[i];                                                                                   // 865
          }                                                                                                            // 866
        }                                                                                                              // 867
      } else {                                                                                                         // 868
        for (i = -1; ++i < n0; ) {                                                                                     // 869
          node = group[i];                                                                                             // 870
          nodeData = groupData[i];                                                                                     // 871
          if (node) {                                                                                                  // 872
            node.__data__ = nodeData;                                                                                  // 873
            updateNodes[i] = node;                                                                                     // 874
          } else {                                                                                                     // 875
            enterNodes[i] = d3_selection_dataNode(nodeData);                                                           // 876
          }                                                                                                            // 877
        }                                                                                                              // 878
        for (;i < m; ++i) {                                                                                            // 879
          enterNodes[i] = d3_selection_dataNode(groupData[i]);                                                         // 880
        }                                                                                                              // 881
        for (;i < n; ++i) {                                                                                            // 882
          exitNodes[i] = group[i];                                                                                     // 883
        }                                                                                                              // 884
      }                                                                                                                // 885
      enterNodes.update = updateNodes;                                                                                 // 886
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;                        // 887
      enter.push(enterNodes);                                                                                          // 888
      update.push(updateNodes);                                                                                        // 889
      exit.push(exitNodes);                                                                                            // 890
    }                                                                                                                  // 891
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);                            // 892
    if (typeof value === "function") {                                                                                 // 893
      while (++i < n) {                                                                                                // 894
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));                                        // 895
      }                                                                                                                // 896
    } else {                                                                                                           // 897
      while (++i < n) {                                                                                                // 898
        bind(group = this[i], value);                                                                                  // 899
      }                                                                                                                // 900
    }                                                                                                                  // 901
    update.enter = function() {                                                                                        // 902
      return enter;                                                                                                    // 903
    };                                                                                                                 // 904
    update.exit = function() {                                                                                         // 905
      return exit;                                                                                                     // 906
    };                                                                                                                 // 907
    return update;                                                                                                     // 908
  };                                                                                                                   // 909
  function d3_selection_dataNode(data) {                                                                               // 910
    return {                                                                                                           // 911
      __data__: data                                                                                                   // 912
    };                                                                                                                 // 913
  }                                                                                                                    // 914
  d3_selectionPrototype.datum = function(value) {                                                                      // 915
    return arguments.length ? this.property("__data__", value) : this.property("__data__");                            // 916
  };                                                                                                                   // 917
  d3_selectionPrototype.filter = function(filter) {                                                                    // 918
    var subgroups = [], subgroup, group, node;                                                                         // 919
    if (typeof filter !== "function") filter = d3_selection_filter(filter);                                            // 920
    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 921
      subgroups.push(subgroup = []);                                                                                   // 922
      subgroup.parentNode = (group = this[j]).parentNode;                                                              // 923
      for (var i = 0, n = group.length; i < n; i++) {                                                                  // 924
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {                                             // 925
          subgroup.push(node);                                                                                         // 926
        }                                                                                                              // 927
      }                                                                                                                // 928
    }                                                                                                                  // 929
    return d3_selection(subgroups);                                                                                    // 930
  };                                                                                                                   // 931
  function d3_selection_filter(selector) {                                                                             // 932
    return function() {                                                                                                // 933
      return d3_selectMatches(this, selector);                                                                         // 934
    };                                                                                                                 // 935
  }                                                                                                                    // 936
  d3_selectionPrototype.order = function() {                                                                           // 937
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 938
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {                             // 939
        if (node = group[i]) {                                                                                         // 940
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);                             // 941
          next = node;                                                                                                 // 942
        }                                                                                                              // 943
      }                                                                                                                // 944
    }                                                                                                                  // 945
    return this;                                                                                                       // 946
  };                                                                                                                   // 947
  d3_selectionPrototype.sort = function(comparator) {                                                                  // 948
    comparator = d3_selection_sortComparator.apply(this, arguments);                                                   // 949
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);                                             // 950
    return this.order();                                                                                               // 951
  };                                                                                                                   // 952
  function d3_selection_sortComparator(comparator) {                                                                   // 953
    if (!arguments.length) comparator = d3_ascending;                                                                  // 954
    return function(a, b) {                                                                                            // 955
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;                                                    // 956
    };                                                                                                                 // 957
  }                                                                                                                    // 958
  d3_selectionPrototype.each = function(callback) {                                                                    // 959
    return d3_selection_each(this, function(node, i, j) {                                                              // 960
      callback.call(node, node.__data__, i, j);                                                                        // 961
    });                                                                                                                // 962
  };                                                                                                                   // 963
  function d3_selection_each(groups, callback) {                                                                       // 964
    for (var j = 0, m = groups.length; j < m; j++) {                                                                   // 965
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {                                         // 966
        if (node = group[i]) callback(node, i, j);                                                                     // 967
      }                                                                                                                // 968
    }                                                                                                                  // 969
    return groups;                                                                                                     // 970
  }                                                                                                                    // 971
  d3_selectionPrototype.call = function(callback) {                                                                    // 972
    var args = d3_array(arguments);                                                                                    // 973
    callback.apply(args[0] = this, args);                                                                              // 974
    return this;                                                                                                       // 975
  };                                                                                                                   // 976
  d3_selectionPrototype.empty = function() {                                                                           // 977
    return !this.node();                                                                                               // 978
  };                                                                                                                   // 979
  d3_selectionPrototype.node = function() {                                                                            // 980
    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 981
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 982
        var node = group[i];                                                                                           // 983
        if (node) return node;                                                                                         // 984
      }                                                                                                                // 985
    }                                                                                                                  // 986
    return null;                                                                                                       // 987
  };                                                                                                                   // 988
  d3_selectionPrototype.size = function() {                                                                            // 989
    var n = 0;                                                                                                         // 990
    d3_selection_each(this, function() {                                                                               // 991
      ++n;                                                                                                             // 992
    });                                                                                                                // 993
    return n;                                                                                                          // 994
  };                                                                                                                   // 995
  function d3_selection_enter(selection) {                                                                             // 996
    d3_subclass(selection, d3_selection_enterPrototype);                                                               // 997
    return selection;                                                                                                  // 998
  }                                                                                                                    // 999
  var d3_selection_enterPrototype = [];                                                                                // 1000
  d3.selection.enter = d3_selection_enter;                                                                             // 1001
  d3.selection.enter.prototype = d3_selection_enterPrototype;                                                          // 1002
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;                                                   // 1003
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;                                                     // 1004
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;                                                       // 1005
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;                                                       // 1006
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;                                                       // 1007
  d3_selection_enterPrototype.select = function(selector) {                                                            // 1008
    var subgroups = [], subgroup, subnode, upgroup, group, node;                                                       // 1009
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 1010
      upgroup = (group = this[j]).update;                                                                              // 1011
      subgroups.push(subgroup = []);                                                                                   // 1012
      subgroup.parentNode = group.parentNode;                                                                          // 1013
      for (var i = -1, n = group.length; ++i < n; ) {                                                                  // 1014
        if (node = group[i]) {                                                                                         // 1015
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));                  // 1016
          subnode.__data__ = node.__data__;                                                                            // 1017
        } else {                                                                                                       // 1018
          subgroup.push(null);                                                                                         // 1019
        }                                                                                                              // 1020
      }                                                                                                                // 1021
    }                                                                                                                  // 1022
    return d3_selection(subgroups);                                                                                    // 1023
  };                                                                                                                   // 1024
  d3_selection_enterPrototype.insert = function(name, before) {                                                        // 1025
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);                                           // 1026
    return d3_selectionPrototype.insert.call(this, name, before);                                                      // 1027
  };                                                                                                                   // 1028
  function d3_selection_enterInsertBefore(enter) {                                                                     // 1029
    var i0, j0;                                                                                                        // 1030
    return function(d, i, j) {                                                                                         // 1031
      var group = enter[j].update, n = group.length, node;                                                             // 1032
      if (j != j0) j0 = j, i0 = 0;                                                                                     // 1033
      if (i >= i0) i0 = i + 1;                                                                                         // 1034
      while (!(node = group[i0]) && ++i0 < n) ;                                                                        // 1035
      return node;                                                                                                     // 1036
    };                                                                                                                 // 1037
  }                                                                                                                    // 1038
  d3.select = function(node) {                                                                                         // 1039
    var group;                                                                                                         // 1040
    if (typeof node === "string") {                                                                                    // 1041
      group = [ d3_select(node, d3_document) ];                                                                        // 1042
      group.parentNode = d3_document.documentElement;                                                                  // 1043
    } else {                                                                                                           // 1044
      group = [ node ];                                                                                                // 1045
      group.parentNode = d3_documentElement(node);                                                                     // 1046
    }                                                                                                                  // 1047
    return d3_selection([ group ]);                                                                                    // 1048
  };                                                                                                                   // 1049
  d3.selectAll = function(nodes) {                                                                                     // 1050
    var group;                                                                                                         // 1051
    if (typeof nodes === "string") {                                                                                   // 1052
      group = d3_array(d3_selectAll(nodes, d3_document));                                                              // 1053
      group.parentNode = d3_document.documentElement;                                                                  // 1054
    } else {                                                                                                           // 1055
      group = d3_array(nodes);                                                                                         // 1056
      group.parentNode = null;                                                                                         // 1057
    }                                                                                                                  // 1058
    return d3_selection([ group ]);                                                                                    // 1059
  };                                                                                                                   // 1060
  d3_selectionPrototype.on = function(type, listener, capture) {                                                       // 1061
    var n = arguments.length;                                                                                          // 1062
    if (n < 3) {                                                                                                       // 1063
      if (typeof type !== "string") {                                                                                  // 1064
        if (n < 2) listener = false;                                                                                   // 1065
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));                            // 1066
        return this;                                                                                                   // 1067
      }                                                                                                                // 1068
      if (n < 2) return (n = this.node()["__on" + type]) && n._;                                                       // 1069
      capture = false;                                                                                                 // 1070
    }                                                                                                                  // 1071
    return this.each(d3_selection_on(type, listener, capture));                                                        // 1072
  };                                                                                                                   // 1073
  function d3_selection_on(type, listener, capture) {                                                                  // 1074
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;                                   // 1075
    if (i > 0) type = type.slice(0, i);                                                                                // 1076
    var filter = d3_selection_onFilters.get(type);                                                                     // 1077
    if (filter) type = filter, wrap = d3_selection_onFilter;                                                           // 1078
    function onRemove() {                                                                                              // 1079
      var l = this[name];                                                                                              // 1080
      if (l) {                                                                                                         // 1081
        this.removeEventListener(type, l, l.$);                                                                        // 1082
        delete this[name];                                                                                             // 1083
      }                                                                                                                // 1084
    }                                                                                                                  // 1085
    function onAdd() {                                                                                                 // 1086
      var l = wrap(listener, d3_array(arguments));                                                                     // 1087
      onRemove.call(this);                                                                                             // 1088
      this.addEventListener(type, this[name] = l, l.$ = capture);                                                      // 1089
      l._ = listener;                                                                                                  // 1090
    }                                                                                                                  // 1091
    function removeAll() {                                                                                             // 1092
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;                                             // 1093
      for (var name in this) {                                                                                         // 1094
        if (match = name.match(re)) {                                                                                  // 1095
          var l = this[name];                                                                                          // 1096
          this.removeEventListener(match[1], l, l.$);                                                                  // 1097
          delete this[name];                                                                                           // 1098
        }                                                                                                              // 1099
      }                                                                                                                // 1100
    }                                                                                                                  // 1101
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;                                           // 1102
  }                                                                                                                    // 1103
  var d3_selection_onFilters = d3.map({                                                                                // 1104
    mouseenter: "mouseover",                                                                                           // 1105
    mouseleave: "mouseout"                                                                                             // 1106
  });                                                                                                                  // 1107
  if (d3_document) {                                                                                                   // 1108
    d3_selection_onFilters.forEach(function(k) {                                                                       // 1109
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);                                                   // 1110
    });                                                                                                                // 1111
  }                                                                                                                    // 1112
  function d3_selection_onListener(listener, argumentz) {                                                              // 1113
    return function(e) {                                                                                               // 1114
      var o = d3.event;                                                                                                // 1115
      d3.event = e;                                                                                                    // 1116
      argumentz[0] = this.__data__;                                                                                    // 1117
      try {                                                                                                            // 1118
        listener.apply(this, argumentz);                                                                               // 1119
      } finally {                                                                                                      // 1120
        d3.event = o;                                                                                                  // 1121
      }                                                                                                                // 1122
    };                                                                                                                 // 1123
  }                                                                                                                    // 1124
  function d3_selection_onFilter(listener, argumentz) {                                                                // 1125
    var l = d3_selection_onListener(listener, argumentz);                                                              // 1126
    return function(e) {                                                                                               // 1127
      var target = this, related = e.relatedTarget;                                                                    // 1128
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {                          // 1129
        l.call(target, e);                                                                                             // 1130
      }                                                                                                                // 1131
    };                                                                                                                 // 1132
  }                                                                                                                    // 1133
  var d3_event_dragSelect, d3_event_dragId = 0;                                                                        // 1134
  function d3_event_dragSuppress(node) {                                                                               // 1135
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {                                                                                 // 1137
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");               // 1138
    }                                                                                                                  // 1139
    if (d3_event_dragSelect) {                                                                                         // 1140
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];                                 // 1141
      style[d3_event_dragSelect] = "none";                                                                             // 1142
    }                                                                                                                  // 1143
    return function(suppressClick) {                                                                                   // 1144
      w.on(name, null);                                                                                                // 1145
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;                                                    // 1146
      if (suppressClick) {                                                                                             // 1147
        var off = function() {                                                                                         // 1148
          w.on(click, null);                                                                                           // 1149
        };                                                                                                             // 1150
        w.on(click, function() {                                                                                       // 1151
          d3_eventPreventDefault();                                                                                    // 1152
          off();                                                                                                       // 1153
        }, true);                                                                                                      // 1154
        setTimeout(off, 0);                                                                                            // 1155
      }                                                                                                                // 1156
    };                                                                                                                 // 1157
  }                                                                                                                    // 1158
  d3.mouse = function(container) {                                                                                     // 1159
    return d3_mousePoint(container, d3_eventSource());                                                                 // 1160
  };                                                                                                                   // 1161
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;                          // 1162
  function d3_mousePoint(container, e) {                                                                               // 1163
    if (e.changedTouches) e = e.changedTouches[0];                                                                     // 1164
    var svg = container.ownerSVGElement || container;                                                                  // 1165
    if (svg.createSVGPoint) {                                                                                          // 1166
      var point = svg.createSVGPoint();                                                                                // 1167
      if (d3_mouse_bug44083 < 0) {                                                                                     // 1168
        var window = d3_window(container);                                                                             // 1169
        if (window.scrollX || window.scrollY) {                                                                        // 1170
          svg = d3.select("body").append("svg").style({                                                                // 1171
            position: "absolute",                                                                                      // 1172
            top: 0,                                                                                                    // 1173
            left: 0,                                                                                                   // 1174
            margin: 0,                                                                                                 // 1175
            padding: 0,                                                                                                // 1176
            border: "none"                                                                                             // 1177
          }, "important");                                                                                             // 1178
          var ctm = svg[0][0].getScreenCTM();                                                                          // 1179
          d3_mouse_bug44083 = !(ctm.f || ctm.e);                                                                       // 1180
          svg.remove();                                                                                                // 1181
        }                                                                                                              // 1182
      }                                                                                                                // 1183
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX,                           // 1184
      point.y = e.clientY;                                                                                             // 1185
      point = point.matrixTransform(container.getScreenCTM().inverse());                                               // 1186
      return [ point.x, point.y ];                                                                                     // 1187
    }                                                                                                                  // 1188
    var rect = container.getBoundingClientRect();                                                                      // 1189
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];               // 1190
  }                                                                                                                    // 1191
  d3.touch = function(container, touches, identifier) {                                                                // 1192
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;                         // 1193
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {                                              // 1194
      if ((touch = touches[i]).identifier === identifier) {                                                            // 1195
        return d3_mousePoint(container, touch);                                                                        // 1196
      }                                                                                                                // 1197
    }                                                                                                                  // 1198
  };                                                                                                                   // 1199
  d3.behavior.drag = function() {                                                                                      // 1200
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {                                                                                                  // 1202
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);                                          // 1203
    }                                                                                                                  // 1204
    function dragstart(id, position, subject, move, end) {                                                             // 1205
      return function() {                                                                                              // 1206
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {                                                                                                  // 1208
          dragOffset = origin.apply(that, arguments);                                                                  // 1209
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];                                   // 1210
        } else {                                                                                                       // 1211
          dragOffset = [ 0, 0 ];                                                                                       // 1212
        }                                                                                                              // 1213
        dispatch({                                                                                                     // 1214
          type: "dragstart"                                                                                            // 1215
        });                                                                                                            // 1216
        function moved() {                                                                                             // 1217
          var position1 = position(parent, dragId), dx, dy;                                                            // 1218
          if (!position1) return;                                                                                      // 1219
          dx = position1[0] - position0[0];                                                                            // 1220
          dy = position1[1] - position0[1];                                                                            // 1221
          dragged |= dx | dy;                                                                                          // 1222
          position0 = position1;                                                                                       // 1223
          dispatch({                                                                                                   // 1224
            type: "drag",                                                                                              // 1225
            x: position1[0] + dragOffset[0],                                                                           // 1226
            y: position1[1] + dragOffset[1],                                                                           // 1227
            dx: dx,                                                                                                    // 1228
            dy: dy                                                                                                     // 1229
          });                                                                                                          // 1230
        }                                                                                                              // 1231
        function ended() {                                                                                             // 1232
          if (!position(parent, dragId)) return;                                                                       // 1233
          dragSubject.on(move + dragName, null).on(end + dragName, null);                                              // 1234
          dragRestore(dragged && d3.event.target === target);                                                          // 1235
          dispatch({                                                                                                   // 1236
            type: "dragend"                                                                                            // 1237
          });                                                                                                          // 1238
        }                                                                                                              // 1239
      };                                                                                                               // 1240
    }                                                                                                                  // 1241
    drag.origin = function(x) {                                                                                        // 1242
      if (!arguments.length) return origin;                                                                            // 1243
      origin = x;                                                                                                      // 1244
      return drag;                                                                                                     // 1245
    };                                                                                                                 // 1246
    return d3.rebind(drag, event, "on");                                                                               // 1247
  };                                                                                                                   // 1248
  function d3_behavior_dragTouchId() {                                                                                 // 1249
    return d3.event.changedTouches[0].identifier;                                                                      // 1250
  }                                                                                                                    // 1251
  d3.touches = function(container, touches) {                                                                          // 1252
    if (arguments.length < 2) touches = d3_eventSource().touches;                                                      // 1253
    return touches ? d3_array(touches).map(function(touch) {                                                           // 1254
      var point = d3_mousePoint(container, touch);                                                                     // 1255
      point.identifier = touch.identifier;                                                                             // 1256
      return point;                                                                                                    // 1257
    }) : [];                                                                                                           // 1258
  };                                                                                                                   // 1259
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {                                                                                                 // 1261
    return x > 0 ? 1 : x < 0 ? -1 : 0;                                                                                 // 1262
  }                                                                                                                    // 1263
  function d3_cross2d(a, b, c) {                                                                                       // 1264
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);                                              // 1265
  }                                                                                                                    // 1266
  function d3_acos(x) {                                                                                                // 1267
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);                                                                      // 1268
  }                                                                                                                    // 1269
  function d3_asin(x) {                                                                                                // 1270
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);                                                             // 1271
  }                                                                                                                    // 1272
  function d3_sinh(x) {                                                                                                // 1273
    return ((x = Math.exp(x)) - 1 / x) / 2;                                                                            // 1274
  }                                                                                                                    // 1275
  function d3_cosh(x) {                                                                                                // 1276
    return ((x = Math.exp(x)) + 1 / x) / 2;                                                                            // 1277
  }                                                                                                                    // 1278
  function d3_tanh(x) {                                                                                                // 1279
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);                                                                      // 1280
  }                                                                                                                    // 1281
  function d3_haversin(x) {                                                                                            // 1282
    return (x = Math.sin(x / 2)) * x;                                                                                  // 1283
  }                                                                                                                    // 1284
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;                                                                                  // 1285
  d3.interpolateZoom = function(p0, p1) {                                                                              // 1286
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {                                                                                                     // 1288
      S = Math.log(w1 / w0) / ρ;                                                                                       // 1289
      i = function(t) {                                                                                                // 1290
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];                                               // 1291
      };                                                                                                               // 1292
    } else {                                                                                                           // 1293
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;                                                                                               // 1295
      i = function(t) {                                                                                                // 1296
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));        // 1297
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];                                      // 1298
      };                                                                                                               // 1299
    }                                                                                                                  // 1300
    i.duration = S * 1e3;                                                                                              // 1301
    return i;                                                                                                          // 1302
  };                                                                                                                   // 1303
  d3.behavior.zoom = function() {                                                                                      // 1304
    var view = {                                                                                                       // 1305
      x: 0,                                                                                                            // 1306
      y: 0,                                                                                                            // 1307
      k: 1                                                                                                             // 1308
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {                                                                                      // 1310
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {                         // 1311
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);                                                      // 1312
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {                              // 1313
        return d3.event.wheelDelta;                                                                                    // 1314
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {                                                         // 1315
        return -d3.event.detail;                                                                                       // 1316
      }, "MozMousePixelScroll");                                                                                       // 1317
    }                                                                                                                  // 1318
    function zoom(g) {                                                                                                 // 1319
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }                                                                                                                  // 1321
    zoom.event = function(g) {                                                                                         // 1322
      g.each(function() {                                                                                              // 1323
        var dispatch = event.of(this, arguments), view1 = view;                                                        // 1324
        if (d3_transitionInheritId) {                                                                                  // 1325
          d3.select(this).transition().each("start.zoom", function() {                                                 // 1326
            view = this.__chart__ || {                                                                                 // 1327
              x: 0,                                                                                                    // 1328
              y: 0,                                                                                                    // 1329
              k: 1                                                                                                     // 1330
            };                                                                                                         // 1331
            zoomstarted(dispatch);                                                                                     // 1332
          }).tween("zoom:zoom", function() {                                                                           // 1333
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {                                                                                       // 1335
              var l = i(t), k = dx / l[2];                                                                             // 1336
              this.__chart__ = view = {                                                                                // 1337
                x: cx - l[0] * k,                                                                                      // 1338
                y: cy - l[1] * k,                                                                                      // 1339
                k: k                                                                                                   // 1340
              };                                                                                                       // 1341
              zoomed(dispatch);                                                                                        // 1342
            };                                                                                                         // 1343
          }).each("interrupt.zoom", function() {                                                                       // 1344
            zoomended(dispatch);                                                                                       // 1345
          }).each("end.zoom", function() {                                                                             // 1346
            zoomended(dispatch);                                                                                       // 1347
          });                                                                                                          // 1348
        } else {                                                                                                       // 1349
          this.__chart__ = view;                                                                                       // 1350
          zoomstarted(dispatch);                                                                                       // 1351
          zoomed(dispatch);                                                                                            // 1352
          zoomended(dispatch);                                                                                         // 1353
        }                                                                                                              // 1354
      });                                                                                                              // 1355
    };                                                                                                                 // 1356
    zoom.translate = function(_) {                                                                                     // 1357
      if (!arguments.length) return [ view.x, view.y ];                                                                // 1358
      view = {                                                                                                         // 1359
        x: +_[0],                                                                                                      // 1360
        y: +_[1],                                                                                                      // 1361
        k: view.k                                                                                                      // 1362
      };                                                                                                               // 1363
      rescale();                                                                                                       // 1364
      return zoom;                                                                                                     // 1365
    };                                                                                                                 // 1366
    zoom.scale = function(_) {                                                                                         // 1367
      if (!arguments.length) return view.k;                                                                            // 1368
      view = {                                                                                                         // 1369
        x: view.x,                                                                                                     // 1370
        y: view.y,                                                                                                     // 1371
        k: null                                                                                                        // 1372
      };                                                                                                               // 1373
      scaleTo(+_);                                                                                                     // 1374
      rescale();                                                                                                       // 1375
      return zoom;                                                                                                     // 1376
    };                                                                                                                 // 1377
    zoom.scaleExtent = function(_) {                                                                                   // 1378
      if (!arguments.length) return scaleExtent;                                                                       // 1379
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];                                           // 1380
      return zoom;                                                                                                     // 1381
    };                                                                                                                 // 1382
    zoom.center = function(_) {                                                                                        // 1383
      if (!arguments.length) return center;                                                                            // 1384
      center = _ && [ +_[0], +_[1] ];                                                                                  // 1385
      return zoom;                                                                                                     // 1386
    };                                                                                                                 // 1387
    zoom.size = function(_) {                                                                                          // 1388
      if (!arguments.length) return size;                                                                              // 1389
      size = _ && [ +_[0], +_[1] ];                                                                                    // 1390
      return zoom;                                                                                                     // 1391
    };                                                                                                                 // 1392
    zoom.duration = function(_) {                                                                                      // 1393
      if (!arguments.length) return duration;                                                                          // 1394
      duration = +_;                                                                                                   // 1395
      return zoom;                                                                                                     // 1396
    };                                                                                                                 // 1397
    zoom.x = function(z) {                                                                                             // 1398
      if (!arguments.length) return x1;                                                                                // 1399
      x1 = z;                                                                                                          // 1400
      x0 = z.copy();                                                                                                   // 1401
      view = {                                                                                                         // 1402
        x: 0,                                                                                                          // 1403
        y: 0,                                                                                                          // 1404
        k: 1                                                                                                           // 1405
      };                                                                                                               // 1406
      return zoom;                                                                                                     // 1407
    };                                                                                                                 // 1408
    zoom.y = function(z) {                                                                                             // 1409
      if (!arguments.length) return y1;                                                                                // 1410
      y1 = z;                                                                                                          // 1411
      y0 = z.copy();                                                                                                   // 1412
      view = {                                                                                                         // 1413
        x: 0,                                                                                                          // 1414
        y: 0,                                                                                                          // 1415
        k: 1                                                                                                           // 1416
      };                                                                                                               // 1417
      return zoom;                                                                                                     // 1418
    };                                                                                                                 // 1419
    function location(p) {                                                                                             // 1420
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];                                                   // 1421
    }                                                                                                                  // 1422
    function point(l) {                                                                                                // 1423
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];                                                       // 1424
    }                                                                                                                  // 1425
    function scaleTo(s) {                                                                                              // 1426
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));                                                  // 1427
    }                                                                                                                  // 1428
    function translateTo(p, l) {                                                                                       // 1429
      l = point(l);                                                                                                    // 1430
      view.x += p[0] - l[0];                                                                                           // 1431
      view.y += p[1] - l[1];                                                                                           // 1432
    }                                                                                                                  // 1433
    function zoomTo(that, p, l, k) {                                                                                   // 1434
      that.__chart__ = {                                                                                               // 1435
        x: view.x,                                                                                                     // 1436
        y: view.y,                                                                                                     // 1437
        k: view.k                                                                                                      // 1438
      };                                                                                                               // 1439
      scaleTo(Math.pow(2, k));                                                                                         // 1440
      translateTo(center0 = p, l);                                                                                     // 1441
      that = d3.select(that);                                                                                          // 1442
      if (duration > 0) that = that.transition().duration(duration);                                                   // 1443
      that.call(zoom.event);                                                                                           // 1444
    }                                                                                                                  // 1445
    function rescale() {                                                                                               // 1446
      if (x1) x1.domain(x0.range().map(function(x) {                                                                   // 1447
        return (x - view.x) / view.k;                                                                                  // 1448
      }).map(x0.invert));                                                                                              // 1449
      if (y1) y1.domain(y0.range().map(function(y) {                                                                   // 1450
        return (y - view.y) / view.k;                                                                                  // 1451
      }).map(y0.invert));                                                                                              // 1452
    }                                                                                                                  // 1453
    function zoomstarted(dispatch) {                                                                                   // 1454
      if (!zooming++) dispatch({                                                                                       // 1455
        type: "zoomstart"                                                                                              // 1456
      });                                                                                                              // 1457
    }                                                                                                                  // 1458
    function zoomed(dispatch) {                                                                                        // 1459
      rescale();                                                                                                       // 1460
      dispatch({                                                                                                       // 1461
        type: "zoom",                                                                                                  // 1462
        scale: view.k,                                                                                                 // 1463
        translate: [ view.x, view.y ]                                                                                  // 1464
      });                                                                                                              // 1465
    }                                                                                                                  // 1466
    function zoomended(dispatch) {                                                                                     // 1467
      if (!--zooming) dispatch({                                                                                       // 1468
        type: "zoomend"                                                                                                // 1469
      }), center0 = null;                                                                                              // 1470
    }                                                                                                                  // 1471
    function mousedowned() {                                                                                           // 1472
      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);                                                                               // 1474
      zoomstarted(dispatch);                                                                                           // 1475
      function moved() {                                                                                               // 1476
        dragged = 1;                                                                                                   // 1477
        translateTo(d3.mouse(that), location0);                                                                        // 1478
        zoomed(dispatch);                                                                                              // 1479
      }                                                                                                                // 1480
      function ended() {                                                                                               // 1481
        subject.on(mousemove, null).on(mouseup, null);                                                                 // 1482
        dragRestore(dragged && d3.event.target === target);                                                            // 1483
        zoomended(dispatch);                                                                                           // 1484
      }                                                                                                                // 1485
    }                                                                                                                  // 1486
    function touchstarted() {                                                                                          // 1487
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();                                                                                                       // 1489
      zoomstarted(dispatch);                                                                                           // 1490
      subject.on(mousedown, null).on(touchstart, started);                                                             // 1491
      function relocate() {                                                                                            // 1492
        var touches = d3.touches(that);                                                                                // 1493
        scale0 = view.k;                                                                                               // 1494
        touches.forEach(function(t) {                                                                                  // 1495
          if (t.identifier in locations0) locations0[t.identifier] = location(t);                                      // 1496
        });                                                                                                            // 1497
        return touches;                                                                                                // 1498
      }                                                                                                                // 1499
      function started() {                                                                                             // 1500
        var target = d3.event.target;                                                                                  // 1501
        d3.select(target).on(touchmove, moved).on(touchend, ended);                                                    // 1502
        targets.push(target);                                                                                          // 1503
        var changed = d3.event.changedTouches;                                                                         // 1504
        for (var i = 0, n = changed.length; i < n; ++i) {                                                              // 1505
          locations0[changed[i].identifier] = null;                                                                    // 1506
        }                                                                                                              // 1507
        var touches = relocate(), now = Date.now();                                                                    // 1508
        if (touches.length === 1) {                                                                                    // 1509
          if (now - touchtime < 500) {                                                                                 // 1510
            var p = touches[0];                                                                                        // 1511
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);                    // 1512
            d3_eventPreventDefault();                                                                                  // 1513
          }                                                                                                            // 1514
          touchtime = now;                                                                                             // 1515
        } else if (touches.length > 1) {                                                                               // 1516
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];                                      // 1517
          distance0 = dx * dx + dy * dy;                                                                               // 1518
        }                                                                                                              // 1519
      }                                                                                                                // 1520
      function moved() {                                                                                               // 1521
        var touches = d3.touches(that), p0, l0, p1, l1;                                                                // 1522
        d3_selection_interrupt.call(that);                                                                             // 1523
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {                                                   // 1524
          p1 = touches[i];                                                                                             // 1525
          if (l1 = locations0[p1.identifier]) {                                                                        // 1526
            if (l0) break;                                                                                             // 1527
            p0 = p1, l0 = l1;                                                                                          // 1528
          }                                                                                                            // 1529
        }                                                                                                              // 1530
        if (l1) {                                                                                                      // 1531
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];                                                           // 1533
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];                                                           // 1534
          scaleTo(scale1 * scale0);                                                                                    // 1535
        }                                                                                                              // 1536
        touchtime = null;                                                                                              // 1537
        translateTo(p0, l0);                                                                                           // 1538
        zoomed(dispatch);                                                                                              // 1539
      }                                                                                                                // 1540
      function ended() {                                                                                               // 1541
        if (d3.event.touches.length) {                                                                                 // 1542
          var changed = d3.event.changedTouches;                                                                       // 1543
          for (var i = 0, n = changed.length; i < n; ++i) {                                                            // 1544
            delete locations0[changed[i].identifier];                                                                  // 1545
          }                                                                                                            // 1546
          for (var identifier in locations0) {                                                                         // 1547
            return void relocate();                                                                                    // 1548
          }                                                                                                            // 1549
        }                                                                                                              // 1550
        d3.selectAll(targets).on(zoomName, null);                                                                      // 1551
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);                                               // 1552
        dragRestore();                                                                                                 // 1553
        zoomended(dispatch);                                                                                           // 1554
      }                                                                                                                // 1555
    }                                                                                                                  // 1556
    function mousewheeled() {                                                                                          // 1557
      var dispatch = event.of(this, arguments);                                                                        // 1558
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this),                      // 1559
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);                                // 1560
      mousewheelTimer = setTimeout(function() {                                                                        // 1561
        mousewheelTimer = null;                                                                                        // 1562
        zoomended(dispatch);                                                                                           // 1563
      }, 50);                                                                                                          // 1564
      d3_eventPreventDefault();                                                                                        // 1565
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);                                                   // 1566
      translateTo(center0, translate0);                                                                                // 1567
      zoomed(dispatch);                                                                                                // 1568
    }                                                                                                                  // 1569
    function dblclicked() {                                                                                            // 1570
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;                                                         // 1571
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);                          // 1572
    }                                                                                                                  // 1573
    return d3.rebind(zoom, event, "on");                                                                               // 1574
  };                                                                                                                   // 1575
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;                        // 1576
  d3.color = d3_color;                                                                                                 // 1577
  function d3_color() {}                                                                                               // 1578
  d3_color.prototype.toString = function() {                                                                           // 1579
    return this.rgb() + "";                                                                                            // 1580
  };                                                                                                                   // 1581
  d3.hsl = d3_hsl;                                                                                                     // 1582
  function d3_hsl(h, s, l) {                                                                                           // 1583
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }                                                                                                                    // 1585
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();                                                             // 1586
  d3_hslPrototype.brighter = function(k) {                                                                             // 1587
    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1588
    return new d3_hsl(this.h, this.s, this.l / k);                                                                     // 1589
  };                                                                                                                   // 1590
  d3_hslPrototype.darker = function(k) {                                                                               // 1591
    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1592
    return new d3_hsl(this.h, this.s, k * this.l);                                                                     // 1593
  };                                                                                                                   // 1594
  d3_hslPrototype.rgb = function() {                                                                                   // 1595
    return d3_hsl_rgb(this.h, this.s, this.l);                                                                         // 1596
  };                                                                                                                   // 1597
  function d3_hsl_rgb(h, s, l) {                                                                                       // 1598
    var m1, m2;                                                                                                        // 1599
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;                                                                   // 1600
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;                                                                      // 1601
    l = l < 0 ? 0 : l > 1 ? 1 : l;                                                                                     // 1602
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;                                                                        // 1603
    m1 = 2 * l - m2;                                                                                                   // 1604
    function v(h) {                                                                                                    // 1605
      if (h > 360) h -= 360; else if (h < 0) h += 360;                                                                 // 1606
      if (h < 60) return m1 + (m2 - m1) * h / 60;                                                                      // 1607
      if (h < 180) return m2;                                                                                          // 1608
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;                                                             // 1609
      return m1;                                                                                                       // 1610
    }                                                                                                                  // 1611
    function vv(h) {                                                                                                   // 1612
      return Math.round(v(h) * 255);                                                                                   // 1613
    }                                                                                                                  // 1614
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));                                                                // 1615
  }                                                                                                                    // 1616
  d3.hcl = d3_hcl;                                                                                                     // 1617
  function d3_hcl(h, c, l) {                                                                                           // 1618
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }                                                                                                                    // 1620
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();                                                             // 1621
  d3_hclPrototype.brighter = function(k) {                                                                             // 1622
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));                  // 1623
  };                                                                                                                   // 1624
  d3_hclPrototype.darker = function(k) {                                                                               // 1625
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));                    // 1626
  };                                                                                                                   // 1627
  d3_hclPrototype.rgb = function() {                                                                                   // 1628
    return d3_hcl_lab(this.h, this.c, this.l).rgb();                                                                   // 1629
  };                                                                                                                   // 1630
  function d3_hcl_lab(h, c, l) {                                                                                       // 1631
    if (isNaN(h)) h = 0;                                                                                               // 1632
    if (isNaN(c)) c = 0;                                                                                               // 1633
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);                                              // 1634
  }                                                                                                                    // 1635
  d3.lab = d3_lab;                                                                                                     // 1636
  function d3_lab(l, a, b) {                                                                                           // 1637
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }                                                                                                                    // 1639
  var d3_lab_K = 18;                                                                                                   // 1640
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;                                                             // 1641
  var d3_labPrototype = d3_lab.prototype = new d3_color();                                                             // 1642
  d3_labPrototype.brighter = function(k) {                                                                             // 1643
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);                  // 1644
  };                                                                                                                   // 1645
  d3_labPrototype.darker = function(k) {                                                                               // 1646
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);                    // 1647
  };                                                                                                                   // 1648
  d3_labPrototype.rgb = function() {                                                                                   // 1649
    return d3_lab_rgb(this.l, this.a, this.b);                                                                         // 1650
  };                                                                                                                   // 1651
  function d3_lab_rgb(l, a, b) {                                                                                       // 1652
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;                                                          // 1653
    x = d3_lab_xyz(x) * d3_lab_X;                                                                                      // 1654
    y = d3_lab_xyz(y) * d3_lab_Y;                                                                                      // 1655
    z = d3_lab_xyz(z) * d3_lab_Z;                                                                                      // 1656
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }                                                                                                                    // 1658
  function d3_lab_hcl(l, a, b) {                                                                                       // 1659
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);   // 1660
  }                                                                                                                    // 1661
  function d3_lab_xyz(x) {                                                                                             // 1662
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;                                                       // 1663
  }                                                                                                                    // 1664
  function d3_xyz_lab(x) {                                                                                             // 1665
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;                                                   // 1666
  }                                                                                                                    // 1667
  function d3_xyz_rgb(r) {                                                                                             // 1668
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));                          // 1669
  }                                                                                                                    // 1670
  d3.rgb = d3_rgb;                                                                                                     // 1671
  function d3_rgb(r, g, b) {                                                                                           // 1672
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }                                                                                                                    // 1674
  function d3_rgbNumber(value) {                                                                                       // 1675
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);                                                     // 1676
  }                                                                                                                    // 1677
  function d3_rgbString(value) {                                                                                       // 1678
    return d3_rgbNumber(value) + "";                                                                                   // 1679
  }                                                                                                                    // 1680
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();                                                             // 1681
  d3_rgbPrototype.brighter = function(k) {                                                                             // 1682
    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1683
    var r = this.r, g = this.g, b = this.b, i = 30;                                                                    // 1684
    if (!r && !g && !b) return new d3_rgb(i, i, i);                                                                    // 1685
    if (r && r < i) r = i;                                                                                             // 1686
    if (g && g < i) g = i;                                                                                             // 1687
    if (b && b < i) b = i;                                                                                             // 1688
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));                               // 1689
  };                                                                                                                   // 1690
  d3_rgbPrototype.darker = function(k) {                                                                               // 1691
    k = Math.pow(.7, arguments.length ? k : 1);                                                                        // 1692
    return new d3_rgb(k * this.r, k * this.g, k * this.b);                                                             // 1693
  };                                                                                                                   // 1694
  d3_rgbPrototype.hsl = function() {                                                                                   // 1695
    return d3_rgb_hsl(this.r, this.g, this.b);                                                                         // 1696
  };                                                                                                                   // 1697
  d3_rgbPrototype.toString = function() {                                                                              // 1698
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);                                         // 1699
  };                                                                                                                   // 1700
  function d3_rgb_hex(v) {                                                                                             // 1701
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);                                 // 1702
  }                                                                                                                    // 1703
  function d3_rgb_parse(format, rgb, hsl) {                                                                            // 1704
    var r = 0, g = 0, b = 0, m1, m2, color;                                                                            // 1705
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());                                                       // 1706
    if (m1) {                                                                                                          // 1707
      m2 = m1[2].split(",");                                                                                           // 1708
      switch (m1[1]) {                                                                                                 // 1709
       case "hsl":                                                                                                     // 1710
        {                                                                                                              // 1711
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);                             // 1712
        }                                                                                                              // 1713
                                                                                                                       // 1714
       case "rgb":                                                                                                     // 1715
        {                                                                                                              // 1716
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));                 // 1717
        }                                                                                                              // 1718
      }                                                                                                                // 1719
    }                                                                                                                  // 1720
    if (color = d3_rgb_names.get(format)) {                                                                            // 1721
      return rgb(color.r, color.g, color.b);                                                                           // 1722
    }                                                                                                                  // 1723
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {                 // 1724
      if (format.length === 4) {                                                                                       // 1725
        r = (color & 3840) >> 4;                                                                                       // 1726
        r = r >> 4 | r;                                                                                                // 1727
        g = color & 240;                                                                                               // 1728
        g = g >> 4 | g;                                                                                                // 1729
        b = color & 15;                                                                                                // 1730
        b = b << 4 | b;                                                                                                // 1731
      } else if (format.length === 7) {                                                                                // 1732
        r = (color & 16711680) >> 16;                                                                                  // 1733
        g = (color & 65280) >> 8;                                                                                      // 1734
        b = color & 255;                                                                                               // 1735
      }                                                                                                                // 1736
    }                                                                                                                  // 1737
    return rgb(r, g, b);                                                                                               // 1738
  }                                                                                                                    // 1739
  function d3_rgb_hsl(r, g, b) {                                                                                       // 1740
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {                                                                                                           // 1742
      s = l < .5 ? d / (max + min) : d / (2 - max - min);                                                              // 1743
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;                                                                                                         // 1745
    } else {                                                                                                           // 1746
      h = NaN;                                                                                                         // 1747
      s = l > 0 && l < 1 ? 0 : h;                                                                                      // 1748
    }                                                                                                                  // 1749
    return new d3_hsl(h, s, l);                                                                                        // 1750
  }                                                                                                                    // 1751
  function d3_rgb_lab(r, g, b) {                                                                                       // 1752
    r = d3_rgb_xyz(r);                                                                                                 // 1753
    g = d3_rgb_xyz(g);                                                                                                 // 1754
    b = d3_rgb_xyz(b);                                                                                                 // 1755
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));                                                         // 1757
  }                                                                                                                    // 1758
  function d3_rgb_xyz(r) {                                                                                             // 1759
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);                                       // 1760
  }                                                                                                                    // 1761
  function d3_rgb_parseNumber(c) {                                                                                     // 1762
    var f = parseFloat(c);                                                                                             // 1763
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;                                                  // 1764
  }                                                                                                                    // 1765
  var d3_rgb_names = d3.map({                                                                                          // 1766
    aliceblue: 15792383,                                                                                               // 1767
    antiquewhite: 16444375,                                                                                            // 1768
    aqua: 65535,                                                                                                       // 1769
    aquamarine: 8388564,                                                                                               // 1770
    azure: 15794175,                                                                                                   // 1771
    beige: 16119260,                                                                                                   // 1772
    bisque: 16770244,                                                                                                  // 1773
    black: 0,                                                                                                          // 1774
    blanchedalmond: 16772045,                                                                                          // 1775
    blue: 255,                                                                                                         // 1776
    blueviolet: 9055202,                                                                                               // 1777
    brown: 10824234,                                                                                                   // 1778
    burlywood: 14596231,                                                                                               // 1779
    cadetblue: 6266528,                                                                                                // 1780
    chartreuse: 8388352,                                                                                               // 1781
    chocolate: 13789470,                                                                                               // 1782
    coral: 16744272,                                                                                                   // 1783
    cornflowerblue: 6591981,                                                                                           // 1784
    cornsilk: 16775388,                                                                                                // 1785
    crimson: 14423100,                                                                                                 // 1786
    cyan: 65535,                                                                                                       // 1787
    darkblue: 139,                                                                                                     // 1788
    darkcyan: 35723,                                                                                                   // 1789
    darkgoldenrod: 12092939,                                                                                           // 1790
    darkgray: 11119017,                                                                                                // 1791
    darkgreen: 25600,                                                                                                  // 1792
    darkgrey: 11119017,                                                                                                // 1793
    darkkhaki: 12433259,                                                                                               // 1794
    darkmagenta: 9109643,                                                                                              // 1795
    darkolivegreen: 5597999,                                                                                           // 1796
    darkorange: 16747520,                                                                                              // 1797
    darkorchid: 10040012,                                                                                              // 1798
    darkred: 9109504,                                                                                                  // 1799
    darksalmon: 15308410,                                                                                              // 1800
    darkseagreen: 9419919,                                                                                             // 1801
    darkslateblue: 4734347,                                                                                            // 1802
    darkslategray: 3100495,                                                                                            // 1803
    darkslategrey: 3100495,                                                                                            // 1804
    darkturquoise: 52945,                                                                                              // 1805
    darkviolet: 9699539,                                                                                               // 1806
    deeppink: 16716947,                                                                                                // 1807
    deepskyblue: 49151,                                                                                                // 1808
    dimgray: 6908265,                                                                                                  // 1809
    dimgrey: 6908265,                                                                                                  // 1810
    dodgerblue: 2003199,                                                                                               // 1811
    firebrick: 11674146,                                                                                               // 1812
    floralwhite: 16775920,                                                                                             // 1813
    forestgreen: 2263842,                                                                                              // 1814
    fuchsia: 16711935,                                                                                                 // 1815
    gainsboro: 14474460,                                                                                               // 1816
    ghostwhite: 16316671,                                                                                              // 1817
    gold: 16766720,                                                                                                    // 1818
    goldenrod: 14329120,                                                                                               // 1819
    gray: 8421504,                                                                                                     // 1820
    green: 32768,                                                                                                      // 1821
    greenyellow: 11403055,                                                                                             // 1822
    grey: 8421504,                                                                                                     // 1823
    honeydew: 15794160,                                                                                                // 1824
    hotpink: 16738740,                                                                                                 // 1825
    indianred: 13458524,                                                                                               // 1826
    indigo: 4915330,                                                                                                   // 1827
    ivory: 16777200,                                                                                                   // 1828
    khaki: 15787660,                                                                                                   // 1829
    lavender: 15132410,                                                                                                // 1830
    lavenderblush: 16773365,                                                                                           // 1831
    lawngreen: 8190976,                                                                                                // 1832
    lemonchiffon: 16775885,                                                                                            // 1833
    lightblue: 11393254,                                                                                               // 1834
    lightcoral: 15761536,                                                                                              // 1835
    lightcyan: 14745599,                                                                                               // 1836
    lightgoldenrodyellow: 16448210,                                                                                    // 1837
    lightgray: 13882323,                                                                                               // 1838
    lightgreen: 9498256,                                                                                               // 1839
    lightgrey: 13882323,                                                                                               // 1840
    lightpink: 16758465,                                                                                               // 1841
    lightsalmon: 16752762,                                                                                             // 1842
    lightseagreen: 2142890,                                                                                            // 1843
    lightskyblue: 8900346,                                                                                             // 1844
    lightslategray: 7833753,                                                                                           // 1845
    lightslategrey: 7833753,                                                                                           // 1846
    lightsteelblue: 11584734,                                                                                          // 1847
    lightyellow: 16777184,                                                                                             // 1848
    lime: 65280,                                                                                                       // 1849
    limegreen: 3329330,                                                                                                // 1850
    linen: 16445670,                                                                                                   // 1851
    magenta: 16711935,                                                                                                 // 1852
    maroon: 8388608,                                                                                                   // 1853
    mediumaquamarine: 6737322,                                                                                         // 1854
    mediumblue: 205,                                                                                                   // 1855
    mediumorchid: 12211667,                                                                                            // 1856
    mediumpurple: 9662683,                                                                                             // 1857
    mediumseagreen: 3978097,                                                                                           // 1858
    mediumslateblue: 8087790,                                                                                          // 1859
    mediumspringgreen: 64154,                                                                                          // 1860
    mediumturquoise: 4772300,                                                                                          // 1861
    mediumvioletred: 13047173,                                                                                         // 1862
    midnightblue: 1644912,                                                                                             // 1863
    mintcream: 16121850,                                                                                               // 1864
    mistyrose: 16770273,                                                                                               // 1865
    moccasin: 16770229,                                                                                                // 1866
    navajowhite: 16768685,                                                                                             // 1867
    navy: 128,                                                                                                         // 1868
    oldlace: 16643558,                                                                                                 // 1869
    olive: 8421376,                                                                                                    // 1870
    olivedrab: 7048739,                                                                                                // 1871
    orange: 16753920,                                                                                                  // 1872
    orangered: 16729344,                                                                                               // 1873
    orchid: 14315734,                                                                                                  // 1874
    palegoldenrod: 15657130,                                                                                           // 1875
    palegreen: 10025880,                                                                                               // 1876
    paleturquoise: 11529966,                                                                                           // 1877
    palevioletred: 14381203,                                                                                           // 1878
    papayawhip: 16773077,                                                                                              // 1879
    peachpuff: 16767673,                                                                                               // 1880
    peru: 13468991,                                                                                                    // 1881
    pink: 16761035,                                                                                                    // 1882
    plum: 14524637,                                                                                                    // 1883
    powderblue: 11591910,                                                                                              // 1884
    purple: 8388736,                                                                                                   // 1885
    rebeccapurple: 6697881,                                                                                            // 1886
    red: 16711680,                                                                                                     // 1887
    rosybrown: 12357519,                                                                                               // 1888
    royalblue: 4286945,                                                                                                // 1889
    saddlebrown: 9127187,                                                                                              // 1890
    salmon: 16416882,                                                                                                  // 1891
    sandybrown: 16032864,                                                                                              // 1892
    seagreen: 3050327,                                                                                                 // 1893
    seashell: 16774638,                                                                                                // 1894
    sienna: 10506797,                                                                                                  // 1895
    silver: 12632256,                                                                                                  // 1896
    skyblue: 8900331,                                                                                                  // 1897
    slateblue: 6970061,                                                                                                // 1898
    slategray: 7372944,                                                                                                // 1899
    slategrey: 7372944,                                                                                                // 1900
    snow: 16775930,                                                                                                    // 1901
    springgreen: 65407,                                                                                                // 1902
    steelblue: 4620980,                                                                                                // 1903
    tan: 13808780,                                                                                                     // 1904
    teal: 32896,                                                                                                       // 1905
    thistle: 14204888,                                                                                                 // 1906
    tomato: 16737095,                                                                                                  // 1907
    turquoise: 4251856,                                                                                                // 1908
    violet: 15631086,                                                                                                  // 1909
    wheat: 16113331,                                                                                                   // 1910
    white: 16777215,                                                                                                   // 1911
    whitesmoke: 16119285,                                                                                              // 1912
    yellow: 16776960,                                                                                                  // 1913
    yellowgreen: 10145074                                                                                              // 1914
  });                                                                                                                  // 1915
  d3_rgb_names.forEach(function(key, value) {                                                                          // 1916
    d3_rgb_names.set(key, d3_rgbNumber(value));                                                                        // 1917
  });                                                                                                                  // 1918
  function d3_functor(v) {                                                                                             // 1919
    return typeof v === "function" ? v : function() {                                                                  // 1920
      return v;                                                                                                        // 1921
    };                                                                                                                 // 1922
  }                                                                                                                    // 1923
  d3.functor = d3_functor;                                                                                             // 1924
  d3.xhr = d3_xhrType(d3_identity);                                                                                    // 1925
  function d3_xhrType(response) {                                                                                      // 1926
    return function(url, mimeType, callback) {                                                                         // 1927
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType,                               // 1928
      mimeType = null;                                                                                                 // 1929
      return d3_xhr(url, mimeType, response, callback);                                                                // 1930
    };                                                                                                                 // 1931
  }                                                                                                                    // 1932
  function d3_xhr(url, mimeType, response, callback) {                                                                 // 1933
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {       // 1936
      request.readyState > 3 && respond();                                                                             // 1937
    };                                                                                                                 // 1938
    function respond() {                                                                                               // 1939
      var status = request.status, result;                                                                             // 1940
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {                  // 1941
        try {                                                                                                          // 1942
          result = response.call(xhr, request);                                                                        // 1943
        } catch (e) {                                                                                                  // 1944
          dispatch.error.call(xhr, e);                                                                                 // 1945
          return;                                                                                                      // 1946
        }                                                                                                              // 1947
        dispatch.load.call(xhr, result);                                                                               // 1948
      } else {                                                                                                         // 1949
        dispatch.error.call(xhr, request);                                                                             // 1950
      }                                                                                                                // 1951
    }                                                                                                                  // 1952
    request.onprogress = function(event) {                                                                             // 1953
      var o = d3.event;                                                                                                // 1954
      d3.event = event;                                                                                                // 1955
      try {                                                                                                            // 1956
        dispatch.progress.call(xhr, request);                                                                          // 1957
      } finally {                                                                                                      // 1958
        d3.event = o;                                                                                                  // 1959
      }                                                                                                                // 1960
    };                                                                                                                 // 1961
    xhr.header = function(name, value) {                                                                               // 1962
      name = (name + "").toLowerCase();                                                                                // 1963
      if (arguments.length < 2) return headers[name];                                                                  // 1964
      if (value == null) delete headers[name]; else headers[name] = value + "";                                        // 1965
      return xhr;                                                                                                      // 1966
    };                                                                                                                 // 1967
    xhr.mimeType = function(value) {                                                                                   // 1968
      if (!arguments.length) return mimeType;                                                                          // 1969
      mimeType = value == null ? null : value + "";                                                                    // 1970
      return xhr;                                                                                                      // 1971
    };                                                                                                                 // 1972
    xhr.responseType = function(value) {                                                                               // 1973
      if (!arguments.length) return responseType;                                                                      // 1974
      responseType = value;                                                                                            // 1975
      return xhr;                                                                                                      // 1976
    };                                                                                                                 // 1977
    xhr.response = function(value) {                                                                                   // 1978
      response = value;                                                                                                // 1979
      return xhr;                                                                                                      // 1980
    };                                                                                                                 // 1981
    [ "get", "post" ].forEach(function(method) {                                                                       // 1982
      xhr[method] = function() {                                                                                       // 1983
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));                                            // 1984
      };                                                                                                               // 1985
    });                                                                                                                // 1986
    xhr.send = function(method, data, callback) {                                                                      // 1987
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;                          // 1988
      request.open(method, url, true);                                                                                 // 1989
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";                           // 1990
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);           // 1991
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);                            // 1992
      if (responseType != null) request.responseType = responseType;                                                   // 1993
      if (callback != null) xhr.on("error", callback).on("load", function(request) {                                   // 1994
        callback(null, request);                                                                                       // 1995
      });                                                                                                              // 1996
      dispatch.beforesend.call(xhr, request);                                                                          // 1997
      request.send(data == null ? null : data);                                                                        // 1998
      return xhr;                                                                                                      // 1999
    };                                                                                                                 // 2000
    xhr.abort = function() {                                                                                           // 2001
      request.abort();                                                                                                 // 2002
      return xhr;                                                                                                      // 2003
    };                                                                                                                 // 2004
    d3.rebind(xhr, dispatch, "on");                                                                                    // 2005
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));                                             // 2006
  }                                                                                                                    // 2007
  function d3_xhr_fixCallback(callback) {                                                                              // 2008
    return callback.length === 1 ? function(error, request) {                                                          // 2009
      callback(error == null ? request : null);                                                                        // 2010
    } : callback;                                                                                                      // 2011
  }                                                                                                                    // 2012
  function d3_xhrHasResponse(request) {                                                                                // 2013
    var type = request.responseType;                                                                                   // 2014
    return type && type !== "text" ? request.response : request.responseText;                                          // 2015
  }                                                                                                                    // 2016
  d3.dsv = function(delimiter, mimeType) {                                                                             // 2017
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);                      // 2018
    function dsv(url, row, callback) {                                                                                 // 2019
      if (arguments.length < 3) callback = row, row = null;                                                            // 2020
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);                          // 2021
      xhr.row = function(_) {                                                                                          // 2022
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;                 // 2023
      };                                                                                                               // 2024
      return xhr;                                                                                                      // 2025
    }                                                                                                                  // 2026
    function response(request) {                                                                                       // 2027
      return dsv.parse(request.responseText);                                                                          // 2028
    }                                                                                                                  // 2029
    function typedResponse(f) {                                                                                        // 2030
      return function(request) {                                                                                       // 2031
        return dsv.parse(request.responseText, f);                                                                     // 2032
      };                                                                                                               // 2033
    }                                                                                                                  // 2034
    dsv.parse = function(text, f) {                                                                                    // 2035
      var o;                                                                                                           // 2036
      return dsv.parseRows(text, function(row, i) {                                                                    // 2037
        if (o) return o(row, i - 1);                                                                                   // 2038
        var a = new Function("d", "return {" + row.map(function(name, i) {                                             // 2039
          return JSON.stringify(name) + ": d[" + i + "]";                                                              // 2040
        }).join(",") + "}");                                                                                           // 2041
        o = f ? function(row, i) {                                                                                     // 2042
          return f(a(row), i);                                                                                         // 2043
        } : a;                                                                                                         // 2044
      });                                                                                                              // 2045
    };                                                                                                                 // 2046
    dsv.parseRows = function(text, f) {                                                                                // 2047
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;                                        // 2048
      function token() {                                                                                               // 2049
        if (I >= N) return EOF;                                                                                        // 2050
        if (eol) return eol = false, EOL;                                                                              // 2051
        var j = I;                                                                                                     // 2052
        if (text.charCodeAt(j) === 34) {                                                                               // 2053
          var i = j;                                                                                                   // 2054
          while (i++ < N) {                                                                                            // 2055
            if (text.charCodeAt(i) === 34) {                                                                           // 2056
              if (text.charCodeAt(i + 1) !== 34) break;                                                                // 2057
              ++i;                                                                                                     // 2058
            }                                                                                                          // 2059
          }                                                                                                            // 2060
          I = i + 2;                                                                                                   // 2061
          var c = text.charCodeAt(i + 1);                                                                              // 2062
          if (c === 13) {                                                                                              // 2063
            eol = true;                                                                                                // 2064
            if (text.charCodeAt(i + 2) === 10) ++I;                                                                    // 2065
          } else if (c === 10) {                                                                                       // 2066
            eol = true;                                                                                                // 2067
          }                                                                                                            // 2068
          return text.slice(j + 1, i).replace(/""/g, '"');                                                             // 2069
        }                                                                                                              // 2070
        while (I < N) {                                                                                                // 2071
          var c = text.charCodeAt(I++), k = 1;                                                                         // 2072
          if (c === 10) eol = true; else if (c === 13) {                                                               // 2073
            eol = true;                                                                                                // 2074
            if (text.charCodeAt(I) === 10) ++I, ++k;                                                                   // 2075
          } else if (c !== delimiterCode) continue;                                                                    // 2076
          return text.slice(j, I - k);                                                                                 // 2077
        }                                                                                                              // 2078
        return text.slice(j);                                                                                          // 2079
      }                                                                                                                // 2080
      while ((t = token()) !== EOF) {                                                                                  // 2081
        var a = [];                                                                                                    // 2082
        while (t !== EOL && t !== EOF) {                                                                               // 2083
          a.push(t);                                                                                                   // 2084
          t = token();                                                                                                 // 2085
        }                                                                                                              // 2086
        if (f && (a = f(a, n++)) == null) continue;                                                                    // 2087
        rows.push(a);                                                                                                  // 2088
      }                                                                                                                // 2089
      return rows;                                                                                                     // 2090
    };                                                                                                                 // 2091
    dsv.format = function(rows) {                                                                                      // 2092
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);                                                         // 2093
      var fieldSet = new d3_Set(), fields = [];                                                                        // 2094
      rows.forEach(function(row) {                                                                                     // 2095
        for (var field in row) {                                                                                       // 2096
          if (!fieldSet.has(field)) {                                                                                  // 2097
            fields.push(fieldSet.add(field));                                                                          // 2098
          }                                                                                                            // 2099
        }                                                                                                              // 2100
      });                                                                                                              // 2101
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {                               // 2102
        return fields.map(function(field) {                                                                            // 2103
          return formatValue(row[field]);                                                                              // 2104
        }).join(delimiter);                                                                                            // 2105
      })).join("\n");                                                                                                  // 2106
    };                                                                                                                 // 2107
    dsv.formatRows = function(rows) {                                                                                  // 2108
      return rows.map(formatRow).join("\n");                                                                           // 2109
    };                                                                                                                 // 2110
    function formatRow(row) {                                                                                          // 2111
      return row.map(formatValue).join(delimiter);                                                                     // 2112
    }                                                                                                                  // 2113
    function formatValue(text) {                                                                                       // 2114
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;                                       // 2115
    }                                                                                                                  // 2116
    return dsv;                                                                                                        // 2117
  };                                                                                                                   // 2118
  d3.csv = d3.dsv(",", "text/csv");                                                                                    // 2119
  d3.tsv = d3.dsv("	", "text/tab-separated-values");                                                                   // 2120
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);                                                                                          // 2122
  };                                                                                                                   // 2123
  d3.timer = function() {                                                                                              // 2124
    d3_timer.apply(this, arguments);                                                                                   // 2125
  };                                                                                                                   // 2126
  function d3_timer(callback, delay, then) {                                                                           // 2127
    var n = arguments.length;                                                                                          // 2128
    if (n < 2) delay = 0;                                                                                              // 2129
    if (n < 3) then = Date.now();                                                                                      // 2130
    var time = then + delay, timer = {                                                                                 // 2131
      c: callback,                                                                                                     // 2132
      t: time,                                                                                                         // 2133
      n: null                                                                                                          // 2134
    };                                                                                                                 // 2135
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;                             // 2136
    d3_timer_queueTail = timer;                                                                                        // 2137
    if (!d3_timer_interval) {                                                                                          // 2138
      d3_timer_timeout = clearTimeout(d3_timer_timeout);                                                               // 2139
      d3_timer_interval = 1;                                                                                           // 2140
      d3_timer_frame(d3_timer_step);                                                                                   // 2141
    }                                                                                                                  // 2142
    return timer;                                                                                                      // 2143
  }                                                                                                                    // 2144
  function d3_timer_step() {                                                                                           // 2145
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;                                                         // 2146
    if (delay > 24) {                                                                                                  // 2147
      if (isFinite(delay)) {                                                                                           // 2148
        clearTimeout(d3_timer_timeout);                                                                                // 2149
        d3_timer_timeout = setTimeout(d3_timer_step, delay);                                                           // 2150
      }                                                                                                                // 2151
      d3_timer_interval = 0;                                                                                           // 2152
    } else {                                                                                                           // 2153
      d3_timer_interval = 1;                                                                                           // 2154
      d3_timer_frame(d3_timer_step);                                                                                   // 2155
    }                                                                                                                  // 2156
  }                                                                                                                    // 2157
  d3.timer.flush = function() {                                                                                        // 2158
    d3_timer_mark();                                                                                                   // 2159
    d3_timer_sweep();                                                                                                  // 2160
  };                                                                                                                   // 2161
  function d3_timer_mark() {                                                                                           // 2162
    var now = Date.now(), timer = d3_timer_queueHead;                                                                  // 2163
    while (timer) {                                                                                                    // 2164
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;                                                    // 2165
      timer = timer.n;                                                                                                 // 2166
    }                                                                                                                  // 2167
    return now;                                                                                                        // 2168
  }                                                                                                                    // 2169
  function d3_timer_sweep() {                                                                                          // 2170
    var t0, t1 = d3_timer_queueHead, time = Infinity;                                                                  // 2171
    while (t1) {                                                                                                       // 2172
      if (t1.c) {                                                                                                      // 2173
        if (t1.t < time) time = t1.t;                                                                                  // 2174
        t1 = (t0 = t1).n;                                                                                              // 2175
      } else {                                                                                                         // 2176
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;                                                             // 2177
      }                                                                                                                // 2178
    }                                                                                                                  // 2179
    d3_timer_queueTail = t0;                                                                                           // 2180
    return time;                                                                                                       // 2181
  }                                                                                                                    // 2182
  function d3_format_precision(x, p) {                                                                                 // 2183
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);                                                           // 2184
  }                                                                                                                    // 2185
  d3.round = function(x, n) {                                                                                          // 2186
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);                                              // 2187
  };                                                                                                                   // 2188
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {                                                                       // 2190
    var i = 0;                                                                                                         // 2191
    if (value = +value) {                                                                                              // 2192
      if (value < 0) value *= -1;                                                                                      // 2193
      if (precision) value = d3.round(value, d3_format_precision(value, precision));                                   // 2194
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);                                                         // 2195
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));                                                    // 2196
    }                                                                                                                  // 2197
    return d3_formatPrefixes[8 + i / 3];                                                                               // 2198
  };                                                                                                                   // 2199
  function d3_formatPrefix(d, i) {                                                                                     // 2200
    var k = Math.pow(10, abs(8 - i) * 3);                                                                              // 2201
    return {                                                                                                           // 2202
      scale: i > 8 ? function(d) {                                                                                     // 2203
        return d / k;                                                                                                  // 2204
      } : function(d) {                                                                                                // 2205
        return d * k;                                                                                                  // 2206
      },                                                                                                               // 2207
      symbol: d                                                                                                        // 2208
    };                                                                                                                 // 2209
  }                                                                                                                    // 2210
  function d3_locale_numberFormat(locale) {                                                                            // 2211
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;                                         // 2213
      while (i > 0 && g > 0) {                                                                                         // 2214
        if (length + g + 1 > width) g = Math.max(1, width - length);                                                   // 2215
        t.push(value.substring(i -= g, i + g));                                                                        // 2216
        if ((length += g + 1) > width) break;                                                                          // 2217
        g = locale_grouping[j = (j + 1) % locale_grouping.length];                                                     // 2218
      }                                                                                                                // 2219
      return t.reverse().join(locale_thousands);                                                                       // 2220
    } : d3_identity;                                                                                                   // 2221
    return function(specifier) {                                                                                       // 2222
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);                                                              // 2224
      if (zfill || fill === "0" && align === "=") {                                                                    // 2225
        zfill = fill = "0";                                                                                            // 2226
        align = "=";                                                                                                   // 2227
      }                                                                                                                // 2228
      switch (type) {                                                                                                  // 2229
       case "n":                                                                                                       // 2230
        comma = true;                                                                                                  // 2231
        type = "g";                                                                                                    // 2232
        break;                                                                                                         // 2233
                                                                                                                       // 2234
       case "%":                                                                                                       // 2235
        scale = 100;                                                                                                   // 2236
        suffix = "%";                                                                                                  // 2237
        type = "f";                                                                                                    // 2238
        break;                                                                                                         // 2239
                                                                                                                       // 2240
       case "p":                                                                                                       // 2241
        scale = 100;                                                                                                   // 2242
        suffix = "%";                                                                                                  // 2243
        type = "r";                                                                                                    // 2244
        break;                                                                                                         // 2245
                                                                                                                       // 2246
       case "b":                                                                                                       // 2247
       case "o":                                                                                                       // 2248
       case "x":                                                                                                       // 2249
       case "X":                                                                                                       // 2250
        if (symbol === "#") prefix = "0" + type.toLowerCase();                                                         // 2251
                                                                                                                       // 2252
       case "c":                                                                                                       // 2253
        exponent = false;                                                                                              // 2254
                                                                                                                       // 2255
       case "d":                                                                                                       // 2256
        integer = true;                                                                                                // 2257
        precision = 0;                                                                                                 // 2258
        break;                                                                                                         // 2259
                                                                                                                       // 2260
       case "s":                                                                                                       // 2261
        scale = -1;                                                                                                    // 2262
        type = "r";                                                                                                    // 2263
        break;                                                                                                         // 2264
      }                                                                                                                // 2265
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];                                    // 2266
      if (type == "r" && !precision) type = "g";                                                                       // 2267
      if (precision != null) {                                                                                         // 2268
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }                                                                                                                // 2270
      type = d3_format_types.get(type) || d3_format_typeDefault;                                                       // 2271
      var zcomma = zfill && comma;                                                                                     // 2272
      return function(value) {                                                                                         // 2273
        var fullSuffix = suffix;                                                                                       // 2274
        if (integer && value % 1) return "";                                                                           // 2275
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;   // 2276
        if (scale < 0) {                                                                                               // 2277
          var unit = d3.formatPrefix(value, precision);                                                                // 2278
          value = unit.scale(value);                                                                                   // 2279
          fullSuffix = unit.symbol + suffix;                                                                           // 2280
        } else {                                                                                                       // 2281
          value *= scale;                                                                                              // 2282
        }                                                                                                              // 2283
        value = type(value, precision);                                                                                // 2284
        var i = value.lastIndexOf("."), before, after;                                                                 // 2285
        if (i < 0) {                                                                                                   // 2286
          var j = exponent ? value.lastIndexOf("e") : -1;                                                              // 2287
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);      // 2288
        } else {                                                                                                       // 2289
          before = value.substring(0, i);                                                                              // 2290
          after = locale_decimal + value.substring(i + 1);                                                             // 2291
        }                                                                                                              // 2292
        if (!zfill && comma) before = formatGroup(before, Infinity);                                                   // 2293
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);          // 2295
        negative += prefix;                                                                                            // 2296
        value = before + after;                                                                                        // 2297
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };                                                                                                               // 2299
    };                                                                                                                 // 2300
  }                                                                                                                    // 2301
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;                         // 2302
  var d3_format_types = d3.map({                                                                                       // 2303
    b: function(x) {                                                                                                   // 2304
      return x.toString(2);                                                                                            // 2305
    },                                                                                                                 // 2306
    c: function(x) {                                                                                                   // 2307
      return String.fromCharCode(x);                                                                                   // 2308
    },                                                                                                                 // 2309
    o: function(x) {                                                                                                   // 2310
      return x.toString(8);                                                                                            // 2311
    },                                                                                                                 // 2312
    x: function(x) {                                                                                                   // 2313
      return x.toString(16);                                                                                           // 2314
    },                                                                                                                 // 2315
    X: function(x) {                                                                                                   // 2316
      return x.toString(16).toUpperCase();                                                                             // 2317
    },                                                                                                                 // 2318
    g: function(x, p) {                                                                                                // 2319
      return x.toPrecision(p);                                                                                         // 2320
    },                                                                                                                 // 2321
    e: function(x, p) {                                                                                                // 2322
      return x.toExponential(p);                                                                                       // 2323
    },                                                                                                                 // 2324
    f: function(x, p) {                                                                                                // 2325
      return x.toFixed(p);                                                                                             // 2326
    },                                                                                                                 // 2327
    r: function(x, p) {                                                                                                // 2328
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }                                                                                                                  // 2330
  });                                                                                                                  // 2331
  function d3_format_typeDefault(x) {                                                                                  // 2332
    return x + "";                                                                                                     // 2333
  }                                                                                                                    // 2334
  var d3_time = d3.time = {}, d3_date = Date;                                                                          // 2335
  function d3_date_utc() {                                                                                             // 2336
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);                          // 2337
  }                                                                                                                    // 2338
  d3_date_utc.prototype = {                                                                                            // 2339
    getDate: function() {                                                                                              // 2340
      return this._.getUTCDate();                                                                                      // 2341
    },                                                                                                                 // 2342
    getDay: function() {                                                                                               // 2343
      return this._.getUTCDay();                                                                                       // 2344
    },                                                                                                                 // 2345
    getFullYear: function() {                                                                                          // 2346
      return this._.getUTCFullYear();                                                                                  // 2347
    },                                                                                                                 // 2348
    getHours: function() {                                                                                             // 2349
      return this._.getUTCHours();                                                                                     // 2350
    },                                                                                                                 // 2351
    getMilliseconds: function() {                                                                                      // 2352
      return this._.getUTCMilliseconds();                                                                              // 2353
    },                                                                                                                 // 2354
    getMinutes: function() {                                                                                           // 2355
      return this._.getUTCMinutes();                                                                                   // 2356
    },                                                                                                                 // 2357
    getMonth: function() {                                                                                             // 2358
      return this._.getUTCMonth();                                                                                     // 2359
    },                                                                                                                 // 2360
    getSeconds: function() {                                                                                           // 2361
      return this._.getUTCSeconds();                                                                                   // 2362
    },                                                                                                                 // 2363
    getTime: function() {                                                                                              // 2364
      return this._.getTime();                                                                                         // 2365
    },                                                                                                                 // 2366
    getTimezoneOffset: function() {                                                                                    // 2367
      return 0;                                                                                                        // 2368
    },                                                                                                                 // 2369
    valueOf: function() {                                                                                              // 2370
      return this._.valueOf();                                                                                         // 2371
    },                                                                                                                 // 2372
    setDate: function() {                                                                                              // 2373
      d3_time_prototype.setUTCDate.apply(this._, arguments);                                                           // 2374
    },                                                                                                                 // 2375
    setDay: function() {                                                                                               // 2376
      d3_time_prototype.setUTCDay.apply(this._, arguments);                                                            // 2377
    },                                                                                                                 // 2378
    setFullYear: function() {                                                                                          // 2379
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);                                                       // 2380
    },                                                                                                                 // 2381
    setHours: function() {                                                                                             // 2382
      d3_time_prototype.setUTCHours.apply(this._, arguments);                                                          // 2383
    },                                                                                                                 // 2384
    setMilliseconds: function() {                                                                                      // 2385
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);                                                   // 2386
    },                                                                                                                 // 2387
    setMinutes: function() {                                                                                           // 2388
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);                                                        // 2389
    },                                                                                                                 // 2390
    setMonth: function() {                                                                                             // 2391
      d3_time_prototype.setUTCMonth.apply(this._, arguments);                                                          // 2392
    },                                                                                                                 // 2393
    setSeconds: function() {                                                                                           // 2394
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);                                                        // 2395
    },                                                                                                                 // 2396
    setTime: function() {                                                                                              // 2397
      d3_time_prototype.setTime.apply(this._, arguments);                                                              // 2398
    }                                                                                                                  // 2399
  };                                                                                                                   // 2400
  var d3_time_prototype = Date.prototype;                                                                              // 2401
  function d3_time_interval(local, step, number) {                                                                     // 2402
    function round(date) {                                                                                             // 2403
      var d0 = local(date), d1 = offset(d0, 1);                                                                        // 2404
      return date - d0 < d1 - date ? d0 : d1;                                                                          // 2405
    }                                                                                                                  // 2406
    function ceil(date) {                                                                                              // 2407
      step(date = local(new d3_date(date - 1)), 1);                                                                    // 2408
      return date;                                                                                                     // 2409
    }                                                                                                                  // 2410
    function offset(date, k) {                                                                                         // 2411
      step(date = new d3_date(+date), k);                                                                              // 2412
      return date;                                                                                                     // 2413
    }                                                                                                                  // 2414
    function range(t0, t1, dt) {                                                                                       // 2415
      var time = ceil(t0), times = [];                                                                                 // 2416
      if (dt > 1) {                                                                                                    // 2417
        while (time < t1) {                                                                                            // 2418
          if (!(number(time) % dt)) times.push(new Date(+time));                                                       // 2419
          step(time, 1);                                                                                               // 2420
        }                                                                                                              // 2421
      } else {                                                                                                         // 2422
        while (time < t1) times.push(new Date(+time)), step(time, 1);                                                  // 2423
      }                                                                                                                // 2424
      return times;                                                                                                    // 2425
    }                                                                                                                  // 2426
    function range_utc(t0, t1, dt) {                                                                                   // 2427
      try {                                                                                                            // 2428
        d3_date = d3_date_utc;                                                                                         // 2429
        var utc = new d3_date_utc();                                                                                   // 2430
        utc._ = t0;                                                                                                    // 2431
        return range(utc, t1, dt);                                                                                     // 2432
      } finally {                                                                                                      // 2433
        d3_date = Date;                                                                                                // 2434
      }                                                                                                                // 2435
    }                                                                                                                  // 2436
    local.floor = local;                                                                                               // 2437
    local.round = round;                                                                                               // 2438
    local.ceil = ceil;                                                                                                 // 2439
    local.offset = offset;                                                                                             // 2440
    local.range = range;                                                                                               // 2441
    var utc = local.utc = d3_time_interval_utc(local);                                                                 // 2442
    utc.floor = utc;                                                                                                   // 2443
    utc.round = d3_time_interval_utc(round);                                                                           // 2444
    utc.ceil = d3_time_interval_utc(ceil);                                                                             // 2445
    utc.offset = d3_time_interval_utc(offset);                                                                         // 2446
    utc.range = range_utc;                                                                                             // 2447
    return local;                                                                                                      // 2448
  }                                                                                                                    // 2449
  function d3_time_interval_utc(method) {                                                                              // 2450
    return function(date, k) {                                                                                         // 2451
      try {                                                                                                            // 2452
        d3_date = d3_date_utc;                                                                                         // 2453
        var utc = new d3_date_utc();                                                                                   // 2454
        utc._ = date;                                                                                                  // 2455
        return method(utc, k)._;                                                                                       // 2456
      } finally {                                                                                                      // 2457
        d3_date = Date;                                                                                                // 2458
      }                                                                                                                // 2459
    };                                                                                                                 // 2460
  }                                                                                                                    // 2461
  d3_time.year = d3_time_interval(function(date) {                                                                     // 2462
    date = d3_time.day(date);                                                                                          // 2463
    date.setMonth(0, 1);                                                                                               // 2464
    return date;                                                                                                       // 2465
  }, function(date, offset) {                                                                                          // 2466
    date.setFullYear(date.getFullYear() + offset);                                                                     // 2467
  }, function(date) {                                                                                                  // 2468
    return date.getFullYear();                                                                                         // 2469
  });                                                                                                                  // 2470
  d3_time.years = d3_time.year.range;                                                                                  // 2471
  d3_time.years.utc = d3_time.year.utc.range;                                                                          // 2472
  d3_time.day = d3_time_interval(function(date) {                                                                      // 2473
    var day = new d3_date(2e3, 0);                                                                                     // 2474
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());                                              // 2475
    return day;                                                                                                        // 2476
  }, function(date, offset) {                                                                                          // 2477
    date.setDate(date.getDate() + offset);                                                                             // 2478
  }, function(date) {                                                                                                  // 2479
    return date.getDate() - 1;                                                                                         // 2480
  });                                                                                                                  // 2481
  d3_time.days = d3_time.day.range;                                                                                    // 2482
  d3_time.days.utc = d3_time.day.utc.range;                                                                            // 2483
  d3_time.dayOfYear = function(date) {                                                                                 // 2484
    var year = d3_time.year(date);                                                                                     // 2485
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);            // 2486
  };                                                                                                                   // 2487
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {          // 2488
    i = 7 - i;                                                                                                         // 2489
    var interval = d3_time[day] = d3_time_interval(function(date) {                                                    // 2490
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);                                    // 2491
      return date;                                                                                                     // 2492
    }, function(date, offset) {                                                                                        // 2493
      date.setDate(date.getDate() + Math.floor(offset) * 7);                                                           // 2494
    }, function(date) {                                                                                                // 2495
      var day = d3_time.year(date).getDay();                                                                           // 2496
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);                                  // 2497
    });                                                                                                                // 2498
    d3_time[day + "s"] = interval.range;                                                                               // 2499
    d3_time[day + "s"].utc = interval.utc.range;                                                                       // 2500
    d3_time[day + "OfYear"] = function(date) {                                                                         // 2501
      var day = d3_time.year(date).getDay();                                                                           // 2502
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);                                                // 2503
    };                                                                                                                 // 2504
  });                                                                                                                  // 2505
  d3_time.week = d3_time.sunday;                                                                                       // 2506
  d3_time.weeks = d3_time.sunday.range;                                                                                // 2507
  d3_time.weeks.utc = d3_time.sunday.utc.range;                                                                        // 2508
  d3_time.weekOfYear = d3_time.sundayOfYear;                                                                           // 2509
  function d3_locale_timeFormat(locale) {                                                                              // 2510
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {                                                                                // 2512
      var n = template.length;                                                                                         // 2513
      function format(date) {                                                                                          // 2514
        var string = [], i = -1, j = 0, c, p, f;                                                                       // 2515
        while (++i < n) {                                                                                              // 2516
          if (template.charCodeAt(i) === 37) {                                                                         // 2517
            string.push(template.slice(j, i));                                                                         // 2518
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);                  // 2519
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);                            // 2520
            string.push(c);                                                                                            // 2521
            j = i + 1;                                                                                                 // 2522
          }                                                                                                            // 2523
        }                                                                                                              // 2524
        string.push(template.slice(j, i));                                                                             // 2525
        return string.join("");                                                                                        // 2526
      }                                                                                                                // 2527
      format.parse = function(string) {                                                                                // 2528
        var d = {                                                                                                      // 2529
          y: 1900,                                                                                                     // 2530
          m: 0,                                                                                                        // 2531
          d: 1,                                                                                                        // 2532
          H: 0,                                                                                                        // 2533
          M: 0,                                                                                                        // 2534
          S: 0,                                                                                                        // 2535
          L: 0,                                                                                                        // 2536
          Z: null                                                                                                      // 2537
        }, i = d3_time_parse(d, template, string, 0);                                                                  // 2538
        if (i != string.length) return null;                                                                           // 2539
        if ("p" in d) d.H = d.H % 12 + d.p * 12;                                                                       // 2540
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();            // 2541
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {                                  // 2542
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;                                                                     // 2543
          date.setFullYear(d.y, 0, 1);                                                                                 // 2544
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);                                                                        // 2546
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);                                               // 2547
        return localZ ? date._ : date;                                                                                 // 2548
      };                                                                                                               // 2549
      format.toString = function() {                                                                                   // 2550
        return template;                                                                                               // 2551
      };                                                                                                               // 2552
      return format;                                                                                                   // 2553
    }                                                                                                                  // 2554
    function d3_time_parse(date, template, string, j) {                                                                // 2555
      var c, p, t, i = 0, n = template.length, m = string.length;                                                      // 2556
      while (i < n) {                                                                                                  // 2557
        if (j >= m) return -1;                                                                                         // 2558
        c = template.charCodeAt(i++);                                                                                  // 2559
        if (c === 37) {                                                                                                // 2560
          t = template.charAt(i++);                                                                                    // 2561
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];                                     // 2562
          if (!p || (j = p(date, string, j)) < 0) return -1;                                                           // 2563
        } else if (c != string.charCodeAt(j++)) {                                                                      // 2564
          return -1;                                                                                                   // 2565
        }                                                                                                              // 2566
      }                                                                                                                // 2567
      return j;                                                                                                        // 2568
    }                                                                                                                  // 2569
    d3_time_format.utc = function(template) {                                                                          // 2570
      var local = d3_time_format(template);                                                                            // 2571
      function format(date) {                                                                                          // 2572
        try {                                                                                                          // 2573
          d3_date = d3_date_utc;                                                                                       // 2574
          var utc = new d3_date();                                                                                     // 2575
          utc._ = date;                                                                                                // 2576
          return local(utc);                                                                                           // 2577
        } finally {                                                                                                    // 2578
          d3_date = Date;                                                                                              // 2579
        }                                                                                                              // 2580
      }                                                                                                                // 2581
      format.parse = function(string) {                                                                                // 2582
        try {                                                                                                          // 2583
          d3_date = d3_date_utc;                                                                                       // 2584
          var date = local.parse(string);                                                                              // 2585
          return date && date._;                                                                                       // 2586
        } finally {                                                                                                    // 2587
          d3_date = Date;                                                                                              // 2588
        }                                                                                                              // 2589
      };                                                                                                               // 2590
      format.toString = local.toString;                                                                                // 2591
      return format;                                                                                                   // 2592
    };                                                                                                                 // 2593
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;                                             // 2594
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {                                                                            // 2596
      d3_time_periodLookup.set(p.toLowerCase(), i);                                                                    // 2597
    });                                                                                                                // 2598
    var d3_time_formats = {                                                                                            // 2599
      a: function(d) {                                                                                                 // 2600
        return locale_shortDays[d.getDay()];                                                                           // 2601
      },                                                                                                               // 2602
      A: function(d) {                                                                                                 // 2603
        return locale_days[d.getDay()];                                                                                // 2604
      },                                                                                                               // 2605
      b: function(d) {                                                                                                 // 2606
        return locale_shortMonths[d.getMonth()];                                                                       // 2607
      },                                                                                                               // 2608
      B: function(d) {                                                                                                 // 2609
        return locale_months[d.getMonth()];                                                                            // 2610
      },                                                                                                               // 2611
      c: d3_time_format(locale_dateTime),                                                                              // 2612
      d: function(d, p) {                                                                                              // 2613
        return d3_time_formatPad(d.getDate(), p, 2);                                                                   // 2614
      },                                                                                                               // 2615
      e: function(d, p) {                                                                                              // 2616
        return d3_time_formatPad(d.getDate(), p, 2);                                                                   // 2617
      },                                                                                                               // 2618
      H: function(d, p) {                                                                                              // 2619
        return d3_time_formatPad(d.getHours(), p, 2);                                                                  // 2620
      },                                                                                                               // 2621
      I: function(d, p) {                                                                                              // 2622
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);                                                       // 2623
      },                                                                                                               // 2624
      j: function(d, p) {                                                                                              // 2625
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);                                                      // 2626
      },                                                                                                               // 2627
      L: function(d, p) {                                                                                              // 2628
        return d3_time_formatPad(d.getMilliseconds(), p, 3);                                                           // 2629
      },                                                                                                               // 2630
      m: function(d, p) {                                                                                              // 2631
        return d3_time_formatPad(d.getMonth() + 1, p, 2);                                                              // 2632
      },                                                                                                               // 2633
      M: function(d, p) {                                                                                              // 2634
        return d3_time_formatPad(d.getMinutes(), p, 2);                                                                // 2635
      },                                                                                                               // 2636
      p: function(d) {                                                                                                 // 2637
        return locale_periods[+(d.getHours() >= 12)];                                                                  // 2638
      },                                                                                                               // 2639
      S: function(d, p) {                                                                                              // 2640
        return d3_time_formatPad(d.getSeconds(), p, 2);                                                                // 2641
      },                                                                                                               // 2642
      U: function(d, p) {                                                                                              // 2643
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);                                                       // 2644
      },                                                                                                               // 2645
      w: function(d) {                                                                                                 // 2646
        return d.getDay();                                                                                             // 2647
      },                                                                                                               // 2648
      W: function(d, p) {                                                                                              // 2649
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);                                                       // 2650
      },                                                                                                               // 2651
      x: d3_time_format(locale_date),                                                                                  // 2652
      X: d3_time_format(locale_time),                                                                                  // 2653
      y: function(d, p) {                                                                                              // 2654
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);                                                         // 2655
      },                                                                                                               // 2656
      Y: function(d, p) {                                                                                              // 2657
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);                                                         // 2658
      },                                                                                                               // 2659
      Z: d3_time_zone,                                                                                                 // 2660
      "%": function() {                                                                                                // 2661
        return "%";                                                                                                    // 2662
      }                                                                                                                // 2663
    };                                                                                                                 // 2664
    var d3_time_parsers = {                                                                                            // 2665
      a: d3_time_parseWeekdayAbbrev,                                                                                   // 2666
      A: d3_time_parseWeekday,                                                                                         // 2667
      b: d3_time_parseMonthAbbrev,                                                                                     // 2668
      B: d3_time_parseMonth,                                                                                           // 2669
      c: d3_time_parseLocaleFull,                                                                                      // 2670
      d: d3_time_parseDay,                                                                                             // 2671
      e: d3_time_parseDay,                                                                                             // 2672
      H: d3_time_parseHour24,                                                                                          // 2673
      I: d3_time_parseHour24,                                                                                          // 2674
      j: d3_time_parseDayOfYear,                                                                                       // 2675
      L: d3_time_parseMilliseconds,                                                                                    // 2676
      m: d3_time_parseMonthNumber,                                                                                     // 2677
      M: d3_time_parseMinutes,                                                                                         // 2678
      p: d3_time_parseAmPm,                                                                                            // 2679
      S: d3_time_parseSeconds,                                                                                         // 2680
      U: d3_time_parseWeekNumberSunday,                                                                                // 2681
      w: d3_time_parseWeekdayNumber,                                                                                   // 2682
      W: d3_time_parseWeekNumberMonday,                                                                                // 2683
      x: d3_time_parseLocaleDate,                                                                                      // 2684
      X: d3_time_parseLocaleTime,                                                                                      // 2685
      y: d3_time_parseYear,                                                                                            // 2686
      Y: d3_time_parseFullYear,                                                                                        // 2687
      Z: d3_time_parseZone,                                                                                            // 2688
      "%": d3_time_parseLiteralPercent                                                                                 // 2689
    };                                                                                                                 // 2690
    function d3_time_parseWeekdayAbbrev(date, string, i) {                                                             // 2691
      d3_time_dayAbbrevRe.lastIndex = 0;                                                                               // 2692
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));                                                               // 2693
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                     // 2694
    }                                                                                                                  // 2695
    function d3_time_parseWeekday(date, string, i) {                                                                   // 2696
      d3_time_dayRe.lastIndex = 0;                                                                                     // 2697
      var n = d3_time_dayRe.exec(string.slice(i));                                                                     // 2698
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                           // 2699
    }                                                                                                                  // 2700
    function d3_time_parseMonthAbbrev(date, string, i) {                                                               // 2701
      d3_time_monthAbbrevRe.lastIndex = 0;                                                                             // 2702
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));                                                             // 2703
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                   // 2704
    }                                                                                                                  // 2705
    function d3_time_parseMonth(date, string, i) {                                                                     // 2706
      d3_time_monthRe.lastIndex = 0;                                                                                   // 2707
      var n = d3_time_monthRe.exec(string.slice(i));                                                                   // 2708
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;                         // 2709
    }                                                                                                                  // 2710
    function d3_time_parseLocaleFull(date, string, i) {                                                                // 2711
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);                                             // 2712
    }                                                                                                                  // 2713
    function d3_time_parseLocaleDate(date, string, i) {                                                                // 2714
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);                                             // 2715
    }                                                                                                                  // 2716
    function d3_time_parseLocaleTime(date, string, i) {                                                                // 2717
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);                                             // 2718
    }                                                                                                                  // 2719
    function d3_time_parseAmPm(date, string, i) {                                                                      // 2720
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());                                         // 2721
      return n == null ? -1 : (date.p = n, i);                                                                         // 2722
    }                                                                                                                  // 2723
    return d3_time_format;                                                                                             // 2724
  }                                                                                                                    // 2725
  var d3_time_formatPads = {                                                                                           // 2726
    "-": "",                                                                                                           // 2727
    _: " ",                                                                                                            // 2728
    "0": "0"                                                                                                           // 2729
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;                                                           // 2730
  function d3_time_formatPad(value, fill, width) {                                                                     // 2731
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;                    // 2732
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);                       // 2733
  }                                                                                                                    // 2734
  function d3_time_formatRe(names) {                                                                                   // 2735
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");                                            // 2736
  }                                                                                                                    // 2737
  function d3_time_formatLookup(names) {                                                                               // 2738
    var map = new d3_Map(), i = -1, n = names.length;                                                                  // 2739
    while (++i < n) map.set(names[i].toLowerCase(), i);                                                                // 2740
    return map;                                                                                                        // 2741
  }                                                                                                                    // 2742
  function d3_time_parseWeekdayNumber(date, string, i) {                                                               // 2743
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2744
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));                                                             // 2745
    return n ? (date.w = +n[0], i + n[0].length) : -1;                                                                 // 2746
  }                                                                                                                    // 2747
  function d3_time_parseWeekNumberSunday(date, string, i) {                                                            // 2748
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2749
    var n = d3_time_numberRe.exec(string.slice(i));                                                                    // 2750
    return n ? (date.U = +n[0], i + n[0].length) : -1;                                                                 // 2751
  }                                                                                                                    // 2752
  function d3_time_parseWeekNumberMonday(date, string, i) {                                                            // 2753
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2754
    var n = d3_time_numberRe.exec(string.slice(i));                                                                    // 2755
    return n ? (date.W = +n[0], i + n[0].length) : -1;                                                                 // 2756
  }                                                                                                                    // 2757
  function d3_time_parseFullYear(date, string, i) {                                                                    // 2758
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2759
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));                                                             // 2760
    return n ? (date.y = +n[0], i + n[0].length) : -1;                                                                 // 2761
  }                                                                                                                    // 2762
  function d3_time_parseYear(date, string, i) {                                                                        // 2763
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2764
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2765
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;                                             // 2766
  }                                                                                                                    // 2767
  function d3_time_parseZone(date, string, i) {                                                                        // 2768
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string,                                    // 2769
    i + 5) : -1;                                                                                                       // 2770
  }                                                                                                                    // 2771
  function d3_time_expandYear(d) {                                                                                     // 2772
    return d + (d > 68 ? 1900 : 2e3);                                                                                  // 2773
  }                                                                                                                    // 2774
  function d3_time_parseMonthNumber(date, string, i) {                                                                 // 2775
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2776
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2777
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;                                                              // 2778
  }                                                                                                                    // 2779
  function d3_time_parseDay(date, string, i) {                                                                         // 2780
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2781
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2782
    return n ? (date.d = +n[0], i + n[0].length) : -1;                                                                 // 2783
  }                                                                                                                    // 2784
  function d3_time_parseDayOfYear(date, string, i) {                                                                   // 2785
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2786
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));                                                             // 2787
    return n ? (date.j = +n[0], i + n[0].length) : -1;                                                                 // 2788
  }                                                                                                                    // 2789
  function d3_time_parseHour24(date, string, i) {                                                                      // 2790
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2791
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2792
    return n ? (date.H = +n[0], i + n[0].length) : -1;                                                                 // 2793
  }                                                                                                                    // 2794
  function d3_time_parseMinutes(date, string, i) {                                                                     // 2795
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2796
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2797
    return n ? (date.M = +n[0], i + n[0].length) : -1;                                                                 // 2798
  }                                                                                                                    // 2799
  function d3_time_parseSeconds(date, string, i) {                                                                     // 2800
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2801
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));                                                             // 2802
    return n ? (date.S = +n[0], i + n[0].length) : -1;                                                                 // 2803
  }                                                                                                                    // 2804
  function d3_time_parseMilliseconds(date, string, i) {                                                                // 2805
    d3_time_numberRe.lastIndex = 0;                                                                                    // 2806
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));                                                             // 2807
    return n ? (date.L = +n[0], i + n[0].length) : -1;                                                                 // 2808
  }                                                                                                                    // 2809
  function d3_time_zone(d) {                                                                                           // 2810
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;                     // 2811
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);                                         // 2812
  }                                                                                                                    // 2813
  function d3_time_parseLiteralPercent(date, string, i) {                                                              // 2814
    d3_time_percentRe.lastIndex = 0;                                                                                   // 2815
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));                                                            // 2816
    return n ? i + n[0].length : -1;                                                                                   // 2817
  }                                                                                                                    // 2818
  function d3_time_formatMulti(formats) {                                                                              // 2819
    var n = formats.length, i = -1;                                                                                    // 2820
    while (++i < n) formats[i][0] = this(formats[i][0]);                                                               // 2821
    return function(date) {                                                                                            // 2822
      var i = 0, f = formats[i];                                                                                       // 2823
      while (!f[1](date)) f = formats[++i];                                                                            // 2824
      return f[0](date);                                                                                               // 2825
    };                                                                                                                 // 2826
  }                                                                                                                    // 2827
  d3.locale = function(locale) {                                                                                       // 2828
    return {                                                                                                           // 2829
      numberFormat: d3_locale_numberFormat(locale),                                                                    // 2830
      timeFormat: d3_locale_timeFormat(locale)                                                                         // 2831
    };                                                                                                                 // 2832
  };                                                                                                                   // 2833
  var d3_locale_enUS = d3.locale({                                                                                     // 2834
    decimal: ".",                                                                                                      // 2835
    thousands: ",",                                                                                                    // 2836
    grouping: [ 3 ],                                                                                                   // 2837
    currency: [ "$", "" ],                                                                                             // 2838
    dateTime: "%a %b %e %X %Y",                                                                                        // 2839
    date: "%m/%d/%Y",                                                                                                  // 2840
    time: "%H:%M:%S",                                                                                                  // 2841
    periods: [ "AM", "PM" ],                                                                                           // 2842
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],                            // 2843
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],                                                    // 2844
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]                // 2846
  });                                                                                                                  // 2847
  d3.format = d3_locale_enUS.numberFormat;                                                                             // 2848
  d3.geo = {};                                                                                                         // 2849
  function d3_adder() {}                                                                                               // 2850
  d3_adder.prototype = {                                                                                               // 2851
    s: 0,                                                                                                              // 2852
    t: 0,                                                                                                              // 2853
    add: function(y) {                                                                                                 // 2854
      d3_adderSum(y, this.t, d3_adderTemp);                                                                            // 2855
      d3_adderSum(d3_adderTemp.s, this.s, this);                                                                       // 2856
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;                                              // 2857
    },                                                                                                                 // 2858
    reset: function() {                                                                                                // 2859
      this.s = this.t = 0;                                                                                             // 2860
    },                                                                                                                 // 2861
    valueOf: function() {                                                                                              // 2862
      return this.s;                                                                                                   // 2863
    }                                                                                                                  // 2864
  };                                                                                                                   // 2865
  var d3_adderTemp = new d3_adder();                                                                                   // 2866
  function d3_adderSum(a, b, o) {                                                                                      // 2867
    var x = o.s = a + b, bv = x - a, av = x - bv;                                                                      // 2868
    o.t = a - av + (b - bv);                                                                                           // 2869
  }                                                                                                                    // 2870
  d3.geo.stream = function(object, listener) {                                                                         // 2871
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {                                               // 2872
      d3_geo_streamObjectType[object.type](object, listener);                                                          // 2873
    } else {                                                                                                           // 2874
      d3_geo_streamGeometry(object, listener);                                                                         // 2875
    }                                                                                                                  // 2876
  };                                                                                                                   // 2877
  function d3_geo_streamGeometry(geometry, listener) {                                                                 // 2878
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {                                         // 2879
      d3_geo_streamGeometryType[geometry.type](geometry, listener);                                                    // 2880
    }                                                                                                                  // 2881
  }                                                                                                                    // 2882
  var d3_geo_streamObjectType = {                                                                                      // 2883
    Feature: function(feature, listener) {                                                                             // 2884
      d3_geo_streamGeometry(feature.geometry, listener);                                                               // 2885
    },                                                                                                                 // 2886
    FeatureCollection: function(object, listener) {                                                                    // 2887
      var features = object.features, i = -1, n = features.length;                                                     // 2888
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);                                           // 2889
    }                                                                                                                  // 2890
  };                                                                                                                   // 2891
  var d3_geo_streamGeometryType = {                                                                                    // 2892
    Sphere: function(object, listener) {                                                                               // 2893
      listener.sphere();                                                                                               // 2894
    },                                                                                                                 // 2895
    Point: function(object, listener) {                                                                                // 2896
      object = object.coordinates;                                                                                     // 2897
      listener.point(object[0], object[1], object[2]);                                                                 // 2898
    },                                                                                                                 // 2899
    MultiPoint: function(object, listener) {                                                                           // 2900
      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2901
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);                        // 2902
    },                                                                                                                 // 2903
    LineString: function(object, listener) {                                                                           // 2904
      d3_geo_streamLine(object.coordinates, listener, 0);                                                              // 2905
    },                                                                                                                 // 2906
    MultiLineString: function(object, listener) {                                                                      // 2907
      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2908
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);                                                  // 2909
    },                                                                                                                 // 2910
    Polygon: function(object, listener) {                                                                              // 2911
      d3_geo_streamPolygon(object.coordinates, listener);                                                              // 2912
    },                                                                                                                 // 2913
    MultiPolygon: function(object, listener) {                                                                         // 2914
      var coordinates = object.coordinates, i = -1, n = coordinates.length;                                            // 2915
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);                                                  // 2916
    },                                                                                                                 // 2917
    GeometryCollection: function(object, listener) {                                                                   // 2918
      var geometries = object.geometries, i = -1, n = geometries.length;                                               // 2919
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);                                                  // 2920
    }                                                                                                                  // 2921
  };                                                                                                                   // 2922
  function d3_geo_streamLine(coordinates, listener, closed) {                                                          // 2923
    var i = -1, n = coordinates.length - closed, coordinate;                                                           // 2924
    listener.lineStart();                                                                                              // 2925
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);          // 2926
    listener.lineEnd();                                                                                                // 2927
  }                                                                                                                    // 2928
  function d3_geo_streamPolygon(coordinates, listener) {                                                               // 2929
    var i = -1, n = coordinates.length;                                                                                // 2930
    listener.polygonStart();                                                                                           // 2931
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);                                                    // 2932
    listener.polygonEnd();                                                                                             // 2933
  }                                                                                                                    // 2934
  d3.geo.area = function(object) {                                                                                     // 2935
    d3_geo_areaSum = 0;                                                                                                // 2936
    d3.geo.stream(object, d3_geo_area);                                                                                // 2937
    return d3_geo_areaSum;                                                                                             // 2938
  };                                                                                                                   // 2939
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();                                                             // 2940
  var d3_geo_area = {                                                                                                  // 2941
    sphere: function() {                                                                                               // 2942
      d3_geo_areaSum += 4 * π;                                                                                         // 2943
    },                                                                                                                 // 2944
    point: d3_noop,                                                                                                    // 2945
    lineStart: d3_noop,                                                                                                // 2946
    lineEnd: d3_noop,                                                                                                  // 2947
    polygonStart: function() {                                                                                         // 2948
      d3_geo_areaRingSum.reset();                                                                                      // 2949
      d3_geo_area.lineStart = d3_geo_areaRingStart;                                                                    // 2950
    },                                                                                                                 // 2951
    polygonEnd: function() {                                                                                           // 2952
      var area = 2 * d3_geo_areaRingSum;                                                                               // 2953
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;                                                                // 2954
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;                                       // 2955
    }                                                                                                                  // 2956
  };                                                                                                                   // 2957
  function d3_geo_areaRingStart() {                                                                                    // 2958
    var λ00, φ00, λ0, cosφ0, sinφ0;                                                                                    // 2959
    d3_geo_area.point = function(λ, φ) {                                                                               // 2960
      d3_geo_area.point = nextPoint;                                                                                   // 2961
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4),                           // 2962
      sinφ0 = Math.sin(φ);                                                                                             // 2963
    };                                                                                                                 // 2964
    function nextPoint(λ, φ) {                                                                                         // 2965
      λ *= d3_radians;                                                                                                 // 2966
      φ = φ * d3_radians / 2 + π / 4;                                                                                  // 2967
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));                                                                        // 2969
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;                                                                              // 2970
    }                                                                                                                  // 2971
    d3_geo_area.lineEnd = function() {                                                                                 // 2972
      nextPoint(λ00, φ00);                                                                                             // 2973
    };                                                                                                                 // 2974
  }                                                                                                                    // 2975
  function d3_geo_cartesian(spherical) {                                                                               // 2976
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);                                                        // 2977
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];                                                    // 2978
  }                                                                                                                    // 2979
  function d3_geo_cartesianDot(a, b) {                                                                                 // 2980
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];                                                                    // 2981
  }                                                                                                                    // 2982
  function d3_geo_cartesianCross(a, b) {                                                                               // 2983
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];                        // 2984
  }                                                                                                                    // 2985
  function d3_geo_cartesianAdd(a, b) {                                                                                 // 2986
    a[0] += b[0];                                                                                                      // 2987
    a[1] += b[1];                                                                                                      // 2988
    a[2] += b[2];                                                                                                      // 2989
  }                                                                                                                    // 2990
  function d3_geo_cartesianScale(vector, k) {                                                                          // 2991
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];                                                            // 2992
  }                                                                                                                    // 2993
  function d3_geo_cartesianNormalize(d) {                                                                              // 2994
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);                                                        // 2995
    d[0] /= l;                                                                                                         // 2996
    d[1] /= l;                                                                                                         // 2997
    d[2] /= l;                                                                                                         // 2998
  }                                                                                                                    // 2999
  function d3_geo_spherical(cartesian) {                                                                               // 3000
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];                                          // 3001
  }                                                                                                                    // 3002
  function d3_geo_sphericalEqual(a, b) {                                                                               // 3003
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;                                                               // 3004
  }                                                                                                                    // 3005
  d3.geo.bounds = function() {                                                                                         // 3006
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;                                                        // 3007
    var bound = {                                                                                                      // 3008
      point: point,                                                                                                    // 3009
      lineStart: lineStart,                                                                                            // 3010
      lineEnd: lineEnd,                                                                                                // 3011
      polygonStart: function() {                                                                                       // 3012
        bound.point = ringPoint;                                                                                       // 3013
        bound.lineStart = ringStart;                                                                                   // 3014
        bound.lineEnd = ringEnd;                                                                                       // 3015
        dλSum = 0;                                                                                                     // 3016
        d3_geo_area.polygonStart();                                                                                    // 3017
      },                                                                                                               // 3018
      polygonEnd: function() {                                                                                         // 3019
        d3_geo_area.polygonEnd();                                                                                      // 3020
        bound.point = point;                                                                                           // 3021
        bound.lineStart = lineStart;                                                                                   // 3022
        bound.lineEnd = lineEnd;                                                                                       // 3023
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;                                                                                  // 3025
      }                                                                                                                // 3026
    };                                                                                                                 // 3027
    function point(λ, φ) {                                                                                             // 3028
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);                                                                         // 3029
      if (φ < φ0) φ0 = φ;                                                                                              // 3030
      if (φ > φ1) φ1 = φ;                                                                                              // 3031
    }                                                                                                                  // 3032
    function linePoint(λ, φ) {                                                                                         // 3033
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);                                                    // 3034
      if (p0) {                                                                                                        // 3035
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);                                                                         // 3037
        inflection = d3_geo_spherical(inflection);                                                                     // 3038
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;       // 3039
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {                                                              // 3040
          var φi = inflection[1] * d3_degrees;                                                                         // 3041
          if (φi > φ1) φ1 = φi;                                                                                        // 3042
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {                          // 3043
          var φi = -inflection[1] * d3_degrees;                                                                        // 3044
          if (φi < φ0) φ0 = φi;                                                                                        // 3045
        } else {                                                                                                       // 3046
          if (φ < φ0) φ0 = φ;                                                                                          // 3047
          if (φ > φ1) φ1 = φ;                                                                                          // 3048
        }                                                                                                              // 3049
        if (antimeridian) {                                                                                            // 3050
          if (λ < λ_) {                                                                                                // 3051
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;                                                                  // 3052
          } else {                                                                                                     // 3053
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;                                                                  // 3054
          }                                                                                                            // 3055
        } else {                                                                                                       // 3056
          if (λ1 >= λ0) {                                                                                              // 3057
            if (λ < λ0) λ0 = λ;                                                                                        // 3058
            if (λ > λ1) λ1 = λ;                                                                                        // 3059
          } else {                                                                                                     // 3060
            if (λ > λ_) {                                                                                              // 3061
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;                                                                // 3062
            } else {                                                                                                   // 3063
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;                                                                // 3064
            }                                                                                                          // 3065
          }                                                                                                            // 3066
        }                                                                                                              // 3067
      } else {                                                                                                         // 3068
        point(λ, φ);                                                                                                   // 3069
      }                                                                                                                // 3070
      p0 = p, λ_ = λ;                                                                                                  // 3071
    }                                                                                                                  // 3072
    function lineStart() {                                                                                             // 3073
      bound.point = linePoint;                                                                                         // 3074
    }                                                                                                                  // 3075
    function lineEnd() {                                                                                               // 3076
      range[0] = λ0, range[1] = λ1;                                                                                    // 3077
      bound.point = point;                                                                                             // 3078
      p0 = null;                                                                                                       // 3079
    }                                                                                                                  // 3080
    function ringPoint(λ, φ) {                                                                                         // 3081
      if (p0) {                                                                                                        // 3082
        var dλ = λ - λ_;                                                                                               // 3083
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;                                                      // 3084
      } else λ__ = λ, φ__ = φ;                                                                                         // 3085
      d3_geo_area.point(λ, φ);                                                                                         // 3086
      linePoint(λ, φ);                                                                                                 // 3087
    }                                                                                                                  // 3088
    function ringStart() {                                                                                             // 3089
      d3_geo_area.lineStart();                                                                                         // 3090
    }                                                                                                                  // 3091
    function ringEnd() {                                                                                               // 3092
      ringPoint(λ__, φ__);                                                                                             // 3093
      d3_geo_area.lineEnd();                                                                                           // 3094
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);                                                                            // 3095
      range[0] = λ0, range[1] = λ1;                                                                                    // 3096
      p0 = null;                                                                                                       // 3097
    }                                                                                                                  // 3098
    function angle(λ0, λ1) {                                                                                           // 3099
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;                                                                           // 3100
    }                                                                                                                  // 3101
    function compareRanges(a, b) {                                                                                     // 3102
      return a[0] - b[0];                                                                                              // 3103
    }                                                                                                                  // 3104
    function withinRange(x, range) {                                                                                   // 3105
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;                     // 3106
    }                                                                                                                  // 3107
    return function(feature) {                                                                                         // 3108
      φ1 = λ1 = -(λ0 = φ0 = Infinity);                                                                                 // 3109
      ranges = [];                                                                                                     // 3110
      d3.geo.stream(feature, bound);                                                                                   // 3111
      var n = ranges.length;                                                                                           // 3112
      if (n) {                                                                                                         // 3113
        ranges.sort(compareRanges);                                                                                    // 3114
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {                                                // 3115
          b = ranges[i];                                                                                               // 3116
          if (withinRange(b[0], a) || withinRange(b[1], a)) {                                                          // 3117
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];                                                    // 3118
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];                                                    // 3119
          } else {                                                                                                     // 3120
            merged.push(a = b);                                                                                        // 3121
          }                                                                                                            // 3122
        }                                                                                                              // 3123
        var best = -Infinity, dλ;                                                                                      // 3124
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {                                 // 3125
          b = merged[i];                                                                                               // 3126
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];                                        // 3127
        }                                                                                                              // 3128
      }                                                                                                                // 3129
      ranges = range = null;                                                                                           // 3130
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];         // 3131
    };                                                                                                                 // 3132
  }();                                                                                                                 // 3133
  d3.geo.centroid = function(object) {                                                                                 // 3134
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);                                                                            // 3136
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;                // 3137
    if (m < ε2) {                                                                                                      // 3138
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;                                             // 3139
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;                  // 3140
      m = x * x + y * y + z * z;                                                                                       // 3141
      if (m < ε2) return [ NaN, NaN ];                                                                                 // 3142
    }                                                                                                                  // 3143
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];                                  // 3144
  };                                                                                                                   // 3145
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {                                                                                              // 3147
    sphere: d3_noop,                                                                                                   // 3148
    point: d3_geo_centroidPoint,                                                                                       // 3149
    lineStart: d3_geo_centroidLineStart,                                                                               // 3150
    lineEnd: d3_geo_centroidLineEnd,                                                                                   // 3151
    polygonStart: function() {                                                                                         // 3152
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;                                                            // 3153
    },                                                                                                                 // 3154
    polygonEnd: function() {                                                                                           // 3155
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;                                                            // 3156
    }                                                                                                                  // 3157
  };                                                                                                                   // 3158
  function d3_geo_centroidPoint(λ, φ) {                                                                                // 3159
    λ *= d3_radians;                                                                                                   // 3160
    var cosφ = Math.cos(φ *= d3_radians);                                                                              // 3161
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));                                      // 3162
  }                                                                                                                    // 3163
  function d3_geo_centroidPointXYZ(x, y, z) {                                                                          // 3164
    ++d3_geo_centroidW0;                                                                                               // 3165
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;                                                  // 3166
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;                                                  // 3167
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;                                                  // 3168
  }                                                                                                                    // 3169
  function d3_geo_centroidLineStart() {                                                                                // 3170
    var x0, y0, z0;                                                                                                    // 3171
    d3_geo_centroid.point = function(λ, φ) {                                                                           // 3172
      λ *= d3_radians;                                                                                                 // 3173
      var cosφ = Math.cos(φ *= d3_radians);                                                                            // 3174
      x0 = cosφ * Math.cos(λ);                                                                                         // 3175
      y0 = cosφ * Math.sin(λ);                                                                                         // 3176
      z0 = Math.sin(φ);                                                                                                // 3177
      d3_geo_centroid.point = nextPoint;                                                                               // 3178
      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3179
    };                                                                                                                 // 3180
    function nextPoint(λ, φ) {                                                                                         // 3181
      λ *= d3_radians;                                                                                                 // 3182
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;                                                                                          // 3184
      d3_geo_centroidX1 += w * (x0 + (x0 = x));                                                                        // 3185
      d3_geo_centroidY1 += w * (y0 + (y0 = y));                                                                        // 3186
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));                                                                        // 3187
      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3188
    }                                                                                                                  // 3189
  }                                                                                                                    // 3190
  function d3_geo_centroidLineEnd() {                                                                                  // 3191
    d3_geo_centroid.point = d3_geo_centroidPoint;                                                                      // 3192
  }                                                                                                                    // 3193
  function d3_geo_centroidRingStart() {                                                                                // 3194
    var λ00, φ00, x0, y0, z0;                                                                                          // 3195
    d3_geo_centroid.point = function(λ, φ) {                                                                           // 3196
      λ00 = λ, φ00 = φ;                                                                                                // 3197
      d3_geo_centroid.point = nextPoint;                                                                               // 3198
      λ *= d3_radians;                                                                                                 // 3199
      var cosφ = Math.cos(φ *= d3_radians);                                                                            // 3200
      x0 = cosφ * Math.cos(λ);                                                                                         // 3201
      y0 = cosφ * Math.sin(λ);                                                                                         // 3202
      z0 = Math.sin(φ);                                                                                                // 3203
      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3204
    };                                                                                                                 // 3205
    d3_geo_centroid.lineEnd = function() {                                                                             // 3206
      nextPoint(λ00, φ00);                                                                                             // 3207
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;                                                                // 3208
      d3_geo_centroid.point = d3_geo_centroidPoint;                                                                    // 3209
    };                                                                                                                 // 3210
    function nextPoint(λ, φ) {                                                                                         // 3211
      λ *= d3_radians;                                                                                                 // 3212
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;                                                                                     // 3214
      d3_geo_centroidY2 += v * cy;                                                                                     // 3215
      d3_geo_centroidZ2 += v * cz;                                                                                     // 3216
      d3_geo_centroidW1 += w;                                                                                          // 3217
      d3_geo_centroidX1 += w * (x0 + (x0 = x));                                                                        // 3218
      d3_geo_centroidY1 += w * (y0 + (y0 = y));                                                                        // 3219
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));                                                                        // 3220
      d3_geo_centroidPointXYZ(x0, y0, z0);                                                                             // 3221
    }                                                                                                                  // 3222
  }                                                                                                                    // 3223
  function d3_geo_compose(a, b) {                                                                                      // 3224
    function compose(x, y) {                                                                                           // 3225
      return x = a(x, y), b(x[0], x[1]);                                                                               // 3226
    }                                                                                                                  // 3227
    if (a.invert && b.invert) compose.invert = function(x, y) {                                                        // 3228
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);                                                            // 3229
    };                                                                                                                 // 3230
    return compose;                                                                                                    // 3231
  }                                                                                                                    // 3232
  function d3_true() {                                                                                                 // 3233
    return true;                                                                                                       // 3234
  }                                                                                                                    // 3235
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {                             // 3236
    var subject = [], clip = [];                                                                                       // 3237
    segments.forEach(function(segment) {                                                                               // 3238
      if ((n = segment.length - 1) <= 0) return;                                                                       // 3239
      var n, p0 = segment[0], p1 = segment[n];                                                                         // 3240
      if (d3_geo_sphericalEqual(p0, p1)) {                                                                             // 3241
        listener.lineStart();                                                                                          // 3242
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);                                       // 3243
        listener.lineEnd();                                                                                            // 3244
        return;                                                                                                        // 3245
      }                                                                                                                // 3246
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;                                                                                                         // 3248
      subject.push(a);                                                                                                 // 3249
      clip.push(b);                                                                                                    // 3250
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);                                                // 3251
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);                                                       // 3252
      a.o = b;                                                                                                         // 3253
      subject.push(a);                                                                                                 // 3254
      clip.push(b);                                                                                                    // 3255
    });                                                                                                                // 3256
    clip.sort(compare);                                                                                                // 3257
    d3_geo_clipPolygonLinkCircular(subject);                                                                           // 3258
    d3_geo_clipPolygonLinkCircular(clip);                                                                              // 3259
    if (!subject.length) return;                                                                                       // 3260
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {                                            // 3261
      clip[i].e = entry = !entry;                                                                                      // 3262
    }                                                                                                                  // 3263
    var start = subject[0], points, point;                                                                             // 3264
    while (1) {                                                                                                        // 3265
      var current = start, isSubject = true;                                                                           // 3266
      while (current.v) if ((current = current.n) === start) return;                                                   // 3267
      points = current.z;                                                                                              // 3268
      listener.lineStart();                                                                                            // 3269
      do {                                                                                                             // 3270
        current.v = current.o.v = true;                                                                                // 3271
        if (current.e) {                                                                                               // 3272
          if (isSubject) {                                                                                             // 3273
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);           // 3274
          } else {                                                                                                     // 3275
            interpolate(current.x, current.n.x, 1, listener);                                                          // 3276
          }                                                                                                            // 3277
          current = current.n;                                                                                         // 3278
        } else {                                                                                                       // 3279
          if (isSubject) {                                                                                             // 3280
            points = current.p.z;                                                                                      // 3281
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);             // 3282
          } else {                                                                                                     // 3283
            interpolate(current.x, current.p.x, -1, listener);                                                         // 3284
          }                                                                                                            // 3285
          current = current.p;                                                                                         // 3286
        }                                                                                                              // 3287
        current = current.o;                                                                                           // 3288
        points = current.z;                                                                                            // 3289
        isSubject = !isSubject;                                                                                        // 3290
      } while (!current.v);                                                                                            // 3291
      listener.lineEnd();                                                                                              // 3292
    }                                                                                                                  // 3293
  }                                                                                                                    // 3294
  function d3_geo_clipPolygonLinkCircular(array) {                                                                     // 3295
    if (!(n = array.length)) return;                                                                                   // 3296
    var n, i = 0, a = array[0], b;                                                                                     // 3297
    while (++i < n) {                                                                                                  // 3298
      a.n = b = array[i];                                                                                              // 3299
      b.p = a;                                                                                                         // 3300
      a = b;                                                                                                           // 3301
    }                                                                                                                  // 3302
    a.n = b = array[0];                                                                                                // 3303
    b.p = a;                                                                                                           // 3304
  }                                                                                                                    // 3305
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {                                               // 3306
    this.x = point;                                                                                                    // 3307
    this.z = points;                                                                                                   // 3308
    this.o = other;                                                                                                    // 3309
    this.e = entry;                                                                                                    // 3310
    this.v = false;                                                                                                    // 3311
    this.n = this.p = null;                                                                                            // 3312
  }                                                                                                                    // 3313
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {                                               // 3314
    return function(rotate, listener) {                                                                                // 3315
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);                     // 3316
      var clip = {                                                                                                     // 3317
        point: point,                                                                                                  // 3318
        lineStart: lineStart,                                                                                          // 3319
        lineEnd: lineEnd,                                                                                              // 3320
        polygonStart: function() {                                                                                     // 3321
          clip.point = pointRing;                                                                                      // 3322
          clip.lineStart = ringStart;                                                                                  // 3323
          clip.lineEnd = ringEnd;                                                                                      // 3324
          segments = [];                                                                                               // 3325
          polygon = [];                                                                                                // 3326
        },                                                                                                             // 3327
        polygonEnd: function() {                                                                                       // 3328
          clip.point = point;                                                                                          // 3329
          clip.lineStart = lineStart;                                                                                  // 3330
          clip.lineEnd = lineEnd;                                                                                      // 3331
          segments = d3.merge(segments);                                                                               // 3332
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);                                      // 3333
          if (segments.length) {                                                                                       // 3334
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;                                       // 3335
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);                     // 3336
          } else if (clipStartInside) {                                                                                // 3337
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;                                       // 3338
            listener.lineStart();                                                                                      // 3339
            interpolate(null, null, 1, listener);                                                                      // 3340
            listener.lineEnd();                                                                                        // 3341
          }                                                                                                            // 3342
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;                                           // 3343
          segments = polygon = null;                                                                                   // 3344
        },                                                                                                             // 3345
        sphere: function() {                                                                                           // 3346
          listener.polygonStart();                                                                                     // 3347
          listener.lineStart();                                                                                        // 3348
          interpolate(null, null, 1, listener);                                                                        // 3349
          listener.lineEnd();                                                                                          // 3350
          listener.polygonEnd();                                                                                       // 3351
        }                                                                                                              // 3352
      };                                                                                                               // 3353
      function point(λ, φ) {                                                                                           // 3354
        var point = rotate(λ, φ);                                                                                      // 3355
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);                                            // 3356
      }                                                                                                                // 3357
      function pointLine(λ, φ) {                                                                                       // 3358
        var point = rotate(λ, φ);                                                                                      // 3359
        line.point(point[0], point[1]);                                                                                // 3360
      }                                                                                                                // 3361
      function lineStart() {                                                                                           // 3362
        clip.point = pointLine;                                                                                        // 3363
        line.lineStart();                                                                                              // 3364
      }                                                                                                                // 3365
      function lineEnd() {                                                                                             // 3366
        clip.point = point;                                                                                            // 3367
        line.lineEnd();                                                                                                // 3368
      }                                                                                                                // 3369
      var segments;                                                                                                    // 3370
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {                                                                                       // 3372
        ring.push([ λ, φ ]);                                                                                           // 3373
        var point = rotate(λ, φ);                                                                                      // 3374
        ringListener.point(point[0], point[1]);                                                                        // 3375
      }                                                                                                                // 3376
      function ringStart() {                                                                                           // 3377
        ringListener.lineStart();                                                                                      // 3378
        ring = [];                                                                                                     // 3379
      }                                                                                                                // 3380
      function ringEnd() {                                                                                             // 3381
        pointRing(ring[0][0], ring[0][1]);                                                                             // 3382
        ringListener.lineEnd();                                                                                        // 3383
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;            // 3384
        ring.pop();                                                                                                    // 3385
        polygon.push(ring);                                                                                            // 3386
        ring = null;                                                                                                   // 3387
        if (!n) return;                                                                                                // 3388
        if (clean & 1) {                                                                                               // 3389
          segment = ringSegments[0];                                                                                   // 3390
          var n = segment.length - 1, i = -1, point;                                                                   // 3391
          if (n > 0) {                                                                                                 // 3392
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;                                       // 3393
            listener.lineStart();                                                                                      // 3394
            while (++i < n) listener.point((point = segment[i])[0], point[1]);                                         // 3395
            listener.lineEnd();                                                                                        // 3396
          }                                                                                                            // 3397
          return;                                                                                                      // 3398
        }                                                                                                              // 3399
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));                    // 3400
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));                                                 // 3401
      }                                                                                                                // 3402
      return clip;                                                                                                     // 3403
    };                                                                                                                 // 3404
  }                                                                                                                    // 3405
  function d3_geo_clipSegmentLength1(segment) {                                                                        // 3406
    return segment.length > 1;                                                                                         // 3407
  }                                                                                                                    // 3408
  function d3_geo_clipBufferListener() {                                                                               // 3409
    var lines = [], line;                                                                                              // 3410
    return {                                                                                                           // 3411
      lineStart: function() {                                                                                          // 3412
        lines.push(line = []);                                                                                         // 3413
      },                                                                                                               // 3414
      point: function(λ, φ) {                                                                                          // 3415
        line.push([ λ, φ ]);                                                                                           // 3416
      },                                                                                                               // 3417
      lineEnd: d3_noop,                                                                                                // 3418
      buffer: function() {                                                                                             // 3419
        var buffer = lines;                                                                                            // 3420
        lines = [];                                                                                                    // 3421
        line = null;                                                                                                   // 3422
        return buffer;                                                                                                 // 3423
      },                                                                                                               // 3424
      rejoin: function() {                                                                                             // 3425
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));                                           // 3426
      }                                                                                                                // 3427
    };                                                                                                                 // 3428
  }                                                                                                                    // 3429
  function d3_geo_clipSort(a, b) {                                                                                     // 3430
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }                                                                                                                    // 3432
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {                                                                     // 3434
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;                                                                          // 3435
    return {                                                                                                           // 3436
      lineStart: function() {                                                                                          // 3437
        listener.lineStart();                                                                                          // 3438
        clean = 1;                                                                                                     // 3439
      },                                                                                                               // 3440
      point: function(λ1, φ1) {                                                                                        // 3441
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);                                                                  // 3442
        if (abs(dλ - π) < ε) {                                                                                         // 3443
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);                                                 // 3444
          listener.point(sλ0, φ0);                                                                                     // 3445
          listener.lineEnd();                                                                                          // 3446
          listener.lineStart();                                                                                        // 3447
          listener.point(sλ1, φ0);                                                                                     // 3448
          listener.point(λ1, φ0);                                                                                      // 3449
          clean = 0;                                                                                                   // 3450
        } else if (sλ0 !== sλ1 && dλ >= π) {                                                                           // 3451
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;                                                                        // 3452
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;                                                                        // 3453
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);                                                       // 3454
          listener.point(sλ0, φ0);                                                                                     // 3455
          listener.lineEnd();                                                                                          // 3456
          listener.lineStart();                                                                                        // 3457
          listener.point(sλ1, φ0);                                                                                     // 3458
          clean = 0;                                                                                                   // 3459
        }                                                                                                              // 3460
        listener.point(λ0 = λ1, φ0 = φ1);                                                                              // 3461
        sλ0 = sλ1;                                                                                                     // 3462
      },                                                                                                               // 3463
      lineEnd: function() {                                                                                            // 3464
        listener.lineEnd();                                                                                            // 3465
        λ0 = φ0 = NaN;                                                                                                 // 3466
      },                                                                                                               // 3467
      clean: function() {                                                                                              // 3468
        return 2 - clean;                                                                                              // 3469
      }                                                                                                                // 3470
    };                                                                                                                 // 3471
  }                                                                                                                    // 3472
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {                                                          // 3473
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);                                                                    // 3474
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }                                                                                                                    // 3476
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {                                         // 3477
    var φ;                                                                                                             // 3478
    if (from == null) {                                                                                                // 3479
      φ = direction * halfπ;                                                                                           // 3480
      listener.point(-π, φ);                                                                                           // 3481
      listener.point(0, φ);                                                                                            // 3482
      listener.point(π, φ);                                                                                            // 3483
      listener.point(π, 0);                                                                                            // 3484
      listener.point(π, -φ);                                                                                           // 3485
      listener.point(0, -φ);                                                                                           // 3486
      listener.point(-π, -φ);                                                                                          // 3487
      listener.point(-π, 0);                                                                                           // 3488
      listener.point(-π, φ);                                                                                           // 3489
    } else if (abs(from[0] - to[0]) > ε) {                                                                             // 3490
      var s = from[0] < to[0] ? π : -π;                                                                                // 3491
      φ = direction * s / 2;                                                                                           // 3492
      listener.point(-s, φ);                                                                                           // 3493
      listener.point(0, φ);                                                                                            // 3494
      listener.point(s, φ);                                                                                            // 3495
    } else {                                                                                                           // 3496
      listener.point(to[0], to[1]);                                                                                    // 3497
    }                                                                                                                  // 3498
  }                                                                                                                    // 3499
  function d3_geo_pointInPolygon(point, polygon) {                                                                     // 3500
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();                                                                                        // 3502
    for (var i = 0, n = polygon.length; i < n; ++i) {                                                                  // 3503
      var ring = polygon[i], m = ring.length;                                                                          // 3504
      if (!m) continue;                                                                                                // 3505
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {                                                                                                   // 3507
        if (j === m) j = 0;                                                                                            // 3508
        point = ring[j];                                                                                               // 3509
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));                 // 3511
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;                                                                // 3512
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {                                                           // 3513
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));                          // 3514
          d3_geo_cartesianNormalize(arc);                                                                              // 3515
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);                                               // 3516
          d3_geo_cartesianNormalize(intersection);                                                                     // 3517
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);                                     // 3518
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {                                            // 3519
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;                                                                // 3520
          }                                                                                                            // 3521
        }                                                                                                              // 3522
        if (!j++) break;                                                                                               // 3523
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;                                                            // 3524
      }                                                                                                                // 3525
    }                                                                                                                  // 3526
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;                                // 3527
  }                                                                                                                    // 3528
  function d3_geo_clipCircle(radius) {                                                                                 // 3529
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);             // 3531
    function visible(λ, φ) {                                                                                           // 3532
      return Math.cos(λ) * Math.cos(φ) > cr;                                                                           // 3533
    }                                                                                                                  // 3534
    function clipLine(listener) {                                                                                      // 3535
      var point0, c0, v0, v00, clean;                                                                                  // 3536
      return {                                                                                                         // 3537
        lineStart: function() {                                                                                        // 3538
          v00 = v0 = false;                                                                                            // 3539
          clean = 1;                                                                                                   // 3540
        },                                                                                                             // 3541
        point: function(λ, φ) {                                                                                        // 3542
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();                                                         // 3544
          if (v !== v0) {                                                                                              // 3545
            point2 = intersect(point0, point1);                                                                        // 3546
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {                      // 3547
              point1[0] += ε;                                                                                          // 3548
              point1[1] += ε;                                                                                          // 3549
              v = visible(point1[0], point1[1]);                                                                       // 3550
            }                                                                                                          // 3551
          }                                                                                                            // 3552
          if (v !== v0) {                                                                                              // 3553
            clean = 0;                                                                                                 // 3554
            if (v) {                                                                                                   // 3555
              listener.lineStart();                                                                                    // 3556
              point2 = intersect(point1, point0);                                                                      // 3557
              listener.point(point2[0], point2[1]);                                                                    // 3558
            } else {                                                                                                   // 3559
              point2 = intersect(point0, point1);                                                                      // 3560
              listener.point(point2[0], point2[1]);                                                                    // 3561
              listener.lineEnd();                                                                                      // 3562
            }                                                                                                          // 3563
            point0 = point2;                                                                                           // 3564
          } else if (notHemisphere && point0 && smallRadius ^ v) {                                                     // 3565
            var t;                                                                                                     // 3566
            if (!(c & c0) && (t = intersect(point1, point0, true))) {                                                  // 3567
              clean = 0;                                                                                               // 3568
              if (smallRadius) {                                                                                       // 3569
                listener.lineStart();                                                                                  // 3570
                listener.point(t[0][0], t[0][1]);                                                                      // 3571
                listener.point(t[1][0], t[1][1]);                                                                      // 3572
                listener.lineEnd();                                                                                    // 3573
              } else {                                                                                                 // 3574
                listener.point(t[1][0], t[1][1]);                                                                      // 3575
                listener.lineEnd();                                                                                    // 3576
                listener.lineStart();                                                                                  // 3577
                listener.point(t[0][0], t[0][1]);                                                                      // 3578
              }                                                                                                        // 3579
            }                                                                                                          // 3580
          }                                                                                                            // 3581
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {                                              // 3582
            listener.point(point1[0], point1[1]);                                                                      // 3583
          }                                                                                                            // 3584
          point0 = point1, v0 = v, c0 = c;                                                                             // 3585
        },                                                                                                             // 3586
        lineEnd: function() {                                                                                          // 3587
          if (v0) listener.lineEnd();                                                                                  // 3588
          point0 = null;                                                                                               // 3589
        },                                                                                                             // 3590
        clean: function() {                                                                                            // 3591
          return clean | (v00 && v0) << 1;                                                                             // 3592
        }                                                                                                              // 3593
      };                                                                                                               // 3594
    }                                                                                                                  // 3595
    function intersect(a, b, two) {                                                                                    // 3596
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);                                                          // 3597
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;                                                                              // 3599
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);                                                                                       // 3601
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;                                                                                              // 3603
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);                                              // 3604
      d3_geo_cartesianAdd(q, A);                                                                                       // 3605
      q = d3_geo_spherical(q);                                                                                         // 3606
      if (!two) return q;                                                                                              // 3607
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;                                                               // 3608
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;                                                                            // 3609
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;                                           // 3610
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;                                                                  // 3611
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);                                                              // 3613
        d3_geo_cartesianAdd(q1, A);                                                                                    // 3614
        return [ q, d3_geo_spherical(q1) ];                                                                            // 3615
      }                                                                                                                // 3616
    }                                                                                                                  // 3617
    function code(λ, φ) {                                                                                              // 3618
      var r = smallRadius ? radius : π - radius, code = 0;                                                             // 3619
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;                                                                // 3620
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;                                                                // 3621
      return code;                                                                                                     // 3622
    }                                                                                                                  // 3623
  }                                                                                                                    // 3624
  function d3_geom_clipLine(x0, y0, x1, y1) {                                                                          // 3625
    return function(line) {                                                                                            // 3626
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;                                                                                                     // 3628
      if (!dx && r > 0) return;                                                                                        // 3629
      r /= dx;                                                                                                         // 3630
      if (dx < 0) {                                                                                                    // 3631
        if (r < t0) return;                                                                                            // 3632
        if (r < t1) t1 = r;                                                                                            // 3633
      } else if (dx > 0) {                                                                                             // 3634
        if (r > t1) return;                                                                                            // 3635
        if (r > t0) t0 = r;                                                                                            // 3636
      }                                                                                                                // 3637
      r = x1 - ax;                                                                                                     // 3638
      if (!dx && r < 0) return;                                                                                        // 3639
      r /= dx;                                                                                                         // 3640
      if (dx < 0) {                                                                                                    // 3641
        if (r > t1) return;                                                                                            // 3642
        if (r > t0) t0 = r;                                                                                            // 3643
      } else if (dx > 0) {                                                                                             // 3644
        if (r < t0) return;                                                                                            // 3645
        if (r < t1) t1 = r;                                                                                            // 3646
      }                                                                                                                // 3647
      r = y0 - ay;                                                                                                     // 3648
      if (!dy && r > 0) return;                                                                                        // 3649
      r /= dy;                                                                                                         // 3650
      if (dy < 0) {                                                                                                    // 3651
        if (r < t0) return;                                                                                            // 3652
        if (r < t1) t1 = r;                                                                                            // 3653
      } else if (dy > 0) {                                                                                             // 3654
        if (r > t1) return;                                                                                            // 3655
        if (r > t0) t0 = r;                                                                                            // 3656
      }                                                                                                                // 3657
      r = y1 - ay;                                                                                                     // 3658
      if (!dy && r < 0) return;                                                                                        // 3659
      r /= dy;                                                                                                         // 3660
      if (dy < 0) {                                                                                                    // 3661
        if (r > t1) return;                                                                                            // 3662
        if (r > t0) t0 = r;                                                                                            // 3663
      } else if (dy > 0) {                                                                                             // 3664
        if (r < t0) return;                                                                                            // 3665
        if (r < t1) t1 = r;                                                                                            // 3666
      }                                                                                                                // 3667
      if (t0 > 0) line.a = {                                                                                           // 3668
        x: ax + t0 * dx,                                                                                               // 3669
        y: ay + t0 * dy                                                                                                // 3670
      };                                                                                                               // 3671
      if (t1 < 1) line.b = {                                                                                           // 3672
        x: ax + t1 * dx,                                                                                               // 3673
        y: ay + t1 * dy                                                                                                // 3674
      };                                                                                                               // 3675
      return line;                                                                                                     // 3676
    };                                                                                                                 // 3677
  }                                                                                                                    // 3678
  var d3_geo_clipExtentMAX = 1e9;                                                                                      // 3679
  d3.geo.clipExtent = function() {                                                                                     // 3680
    var x0, y0, x1, y1, stream, clip, clipExtent = {                                                                   // 3681
      stream: function(output) {                                                                                       // 3682
        if (stream) stream.valid = false;                                                                              // 3683
        stream = clip(output);                                                                                         // 3684
        stream.valid = true;                                                                                           // 3685
        return stream;                                                                                                 // 3686
      },                                                                                                               // 3687
      extent: function(_) {                                                                                            // 3688
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];                                                      // 3689
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);                          // 3690
        if (stream) stream.valid = false, stream = null;                                                               // 3691
        return clipExtent;                                                                                             // 3692
      }                                                                                                                // 3693
    };                                                                                                                 // 3694
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);                                                              // 3695
  };                                                                                                                   // 3696
  function d3_geo_clipExtent(x0, y0, x1, y1) {                                                                         // 3697
    return function(listener) {                                                                                        // 3698
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {                                                                                                     // 3700
        point: point,                                                                                                  // 3701
        lineStart: lineStart,                                                                                          // 3702
        lineEnd: lineEnd,                                                                                              // 3703
        polygonStart: function() {                                                                                     // 3704
          listener = bufferListener;                                                                                   // 3705
          segments = [];                                                                                               // 3706
          polygon = [];                                                                                                // 3707
          clean = true;                                                                                                // 3708
        },                                                                                                             // 3709
        polygonEnd: function() {                                                                                       // 3710
          listener = listener_;                                                                                        // 3711
          segments = d3.merge(segments);                                                                               // 3712
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {                                                                                     // 3714
            listener.polygonStart();                                                                                   // 3715
            if (inside) {                                                                                              // 3716
              listener.lineStart();                                                                                    // 3717
              interpolate(null, null, 1, listener);                                                                    // 3718
              listener.lineEnd();                                                                                      // 3719
            }                                                                                                          // 3720
            if (visible) {                                                                                             // 3721
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);                           // 3722
            }                                                                                                          // 3723
            listener.polygonEnd();                                                                                     // 3724
          }                                                                                                            // 3725
          segments = polygon = ring = null;                                                                            // 3726
        }                                                                                                              // 3727
      };                                                                                                               // 3728
      function insidePolygon(p) {                                                                                      // 3729
        var wn = 0, n = polygon.length, y = p[1];                                                                      // 3730
        for (var i = 0; i < n; ++i) {                                                                                  // 3731
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {                                     // 3732
            b = v[j];                                                                                                  // 3733
            if (a[1] <= y) {                                                                                           // 3734
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;                                                           // 3735
            } else {                                                                                                   // 3736
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;                                                          // 3737
            }                                                                                                          // 3738
            a = b;                                                                                                     // 3739
          }                                                                                                            // 3740
        }                                                                                                              // 3741
        return wn !== 0;                                                                                               // 3742
      }                                                                                                                // 3743
      function interpolate(from, to, direction, listener) {                                                            // 3744
        var a = 0, a1 = 0;                                                                                             // 3745
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {                                                                                                         // 3747
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);                                             // 3748
          } while ((a = (a + direction + 4) % 4) !== a1);                                                              // 3749
        } else {                                                                                                       // 3750
          listener.point(to[0], to[1]);                                                                                // 3751
        }                                                                                                              // 3752
      }                                                                                                                // 3753
      function pointVisible(x, y) {                                                                                    // 3754
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;                                                               // 3755
      }                                                                                                                // 3756
      function point(x, y) {                                                                                           // 3757
        if (pointVisible(x, y)) listener.point(x, y);                                                                  // 3758
      }                                                                                                                // 3759
      var x__, y__, v__, x_, y_, v_, first, clean;                                                                     // 3760
      function lineStart() {                                                                                           // 3761
        clip.point = linePoint;                                                                                        // 3762
        if (polygon) polygon.push(ring = []);                                                                          // 3763
        first = true;                                                                                                  // 3764
        v_ = false;                                                                                                    // 3765
        x_ = y_ = NaN;                                                                                                 // 3766
      }                                                                                                                // 3767
      function lineEnd() {                                                                                             // 3768
        if (segments) {                                                                                                // 3769
          linePoint(x__, y__);                                                                                         // 3770
          if (v__ && v_) bufferListener.rejoin();                                                                      // 3771
          segments.push(bufferListener.buffer());                                                                      // 3772
        }                                                                                                              // 3773
        clip.point = point;                                                                                            // 3774
        if (v_) listener.lineEnd();                                                                                    // 3775
      }                                                                                                                // 3776
      function linePoint(x, y) {                                                                                       // 3777
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));                                        // 3778
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));                                        // 3779
        var v = pointVisible(x, y);                                                                                    // 3780
        if (polygon) ring.push([ x, y ]);                                                                              // 3781
        if (first) {                                                                                                   // 3782
          x__ = x, y__ = y, v__ = v;                                                                                   // 3783
          first = false;                                                                                               // 3784
          if (v) {                                                                                                     // 3785
            listener.lineStart();                                                                                      // 3786
            listener.point(x, y);                                                                                      // 3787
          }                                                                                                            // 3788
        } else {                                                                                                       // 3789
          if (v && v_) listener.point(x, y); else {                                                                    // 3790
            var l = {                                                                                                  // 3791
              a: {                                                                                                     // 3792
                x: x_,                                                                                                 // 3793
                y: y_                                                                                                  // 3794
              },                                                                                                       // 3795
              b: {                                                                                                     // 3796
                x: x,                                                                                                  // 3797
                y: y                                                                                                   // 3798
              }                                                                                                        // 3799
            };                                                                                                         // 3800
            if (clipLine(l)) {                                                                                         // 3801
              if (!v_) {                                                                                               // 3802
                listener.lineStart();                                                                                  // 3803
                listener.point(l.a.x, l.a.y);                                                                          // 3804
              }                                                                                                        // 3805
              listener.point(l.b.x, l.b.y);                                                                            // 3806
              if (!v) listener.lineEnd();                                                                              // 3807
              clean = false;                                                                                           // 3808
            } else if (v) {                                                                                            // 3809
              listener.lineStart();                                                                                    // 3810
              listener.point(x, y);                                                                                    // 3811
              clean = false;                                                                                           // 3812
            }                                                                                                          // 3813
          }                                                                                                            // 3814
        }                                                                                                              // 3815
        x_ = x, y_ = y, v_ = v;                                                                                        // 3816
      }                                                                                                                // 3817
      return clip;                                                                                                     // 3818
    };                                                                                                                 // 3819
    function corner(p, direction) {                                                                                    // 3820
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }                                                                                                                  // 3822
    function compare(a, b) {                                                                                           // 3823
      return comparePoints(a.x, b.x);                                                                                  // 3824
    }                                                                                                                  // 3825
    function comparePoints(a, b) {                                                                                     // 3826
      var ca = corner(a, 1), cb = corner(b, 1);                                                                        // 3827
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }                                                                                                                  // 3829
  }                                                                                                                    // 3830
  function d3_geo_conic(projectAt) {                                                                                   // 3831
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);                                    // 3832
    p.parallels = function(_) {                                                                                        // 3833
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];                                                    // 3834
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);                                                              // 3835
    };                                                                                                                 // 3836
    return p;                                                                                                          // 3837
  }                                                                                                                    // 3838
  function d3_geo_conicEqualArea(φ0, φ1) {                                                                             // 3839
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;  // 3840
    function forward(λ, φ) {                                                                                           // 3841
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;                                                                  // 3842
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];                                                           // 3843
    }                                                                                                                  // 3844
    forward.invert = function(x, y) {                                                                                  // 3845
      var ρ0_y = ρ0 - y;                                                                                               // 3846
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];                      // 3847
    };                                                                                                                 // 3848
    return forward;                                                                                                    // 3849
  }                                                                                                                    // 3850
  (d3.geo.conicEqualArea = function() {                                                                                // 3851
    return d3_geo_conic(d3_geo_conicEqualArea);                                                                        // 3852
  }).raw = d3_geo_conicEqualArea;                                                                                      // 3853
  d3.geo.albers = function() {                                                                                         // 3854
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);      // 3855
  };                                                                                                                   // 3856
  d3.geo.albersUsa = function() {                                                                                      // 3857
    var lower48 = d3.geo.albers();                                                                                     // 3858
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);                // 3859
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);                 // 3860
    var point, pointStream = {                                                                                         // 3861
      point: function(x, y) {                                                                                          // 3862
        point = [ x, y ];                                                                                              // 3863
      }                                                                                                                // 3864
    }, lower48Point, alaskaPoint, hawaiiPoint;                                                                         // 3865
    function albersUsa(coordinates) {                                                                                  // 3866
      var x = coordinates[0], y = coordinates[1];                                                                      // 3867
      point = null;                                                                                                    // 3868
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);                                  // 3869
      return point;                                                                                                    // 3870
    }                                                                                                                  // 3871
    albersUsa.invert = function(coordinates) {                                                                         // 3872
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };                                                                                                                 // 3875
    albersUsa.stream = function(stream) {                                                                              // 3876
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {                                                                                                         // 3878
        point: function(x, y) {                                                                                        // 3879
          lower48Stream.point(x, y);                                                                                   // 3880
          alaskaStream.point(x, y);                                                                                    // 3881
          hawaiiStream.point(x, y);                                                                                    // 3882
        },                                                                                                             // 3883
        sphere: function() {                                                                                           // 3884
          lower48Stream.sphere();                                                                                      // 3885
          alaskaStream.sphere();                                                                                       // 3886
          hawaiiStream.sphere();                                                                                       // 3887
        },                                                                                                             // 3888
        lineStart: function() {                                                                                        // 3889
          lower48Stream.lineStart();                                                                                   // 3890
          alaskaStream.lineStart();                                                                                    // 3891
          hawaiiStream.lineStart();                                                                                    // 3892
        },                                                                                                             // 3893
        lineEnd: function() {                                                                                          // 3894
          lower48Stream.lineEnd();                                                                                     // 3895
          alaskaStream.lineEnd();                                                                                      // 3896
          hawaiiStream.lineEnd();                                                                                      // 3897
        },                                                                                                             // 3898
        polygonStart: function() {                                                                                     // 3899
          lower48Stream.polygonStart();                                                                                // 3900
          alaskaStream.polygonStart();                                                                                 // 3901
          hawaiiStream.polygonStart();                                                                                 // 3902
        },                                                                                                             // 3903
        polygonEnd: function() {                                                                                       // 3904
          lower48Stream.polygonEnd();                                                                                  // 3905
          alaskaStream.polygonEnd();                                                                                   // 3906
          hawaiiStream.polygonEnd();                                                                                   // 3907
        }                                                                                                              // 3908
      };                                                                                                               // 3909
    };                                                                                                                 // 3910
    albersUsa.precision = function(_) {                                                                                // 3911
      if (!arguments.length) return lower48.precision();                                                               // 3912
      lower48.precision(_);                                                                                            // 3913
      alaska.precision(_);                                                                                             // 3914
      hawaii.precision(_);                                                                                             // 3915
      return albersUsa;                                                                                                // 3916
    };                                                                                                                 // 3917
    albersUsa.scale = function(_) {                                                                                    // 3918
      if (!arguments.length) return lower48.scale();                                                                   // 3919
      lower48.scale(_);                                                                                                // 3920
      alaska.scale(_ * .35);                                                                                           // 3921
      hawaii.scale(_);                                                                                                 // 3922
      return albersUsa.translate(lower48.translate());                                                                 // 3923
    };                                                                                                                 // 3924
    albersUsa.translate = function(_) {                                                                                // 3925
      if (!arguments.length) return lower48.translate();                                                               // 3926
      var k = lower48.scale(), x = +_[0], y = +_[1];                                                                   // 3927
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;                                                                                                // 3931
    };                                                                                                                 // 3932
    return albersUsa.scale(1070);                                                                                      // 3933
  };                                                                                                                   // 3934
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {                                                  // 3935
    point: d3_noop,                                                                                                    // 3936
    lineStart: d3_noop,                                                                                                // 3937
    lineEnd: d3_noop,                                                                                                  // 3938
    polygonStart: function() {                                                                                         // 3939
      d3_geo_pathAreaPolygon = 0;                                                                                      // 3940
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;                                                            // 3941
    },                                                                                                                 // 3942
    polygonEnd: function() {                                                                                           // 3943
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;                           // 3944
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);                                                           // 3945
    }                                                                                                                  // 3946
  };                                                                                                                   // 3947
  function d3_geo_pathAreaRingStart() {                                                                                // 3948
    var x00, y00, x0, y0;                                                                                              // 3949
    d3_geo_pathArea.point = function(x, y) {                                                                           // 3950
      d3_geo_pathArea.point = nextPoint;                                                                               // 3951
      x00 = x0 = x, y00 = y0 = y;                                                                                      // 3952
    };                                                                                                                 // 3953
    function nextPoint(x, y) {                                                                                         // 3954
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;                                                                       // 3955
      x0 = x, y0 = y;                                                                                                  // 3956
    }                                                                                                                  // 3957
    d3_geo_pathArea.lineEnd = function() {                                                                             // 3958
      nextPoint(x00, y00);                                                                                             // 3959
    };                                                                                                                 // 3960
  }                                                                                                                    // 3961
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;                              // 3962
  var d3_geo_pathBounds = {                                                                                            // 3963
    point: d3_geo_pathBoundsPoint,                                                                                     // 3964
    lineStart: d3_noop,                                                                                                // 3965
    lineEnd: d3_noop,                                                                                                  // 3966
    polygonStart: d3_noop,                                                                                             // 3967
    polygonEnd: d3_noop                                                                                                // 3968
  };                                                                                                                   // 3969
  function d3_geo_pathBoundsPoint(x, y) {                                                                              // 3970
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;                                                              // 3971
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;                                                              // 3972
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;                                                              // 3973
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;                                                              // 3974
  }                                                                                                                    // 3975
  function d3_geo_pathBuffer() {                                                                                       // 3976
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];                                                       // 3977
    var stream = {                                                                                                     // 3978
      point: point,                                                                                                    // 3979
      lineStart: function() {                                                                                          // 3980
        stream.point = pointLineStart;                                                                                 // 3981
      },                                                                                                               // 3982
      lineEnd: lineEnd,                                                                                                // 3983
      polygonStart: function() {                                                                                       // 3984
        stream.lineEnd = lineEndPolygon;                                                                               // 3985
      },                                                                                                               // 3986
      polygonEnd: function() {                                                                                         // 3987
        stream.lineEnd = lineEnd;                                                                                      // 3988
        stream.point = point;                                                                                          // 3989
      },                                                                                                               // 3990
      pointRadius: function(_) {                                                                                       // 3991
        pointCircle = d3_geo_pathBufferCircle(_);                                                                      // 3992
        return stream;                                                                                                 // 3993
      },                                                                                                               // 3994
      result: function() {                                                                                             // 3995
        if (buffer.length) {                                                                                           // 3996
          var result = buffer.join("");                                                                                // 3997
          buffer = [];                                                                                                 // 3998
          return result;                                                                                               // 3999
        }                                                                                                              // 4000
      }                                                                                                                // 4001
    };                                                                                                                 // 4002
    function point(x, y) {                                                                                             // 4003
      buffer.push("M", x, ",", y, pointCircle);                                                                        // 4004
    }                                                                                                                  // 4005
    function pointLineStart(x, y) {                                                                                    // 4006
      buffer.push("M", x, ",", y);                                                                                     // 4007
      stream.point = pointLine;                                                                                        // 4008
    }                                                                                                                  // 4009
    function pointLine(x, y) {                                                                                         // 4010
      buffer.push("L", x, ",", y);                                                                                     // 4011
    }                                                                                                                  // 4012
    function lineEnd() {                                                                                               // 4013
      stream.point = point;                                                                                            // 4014
    }                                                                                                                  // 4015
    function lineEndPolygon() {                                                                                        // 4016
      buffer.push("Z");                                                                                                // 4017
    }                                                                                                                  // 4018
    return stream;                                                                                                     // 4019
  }                                                                                                                    // 4020
  function d3_geo_pathBufferCircle(radius) {                                                                           // 4021
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }                                                                                                                    // 4023
  var d3_geo_pathCentroid = {                                                                                          // 4024
    point: d3_geo_pathCentroidPoint,                                                                                   // 4025
    lineStart: d3_geo_pathCentroidLineStart,                                                                           // 4026
    lineEnd: d3_geo_pathCentroidLineEnd,                                                                               // 4027
    polygonStart: function() {                                                                                         // 4028
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;                                                    // 4029
    },                                                                                                                 // 4030
    polygonEnd: function() {                                                                                           // 4031
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;                                                            // 4032
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;                                                    // 4033
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;                                                        // 4034
    }                                                                                                                  // 4035
  };                                                                                                                   // 4036
  function d3_geo_pathCentroidPoint(x, y) {                                                                            // 4037
    d3_geo_centroidX0 += x;                                                                                            // 4038
    d3_geo_centroidY0 += y;                                                                                            // 4039
    ++d3_geo_centroidZ0;                                                                                               // 4040
  }                                                                                                                    // 4041
  function d3_geo_pathCentroidLineStart() {                                                                            // 4042
    var x0, y0;                                                                                                        // 4043
    d3_geo_pathCentroid.point = function(x, y) {                                                                       // 4044
      d3_geo_pathCentroid.point = nextPoint;                                                                           // 4045
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);                                                                        // 4046
    };                                                                                                                 // 4047
    function nextPoint(x, y) {                                                                                         // 4048
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);                                                  // 4049
      d3_geo_centroidX1 += z * (x0 + x) / 2;                                                                           // 4050
      d3_geo_centroidY1 += z * (y0 + y) / 2;                                                                           // 4051
      d3_geo_centroidZ1 += z;                                                                                          // 4052
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);                                                                        // 4053
    }                                                                                                                  // 4054
  }                                                                                                                    // 4055
  function d3_geo_pathCentroidLineEnd() {                                                                              // 4056
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;                                                              // 4057
  }                                                                                                                    // 4058
  function d3_geo_pathCentroidRingStart() {                                                                            // 4059
    var x00, y00, x0, y0;                                                                                              // 4060
    d3_geo_pathCentroid.point = function(x, y) {                                                                       // 4061
      d3_geo_pathCentroid.point = nextPoint;                                                                           // 4062
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);                                                            // 4063
    };                                                                                                                 // 4064
    function nextPoint(x, y) {                                                                                         // 4065
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);                                                  // 4066
      d3_geo_centroidX1 += z * (x0 + x) / 2;                                                                           // 4067
      d3_geo_centroidY1 += z * (y0 + y) / 2;                                                                           // 4068
      d3_geo_centroidZ1 += z;                                                                                          // 4069
      z = y0 * x - x0 * y;                                                                                             // 4070
      d3_geo_centroidX2 += z * (x0 + x);                                                                               // 4071
      d3_geo_centroidY2 += z * (y0 + y);                                                                               // 4072
      d3_geo_centroidZ2 += z * 3;                                                                                      // 4073
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);                                                                        // 4074
    }                                                                                                                  // 4075
    d3_geo_pathCentroid.lineEnd = function() {                                                                         // 4076
      nextPoint(x00, y00);                                                                                             // 4077
    };                                                                                                                 // 4078
  }                                                                                                                    // 4079
  function d3_geo_pathContext(context) {                                                                               // 4080
    var pointRadius = 4.5;                                                                                             // 4081
    var stream = {                                                                                                     // 4082
      point: point,                                                                                                    // 4083
      lineStart: function() {                                                                                          // 4084
        stream.point = pointLineStart;                                                                                 // 4085
      },                                                                                                               // 4086
      lineEnd: lineEnd,                                                                                                // 4087
      polygonStart: function() {                                                                                       // 4088
        stream.lineEnd = lineEndPolygon;                                                                               // 4089
      },                                                                                                               // 4090
      polygonEnd: function() {                                                                                         // 4091
        stream.lineEnd = lineEnd;                                                                                      // 4092
        stream.point = point;                                                                                          // 4093
      },                                                                                                               // 4094
      pointRadius: function(_) {                                                                                       // 4095
        pointRadius = _;                                                                                               // 4096
        return stream;                                                                                                 // 4097
      },                                                                                                               // 4098
      result: d3_noop                                                                                                  // 4099
    };                                                                                                                 // 4100
    function point(x, y) {                                                                                             // 4101
      context.moveTo(x + pointRadius, y);                                                                              // 4102
      context.arc(x, y, pointRadius, 0, τ);                                                                            // 4103
    }                                                                                                                  // 4104
    function pointLineStart(x, y) {                                                                                    // 4105
      context.moveTo(x, y);                                                                                            // 4106
      stream.point = pointLine;                                                                                        // 4107
    }                                                                                                                  // 4108
    function pointLine(x, y) {                                                                                         // 4109
      context.lineTo(x, y);                                                                                            // 4110
    }                                                                                                                  // 4111
    function lineEnd() {                                                                                               // 4112
      stream.point = point;                                                                                            // 4113
    }                                                                                                                  // 4114
    function lineEndPolygon() {                                                                                        // 4115
      context.closePath();                                                                                             // 4116
    }                                                                                                                  // 4117
    return stream;                                                                                                     // 4118
  }                                                                                                                    // 4119
  function d3_geo_resample(project) {                                                                                  // 4120
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;                                            // 4121
    function resample(stream) {                                                                                        // 4122
      return (maxDepth ? resampleRecursive : resampleNone)(stream);                                                    // 4123
    }                                                                                                                  // 4124
    function resampleNone(stream) {                                                                                    // 4125
      return d3_geo_transformPoint(stream, function(x, y) {                                                            // 4126
        x = project(x, y);                                                                                             // 4127
        stream.point(x[0], x[1]);                                                                                      // 4128
      });                                                                                                              // 4129
    }                                                                                                                  // 4130
    function resampleRecursive(stream) {                                                                               // 4131
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;                                                   // 4132
      var resample = {                                                                                                 // 4133
        point: point,                                                                                                  // 4134
        lineStart: lineStart,                                                                                          // 4135
        lineEnd: lineEnd,                                                                                              // 4136
        polygonStart: function() {                                                                                     // 4137
          stream.polygonStart();                                                                                       // 4138
          resample.lineStart = ringStart;                                                                              // 4139
        },                                                                                                             // 4140
        polygonEnd: function() {                                                                                       // 4141
          stream.polygonEnd();                                                                                         // 4142
          resample.lineStart = lineStart;                                                                              // 4143
        }                                                                                                              // 4144
      };                                                                                                               // 4145
      function point(x, y) {                                                                                           // 4146
        x = project(x, y);                                                                                             // 4147
        stream.point(x[0], x[1]);                                                                                      // 4148
      }                                                                                                                // 4149
      function lineStart() {                                                                                           // 4150
        x0 = NaN;                                                                                                      // 4151
        resample.point = linePoint;                                                                                    // 4152
        stream.lineStart();                                                                                            // 4153
      }                                                                                                                // 4154
      function linePoint(λ, φ) {                                                                                       // 4155
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);                                                         // 4156
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);                                                                                          // 4158
      }                                                                                                                // 4159
      function lineEnd() {                                                                                             // 4160
        resample.point = point;                                                                                        // 4161
        stream.lineEnd();                                                                                              // 4162
      }                                                                                                                // 4163
      function ringStart() {                                                                                           // 4164
        lineStart();                                                                                                   // 4165
        resample.point = ringPoint;                                                                                    // 4166
        resample.lineEnd = ringEnd;                                                                                    // 4167
      }                                                                                                                // 4168
      function ringPoint(λ, φ) {                                                                                       // 4169
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;                                 // 4170
        resample.point = linePoint;                                                                                    // 4171
      }                                                                                                                // 4172
      function ringEnd() {                                                                                             // 4173
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);                        // 4174
        resample.lineEnd = lineEnd;                                                                                    // 4175
        lineEnd();                                                                                                     // 4176
      }                                                                                                                // 4177
      return resample;                                                                                                 // 4178
    }                                                                                                                  // 4179
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {                           // 4180
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;                                                          // 4181
      if (d2 > 4 * δ2 && depth--) {                                                                                    // 4182
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);                        // 4185
          stream.point(x2, y2);                                                                                        // 4186
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);                                  // 4187
        }                                                                                                              // 4188
      }                                                                                                                // 4189
    }                                                                                                                  // 4190
    resample.precision = function(_) {                                                                                 // 4191
      if (!arguments.length) return Math.sqrt(δ2);                                                                     // 4192
      maxDepth = (δ2 = _ * _) > 0 && 16;                                                                               // 4193
      return resample;                                                                                                 // 4194
    };                                                                                                                 // 4195
    return resample;                                                                                                   // 4196
  }                                                                                                                    // 4197
  d3.geo.path = function() {                                                                                           // 4198
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;                             // 4199
    function path(object) {                                                                                            // 4200
      if (object) {                                                                                                    // 4201
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));         // 4202
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);                            // 4203
        d3.geo.stream(object, cacheStream);                                                                            // 4204
      }                                                                                                                // 4205
      return contextStream.result();                                                                                   // 4206
    }                                                                                                                  // 4207
    path.area = function(object) {                                                                                     // 4208
      d3_geo_pathAreaSum = 0;                                                                                          // 4209
      d3.geo.stream(object, projectStream(d3_geo_pathArea));                                                           // 4210
      return d3_geo_pathAreaSum;                                                                                       // 4211
    };                                                                                                                 // 4212
    path.centroid = function(object) {                                                                                 // 4213
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));                                                       // 4215
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };                                                                                                                 // 4217
    path.bounds = function(object) {                                                                                   // 4218
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);             // 4219
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));                                                         // 4220
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];           // 4221
    };                                                                                                                 // 4222
    path.projection = function(_) {                                                                                    // 4223
      if (!arguments.length) return projection;                                                                        // 4224
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;                        // 4225
      return reset();                                                                                                  // 4226
    };                                                                                                                 // 4227
    path.context = function(_) {                                                                                       // 4228
      if (!arguments.length) return context;                                                                           // 4229
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);                     // 4230
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);                                   // 4231
      return reset();                                                                                                  // 4232
    };                                                                                                                 // 4233
    path.pointRadius = function(_) {                                                                                   // 4234
      if (!arguments.length) return pointRadius;                                                                       // 4235
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);                                 // 4236
      return path;                                                                                                     // 4237
    };                                                                                                                 // 4238
    function reset() {                                                                                                 // 4239
      cacheStream = null;                                                                                              // 4240
      return path;                                                                                                     // 4241
    }                                                                                                                  // 4242
    return path.projection(d3.geo.albersUsa()).context(null);                                                          // 4243
  };                                                                                                                   // 4244
  function d3_geo_pathProjectStream(project) {                                                                         // 4245
    var resample = d3_geo_resample(function(x, y) {                                                                    // 4246
      return project([ x * d3_degrees, y * d3_degrees ]);                                                              // 4247
    });                                                                                                                // 4248
    return function(stream) {                                                                                          // 4249
      return d3_geo_projectionRadians(resample(stream));                                                               // 4250
    };                                                                                                                 // 4251
  }                                                                                                                    // 4252
  d3.geo.transform = function(methods) {                                                                               // 4253
    return {                                                                                                           // 4254
      stream: function(stream) {                                                                                       // 4255
        var transform = new d3_geo_transform(stream);                                                                  // 4256
        for (var k in methods) transform[k] = methods[k];                                                              // 4257
        return transform;                                                                                              // 4258
      }                                                                                                                // 4259
    };                                                                                                                 // 4260
  };                                                                                                                   // 4261
  function d3_geo_transform(stream) {                                                                                  // 4262
    this.stream = stream;                                                                                              // 4263
  }                                                                                                                    // 4264
  d3_geo_transform.prototype = {                                                                                       // 4265
    point: function(x, y) {                                                                                            // 4266
      this.stream.point(x, y);                                                                                         // 4267
    },                                                                                                                 // 4268
    sphere: function() {                                                                                               // 4269
      this.stream.sphere();                                                                                            // 4270
    },                                                                                                                 // 4271
    lineStart: function() {                                                                                            // 4272
      this.stream.lineStart();                                                                                         // 4273
    },                                                                                                                 // 4274
    lineEnd: function() {                                                                                              // 4275
      this.stream.lineEnd();                                                                                           // 4276
    },                                                                                                                 // 4277
    polygonStart: function() {                                                                                         // 4278
      this.stream.polygonStart();                                                                                      // 4279
    },                                                                                                                 // 4280
    polygonEnd: function() {                                                                                           // 4281
      this.stream.polygonEnd();                                                                                        // 4282
    }                                                                                                                  // 4283
  };                                                                                                                   // 4284
  function d3_geo_transformPoint(stream, point) {                                                                      // 4285
    return {                                                                                                           // 4286
      point: point,                                                                                                    // 4287
      sphere: function() {                                                                                             // 4288
        stream.sphere();                                                                                               // 4289
      },                                                                                                               // 4290
      lineStart: function() {                                                                                          // 4291
        stream.lineStart();                                                                                            // 4292
      },                                                                                                               // 4293
      lineEnd: function() {                                                                                            // 4294
        stream.lineEnd();                                                                                              // 4295
      },                                                                                                               // 4296
      polygonStart: function() {                                                                                       // 4297
        stream.polygonStart();                                                                                         // 4298
      },                                                                                                               // 4299
      polygonEnd: function() {                                                                                         // 4300
        stream.polygonEnd();                                                                                           // 4301
      }                                                                                                                // 4302
    };                                                                                                                 // 4303
  }                                                                                                                    // 4304
  d3.geo.projection = d3_geo_projection;                                                                               // 4305
  d3.geo.projectionMutator = d3_geo_projectionMutator;                                                                 // 4306
  function d3_geo_projection(project) {                                                                                // 4307
    return d3_geo_projectionMutator(function() {                                                                       // 4308
      return project;                                                                                                  // 4309
    })();                                                                                                              // 4310
  }                                                                                                                    // 4311
  function d3_geo_projectionMutator(projectAt) {                                                                       // 4312
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {                             // 4313
      x = project(x, y);                                                                                               // 4314
      return [ x[0] * k + δx, δy - x[1] * k ];                                                                         // 4315
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {                                                                                       // 4317
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);                                             // 4318
      return [ point[0] * k + δx, δy - point[1] * k ];                                                                 // 4319
    }                                                                                                                  // 4320
    function invert(point) {                                                                                           // 4321
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);                                          // 4322
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];                                                // 4323
    }                                                                                                                  // 4324
    projection.stream = function(output) {                                                                             // 4325
      if (stream) stream.valid = false;                                                                                // 4326
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));                           // 4327
      stream.valid = true;                                                                                             // 4328
      return stream;                                                                                                   // 4329
    };                                                                                                                 // 4330
    projection.clipAngle = function(_) {                                                                               // 4331
      if (!arguments.length) return clipAngle;                                                                         // 4332
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();                                                                                             // 4334
    };                                                                                                                 // 4335
    projection.clipExtent = function(_) {                                                                              // 4336
      if (!arguments.length) return clipExtent;                                                                        // 4337
      clipExtent = _;                                                                                                  // 4338
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;                              // 4339
      return invalidate();                                                                                             // 4340
    };                                                                                                                 // 4341
    projection.scale = function(_) {                                                                                   // 4342
      if (!arguments.length) return k;                                                                                 // 4343
      k = +_;                                                                                                          // 4344
      return reset();                                                                                                  // 4345
    };                                                                                                                 // 4346
    projection.translate = function(_) {                                                                               // 4347
      if (!arguments.length) return [ x, y ];                                                                          // 4348
      x = +_[0];                                                                                                       // 4349
      y = +_[1];                                                                                                       // 4350
      return reset();                                                                                                  // 4351
    };                                                                                                                 // 4352
    projection.center = function(_) {                                                                                  // 4353
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];                                                // 4354
      λ = _[0] % 360 * d3_radians;                                                                                     // 4355
      φ = _[1] % 360 * d3_radians;                                                                                     // 4356
      return reset();                                                                                                  // 4357
    };                                                                                                                 // 4358
    projection.rotate = function(_) {                                                                                  // 4359
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];                             // 4360
      δλ = _[0] % 360 * d3_radians;                                                                                    // 4361
      δφ = _[1] % 360 * d3_radians;                                                                                    // 4362
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;                                                                 // 4363
      return reset();                                                                                                  // 4364
    };                                                                                                                 // 4365
    d3.rebind(projection, projectResample, "precision");                                                               // 4366
    function reset() {                                                                                                 // 4367
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);                                   // 4368
      var center = project(λ, φ);                                                                                      // 4369
      δx = x - center[0] * k;                                                                                          // 4370
      δy = y + center[1] * k;                                                                                          // 4371
      return invalidate();                                                                                             // 4372
    }                                                                                                                  // 4373
    function invalidate() {                                                                                            // 4374
      if (stream) stream.valid = false, stream = null;                                                                 // 4375
      return projection;                                                                                               // 4376
    }                                                                                                                  // 4377
    return function() {                                                                                                // 4378
      project = projectAt.apply(this, arguments);                                                                      // 4379
      projection.invert = project.invert && invert;                                                                    // 4380
      return reset();                                                                                                  // 4381
    };                                                                                                                 // 4382
  }                                                                                                                    // 4383
  function d3_geo_projectionRadians(stream) {                                                                          // 4384
    return d3_geo_transformPoint(stream, function(x, y) {                                                              // 4385
      stream.point(x * d3_radians, y * d3_radians);                                                                    // 4386
    });                                                                                                                // 4387
  }                                                                                                                    // 4388
  function d3_geo_equirectangular(λ, φ) {                                                                              // 4389
    return [ λ, φ ];                                                                                                   // 4390
  }                                                                                                                    // 4391
  (d3.geo.equirectangular = function() {                                                                               // 4392
    return d3_geo_projection(d3_geo_equirectangular);                                                                  // 4393
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;                                                     // 4394
  d3.geo.rotation = function(rotate) {                                                                                 // 4395
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {                                                                                    // 4397
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);                                  // 4398
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;                                  // 4399
    }                                                                                                                  // 4400
    forward.invert = function(coordinates) {                                                                           // 4401
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);                           // 4402
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;                                  // 4403
    };                                                                                                                 // 4404
    return forward;                                                                                                    // 4405
  };                                                                                                                   // 4406
  function d3_geo_identityRotation(λ, φ) {                                                                             // 4407
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];                                                                  // 4408
  }                                                                                                                    // 4409
  d3_geo_identityRotation.invert = d3_geo_equirectangular;                                                             // 4410
  function d3_geo_rotation(δλ, δφ, δγ) {                                                                               // 4411
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }                                                                                                                    // 4413
  function d3_geo_forwardRotationλ(δλ) {                                                                               // 4414
    return function(λ, φ) {                                                                                            // 4415
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];                                                       // 4416
    };                                                                                                                 // 4417
  }                                                                                                                    // 4418
  function d3_geo_rotationλ(δλ) {                                                                                      // 4419
    var rotation = d3_geo_forwardRotationλ(δλ);                                                                        // 4420
    rotation.invert = d3_geo_forwardRotationλ(-δλ);                                                                    // 4421
    return rotation;                                                                                                   // 4422
  }                                                                                                                    // 4423
  function d3_geo_rotationφγ(δφ, δγ) {                                                                                 // 4424
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);                        // 4425
    function rotation(λ, φ) {                                                                                          // 4426
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];             // 4428
    }                                                                                                                  // 4429
    rotation.invert = function(λ, φ) {                                                                                 // 4430
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];             // 4432
    };                                                                                                                 // 4433
    return rotation;                                                                                                   // 4434
  }                                                                                                                    // 4435
  d3.geo.circle = function() {                                                                                         // 4436
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;                                                          // 4437
    function circle() {                                                                                                // 4438
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {                                                                                     // 4440
        point: function(x, y) {                                                                                        // 4441
          ring.push(x = rotate(x, y));                                                                                 // 4442
          x[0] *= d3_degrees, x[1] *= d3_degrees;                                                                      // 4443
        }                                                                                                              // 4444
      });                                                                                                              // 4445
      return {                                                                                                         // 4446
        type: "Polygon",                                                                                               // 4447
        coordinates: [ ring ]                                                                                          // 4448
      };                                                                                                               // 4449
    }                                                                                                                  // 4450
    circle.origin = function(x) {                                                                                      // 4451
      if (!arguments.length) return origin;                                                                            // 4452
      origin = x;                                                                                                      // 4453
      return circle;                                                                                                   // 4454
    };                                                                                                                 // 4455
    circle.angle = function(x) {                                                                                       // 4456
      if (!arguments.length) return angle;                                                                             // 4457
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);                       // 4458
      return circle;                                                                                                   // 4459
    };                                                                                                                 // 4460
    circle.precision = function(_) {                                                                                   // 4461
      if (!arguments.length) return precision;                                                                         // 4462
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);                       // 4463
      return circle;                                                                                                   // 4464
    };                                                                                                                 // 4465
    return circle.angle(90);                                                                                           // 4466
  };                                                                                                                   // 4467
  function d3_geo_circleInterpolate(radius, precision) {                                                               // 4468
    var cr = Math.cos(radius), sr = Math.sin(radius);                                                                  // 4469
    return function(from, to, direction, listener) {                                                                   // 4470
      var step = direction * precision;                                                                                // 4471
      if (from != null) {                                                                                              // 4472
        from = d3_geo_circleAngle(cr, from);                                                                           // 4473
        to = d3_geo_circleAngle(cr, to);                                                                               // 4474
        if (direction > 0 ? from < to : from > to) from += direction * τ;                                              // 4475
      } else {                                                                                                         // 4476
        from = radius + direction * τ;                                                                                 // 4477
        to = radius - .5 * step;                                                                                       // 4478
      }                                                                                                                // 4479
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {                                          // 4480
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);         // 4481
      }                                                                                                                // 4482
    };                                                                                                                 // 4483
  }                                                                                                                    // 4484
  function d3_geo_circleAngle(cr, point) {                                                                             // 4485
    var a = d3_geo_cartesian(point);                                                                                   // 4486
    a[0] -= cr;                                                                                                        // 4487
    d3_geo_cartesianNormalize(a);                                                                                      // 4488
    var angle = d3_acos(-a[1]);                                                                                        // 4489
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);                                           // 4490
  }                                                                                                                    // 4491
  d3.geo.distance = function(a, b) {                                                                                   // 4492
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };                                                                                                                   // 4495
  d3.geo.graticule = function() {                                                                                      // 4496
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;              // 4497
    function graticule() {                                                                                             // 4498
      return {                                                                                                         // 4499
        type: "MultiLineString",                                                                                       // 4500
        coordinates: lines()                                                                                           // 4501
      };                                                                                                               // 4502
    }                                                                                                                  // 4503
    function lines() {                                                                                                 // 4504
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;                                                                                        // 4506
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {                                 // 4507
        return abs(y % DY) > ε;                                                                                        // 4508
      }).map(y));                                                                                                      // 4509
    }                                                                                                                  // 4510
    graticule.lines = function() {                                                                                     // 4511
      return lines().map(function(coordinates) {                                                                       // 4512
        return {                                                                                                       // 4513
          type: "LineString",                                                                                          // 4514
          coordinates: coordinates                                                                                     // 4515
        };                                                                                                             // 4516
      });                                                                                                              // 4517
    };                                                                                                                 // 4518
    graticule.outline = function() {                                                                                   // 4519
      return {                                                                                                         // 4520
        type: "Polygon",                                                                                               // 4521
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]              // 4522
      };                                                                                                               // 4523
    };                                                                                                                 // 4524
    graticule.extent = function(_) {                                                                                   // 4525
      if (!arguments.length) return graticule.minorExtent();                                                           // 4526
      return graticule.majorExtent(_).minorExtent(_);                                                                  // 4527
    };                                                                                                                 // 4528
    graticule.majorExtent = function(_) {                                                                              // 4529
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];                                                        // 4530
      X0 = +_[0][0], X1 = +_[1][0];                                                                                    // 4531
      Y0 = +_[0][1], Y1 = +_[1][1];                                                                                    // 4532
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;                                                                            // 4533
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;                                                                            // 4534
      return graticule.precision(precision);                                                                           // 4535
    };                                                                                                                 // 4536
    graticule.minorExtent = function(_) {                                                                              // 4537
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];                                                        // 4538
      x0 = +_[0][0], x1 = +_[1][0];                                                                                    // 4539
      y0 = +_[0][1], y1 = +_[1][1];                                                                                    // 4540
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;                                                                            // 4541
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;                                                                            // 4542
      return graticule.precision(precision);                                                                           // 4543
    };                                                                                                                 // 4544
    graticule.step = function(_) {                                                                                     // 4545
      if (!arguments.length) return graticule.minorStep();                                                             // 4546
      return graticule.majorStep(_).minorStep(_);                                                                      // 4547
    };                                                                                                                 // 4548
    graticule.majorStep = function(_) {                                                                                // 4549
      if (!arguments.length) return [ DX, DY ];                                                                        // 4550
      DX = +_[0], DY = +_[1];                                                                                          // 4551
      return graticule;                                                                                                // 4552
    };                                                                                                                 // 4553
    graticule.minorStep = function(_) {                                                                                // 4554
      if (!arguments.length) return [ dx, dy ];                                                                        // 4555
      dx = +_[0], dy = +_[1];                                                                                          // 4556
      return graticule;                                                                                                // 4557
    };                                                                                                                 // 4558
    graticule.precision = function(_) {                                                                                // 4559
      if (!arguments.length) return precision;                                                                         // 4560
      precision = +_;                                                                                                  // 4561
      x = d3_geo_graticuleX(y0, y1, 90);                                                                               // 4562
      y = d3_geo_graticuleY(x0, x1, precision);                                                                        // 4563
      X = d3_geo_graticuleX(Y0, Y1, 90);                                                                               // 4564
      Y = d3_geo_graticuleY(X0, X1, precision);                                                                        // 4565
      return graticule;                                                                                                // 4566
    };                                                                                                                 // 4567
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };                                                                                                                   // 4569
  function d3_geo_graticuleX(y0, y1, dy) {                                                                             // 4570
    var y = d3.range(y0, y1 - ε, dy).concat(y1);                                                                       // 4571
    return function(x) {                                                                                               // 4572
      return y.map(function(y) {                                                                                       // 4573
        return [ x, y ];                                                                                               // 4574
      });                                                                                                              // 4575
    };                                                                                                                 // 4576
  }                                                                                                                    // 4577
  function d3_geo_graticuleY(x0, x1, dx) {                                                                             // 4578
    var x = d3.range(x0, x1 - ε, dx).concat(x1);                                                                       // 4579
    return function(y) {                                                                                               // 4580
      return x.map(function(x) {                                                                                       // 4581
        return [ x, y ];                                                                                               // 4582
      });                                                                                                              // 4583
    };                                                                                                                 // 4584
  }                                                                                                                    // 4585
  function d3_source(d) {                                                                                              // 4586
    return d.source;                                                                                                   // 4587
  }                                                                                                                    // 4588
  function d3_target(d) {                                                                                              // 4589
    return d.target;                                                                                                   // 4590
  }                                                                                                                    // 4591
  d3.geo.greatArc = function() {                                                                                       // 4592
    var source = d3_source, source_, target = d3_target, target_;                                                      // 4593
    function greatArc() {                                                                                              // 4594
      return {                                                                                                         // 4595
        type: "LineString",                                                                                            // 4596
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]            // 4597
      };                                                                                                               // 4598
    }                                                                                                                  // 4599
    greatArc.distance = function() {                                                                                   // 4600
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));      // 4601
    };                                                                                                                 // 4602
    greatArc.source = function(_) {                                                                                    // 4603
      if (!arguments.length) return source;                                                                            // 4604
      source = _, source_ = typeof _ === "function" ? null : _;                                                        // 4605
      return greatArc;                                                                                                 // 4606
    };                                                                                                                 // 4607
    greatArc.target = function(_) {                                                                                    // 4608
      if (!arguments.length) return target;                                                                            // 4609
      target = _, target_ = typeof _ === "function" ? null : _;                                                        // 4610
      return greatArc;                                                                                                 // 4611
    };                                                                                                                 // 4612
    greatArc.precision = function() {                                                                                  // 4613
      return arguments.length ? greatArc : 0;                                                                          // 4614
    };                                                                                                                 // 4615
    return greatArc;                                                                                                   // 4616
  };                                                                                                                   // 4617
  d3.geo.interpolate = function(source, target) {                                                                      // 4618
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };                                                                                                                   // 4620
  function d3_geo_interpolate(x0, y0, x1, y1) {                                                                        // 4621
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {                                                                                // 4623
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];                  // 4625
    } : function() {                                                                                                   // 4626
      return [ x0 * d3_degrees, y0 * d3_degrees ];                                                                     // 4627
    };                                                                                                                 // 4628
    interpolate.distance = d;                                                                                          // 4629
    return interpolate;                                                                                                // 4630
  }                                                                                                                    // 4631
  d3.geo.length = function(object) {                                                                                   // 4632
    d3_geo_lengthSum = 0;                                                                                              // 4633
    d3.geo.stream(object, d3_geo_length);                                                                              // 4634
    return d3_geo_lengthSum;                                                                                           // 4635
  };                                                                                                                   // 4636
  var d3_geo_lengthSum;                                                                                                // 4637
  var d3_geo_length = {                                                                                                // 4638
    sphere: d3_noop,                                                                                                   // 4639
    point: d3_noop,                                                                                                    // 4640
    lineStart: d3_geo_lengthLineStart,                                                                                 // 4641
    lineEnd: d3_noop,                                                                                                  // 4642
    polygonStart: d3_noop,                                                                                             // 4643
    polygonEnd: d3_noop                                                                                                // 4644
  };                                                                                                                   // 4645
  function d3_geo_lengthLineStart() {                                                                                  // 4646
    var λ0, sinφ0, cosφ0;                                                                                              // 4647
    d3_geo_length.point = function(λ, φ) {                                                                             // 4648
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);                                     // 4649
      d3_geo_length.point = nextPoint;                                                                                 // 4650
    };                                                                                                                 // 4651
    d3_geo_length.lineEnd = function() {                                                                               // 4652
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;                                                           // 4653
    };                                                                                                                 // 4654
    function nextPoint(λ, φ) {                                                                                         // 4655
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);  // 4656
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;                                                                              // 4658
    }                                                                                                                  // 4659
  }                                                                                                                    // 4660
  function d3_geo_azimuthal(scale, angle) {                                                                            // 4661
    function azimuthal(λ, φ) {                                                                                         // 4662
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);                                              // 4663
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];                                                              // 4664
    }                                                                                                                  // 4665
    azimuthal.invert = function(x, y) {                                                                                // 4666
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);                          // 4667
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];                                         // 4668
    };                                                                                                                 // 4669
    return azimuthal;                                                                                                  // 4670
  }                                                                                                                    // 4671
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {                                                // 4672
    return Math.sqrt(2 / (1 + cosλcosφ));                                                                              // 4673
  }, function(ρ) {                                                                                                     // 4674
    return 2 * Math.asin(ρ / 2);                                                                                       // 4675
  });                                                                                                                  // 4676
  (d3.geo.azimuthalEqualArea = function() {                                                                            // 4677
    return d3_geo_projection(d3_geo_azimuthalEqualArea);                                                               // 4678
  }).raw = d3_geo_azimuthalEqualArea;                                                                                  // 4679
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {                                              // 4680
    var c = Math.acos(cosλcosφ);                                                                                       // 4681
    return c && c / Math.sin(c);                                                                                       // 4682
  }, d3_identity);                                                                                                     // 4683
  (d3.geo.azimuthalEquidistant = function() {                                                                          // 4684
    return d3_geo_projection(d3_geo_azimuthalEquidistant);                                                             // 4685
  }).raw = d3_geo_azimuthalEquidistant;                                                                                // 4686
  function d3_geo_conicConformal(φ0, φ1) {                                                                             // 4687
    var cosφ0 = Math.cos(φ0), t = function(φ) {                                                                        // 4688
      return Math.tan(π / 4 + φ / 2);                                                                                  // 4689
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;                                                                                    // 4691
    function forward(λ, φ) {                                                                                           // 4692
      if (F > 0) {                                                                                                     // 4693
        if (φ < -halfπ + ε) φ = -halfπ + ε;                                                                            // 4694
      } else {                                                                                                         // 4695
        if (φ > halfπ - ε) φ = halfπ - ε;                                                                              // 4696
      }                                                                                                                // 4697
      var ρ = F / Math.pow(t(φ), n);                                                                                   // 4698
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];                                                         // 4699
    }                                                                                                                  // 4700
    forward.invert = function(x, y) {                                                                                  // 4701
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);                                                // 4702
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];                               // 4703
    };                                                                                                                 // 4704
    return forward;                                                                                                    // 4705
  }                                                                                                                    // 4706
  (d3.geo.conicConformal = function() {                                                                                // 4707
    return d3_geo_conic(d3_geo_conicConformal);                                                                        // 4708
  }).raw = d3_geo_conicConformal;                                                                                      // 4709
  function d3_geo_conicEquidistant(φ0, φ1) {                                                                           // 4710
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;   // 4711
    if (abs(n) < ε) return d3_geo_equirectangular;                                                                     // 4712
    function forward(λ, φ) {                                                                                           // 4713
      var ρ = G - φ;                                                                                                   // 4714
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];                                                         // 4715
    }                                                                                                                  // 4716
    forward.invert = function(x, y) {                                                                                  // 4717
      var ρ0_y = G - y;                                                                                                // 4718
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];                              // 4719
    };                                                                                                                 // 4720
    return forward;                                                                                                    // 4721
  }                                                                                                                    // 4722
  (d3.geo.conicEquidistant = function() {                                                                              // 4723
    return d3_geo_conic(d3_geo_conicEquidistant);                                                                      // 4724
  }).raw = d3_geo_conicEquidistant;                                                                                    // 4725
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {                                                          // 4726
    return 1 / cosλcosφ;                                                                                               // 4727
  }, Math.atan);                                                                                                       // 4728
  (d3.geo.gnomonic = function() {                                                                                      // 4729
    return d3_geo_projection(d3_geo_gnomonic);                                                                         // 4730
  }).raw = d3_geo_gnomonic;                                                                                            // 4731
  function d3_geo_mercator(λ, φ) {                                                                                     // 4732
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];                                                                   // 4733
  }                                                                                                                    // 4734
  d3_geo_mercator.invert = function(x, y) {                                                                            // 4735
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];                                                                  // 4736
  };                                                                                                                   // 4737
  function d3_geo_mercatorProjection(project) {                                                                        // 4738
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto; // 4739
    m.scale = function() {                                                                                             // 4740
      var v = scale.apply(m, arguments);                                                                               // 4741
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;                                                          // 4742
    };                                                                                                                 // 4743
    m.translate = function() {                                                                                         // 4744
      var v = translate.apply(m, arguments);                                                                           // 4745
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;                                                          // 4746
    };                                                                                                                 // 4747
    m.clipExtent = function(_) {                                                                                       // 4748
      var v = clipExtent.apply(m, arguments);                                                                          // 4749
      if (v === m) {                                                                                                   // 4750
        if (clipAuto = _ == null) {                                                                                    // 4751
          var k = π * scale(), t = translate();                                                                        // 4752
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);                                              // 4753
        }                                                                                                              // 4754
      } else if (clipAuto) {                                                                                           // 4755
        v = null;                                                                                                      // 4756
      }                                                                                                                // 4757
      return v;                                                                                                        // 4758
    };                                                                                                                 // 4759
    return m.clipExtent(null);                                                                                         // 4760
  }                                                                                                                    // 4761
  (d3.geo.mercator = function() {                                                                                      // 4762
    return d3_geo_mercatorProjection(d3_geo_mercator);                                                                 // 4763
  }).raw = d3_geo_mercator;                                                                                            // 4764
  var d3_geo_orthographic = d3_geo_azimuthal(function() {                                                              // 4765
    return 1;                                                                                                          // 4766
  }, Math.asin);                                                                                                       // 4767
  (d3.geo.orthographic = function() {                                                                                  // 4768
    return d3_geo_projection(d3_geo_orthographic);                                                                     // 4769
  }).raw = d3_geo_orthographic;                                                                                        // 4770
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {                                                     // 4771
    return 1 / (1 + cosλcosφ);                                                                                         // 4772
  }, function(ρ) {                                                                                                     // 4773
    return 2 * Math.atan(ρ);                                                                                           // 4774
  });                                                                                                                  // 4775
  (d3.geo.stereographic = function() {                                                                                 // 4776
    return d3_geo_projection(d3_geo_stereographic);                                                                    // 4777
  }).raw = d3_geo_stereographic;                                                                                       // 4778
  function d3_geo_transverseMercator(λ, φ) {                                                                           // 4779
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];                                                                  // 4780
  }                                                                                                                    // 4781
  d3_geo_transverseMercator.invert = function(x, y) {                                                                  // 4782
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];                                                                 // 4783
  };                                                                                                                   // 4784
  (d3.geo.transverseMercator = function() {                                                                            // 4785
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {                                                                                  // 4787
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);                                            // 4788
    };                                                                                                                 // 4789
    projection.rotate = function(_) {                                                                                  // 4790
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(),                                // 4791
      [ _[0], _[1], _[2] - 90 ]);                                                                                      // 4792
    };                                                                                                                 // 4793
    return rotate([ 0, 0, 90 ]);                                                                                       // 4794
  }).raw = d3_geo_transverseMercator;                                                                                  // 4795
  d3.geom = {};                                                                                                        // 4796
  function d3_geom_pointX(d) {                                                                                         // 4797
    return d[0];                                                                                                       // 4798
  }                                                                                                                    // 4799
  function d3_geom_pointY(d) {                                                                                         // 4800
    return d[1];                                                                                                       // 4801
  }                                                                                                                    // 4802
  d3.geom.hull = function(vertices) {                                                                                  // 4803
    var x = d3_geom_pointX, y = d3_geom_pointY;                                                                        // 4804
    if (arguments.length) return hull(vertices);                                                                       // 4805
    function hull(data) {                                                                                              // 4806
      if (data.length < 3) return [];                                                                                  // 4807
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];                 // 4808
      for (i = 0; i < n; i++) {                                                                                        // 4809
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);                                    // 4810
      }                                                                                                                // 4811
      points.sort(d3_geom_hullOrder);                                                                                  // 4812
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);                                     // 4813
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);                                 // 4814
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);                                 // 4816
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);                  // 4817
      return polygon;                                                                                                  // 4818
    }                                                                                                                  // 4819
    hull.x = function(_) {                                                                                             // 4820
      return arguments.length ? (x = _, hull) : x;                                                                     // 4821
    };                                                                                                                 // 4822
    hull.y = function(_) {                                                                                             // 4823
      return arguments.length ? (y = _, hull) : y;                                                                     // 4824
    };                                                                                                                 // 4825
    return hull;                                                                                                       // 4826
  };                                                                                                                   // 4827
  function d3_geom_hullUpper(points) {                                                                                 // 4828
    var n = points.length, hull = [ 0, 1 ], hs = 2;                                                                    // 4829
    for (var i = 2; i < n; i++) {                                                                                      // 4830
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;                   // 4831
      hull[hs++] = i;                                                                                                  // 4832
    }                                                                                                                  // 4833
    return hull.slice(0, hs);                                                                                          // 4834
  }                                                                                                                    // 4835
  function d3_geom_hullOrder(a, b) {                                                                                   // 4836
    return a[0] - b[0] || a[1] - b[1];                                                                                 // 4837
  }                                                                                                                    // 4838
  d3.geom.polygon = function(coordinates) {                                                                            // 4839
    d3_subclass(coordinates, d3_geom_polygonPrototype);                                                                // 4840
    return coordinates;                                                                                                // 4841
  };                                                                                                                   // 4842
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];                                                       // 4843
  d3_geom_polygonPrototype.area = function() {                                                                         // 4844
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;                                                         // 4845
    while (++i < n) {                                                                                                  // 4846
      a = b;                                                                                                           // 4847
      b = this[i];                                                                                                     // 4848
      area += a[1] * b[0] - a[0] * b[1];                                                                               // 4849
    }                                                                                                                  // 4850
    return area * .5;                                                                                                  // 4851
  };                                                                                                                   // 4852
  d3_geom_polygonPrototype.centroid = function(k) {                                                                    // 4853
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;                                                  // 4854
    if (!arguments.length) k = -1 / (6 * this.area());                                                                 // 4855
    while (++i < n) {                                                                                                  // 4856
      a = b;                                                                                                           // 4857
      b = this[i];                                                                                                     // 4858
      c = a[0] * b[1] - b[0] * a[1];                                                                                   // 4859
      x += (a[0] + b[0]) * c;                                                                                          // 4860
      y += (a[1] + b[1]) * c;                                                                                          // 4861
    }                                                                                                                  // 4862
    return [ x * k, y * k ];                                                                                           // 4863
  };                                                                                                                   // 4864
  d3_geom_polygonPrototype.clip = function(subject) {                                                                  // 4865
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {                                                                                                  // 4867
      input = subject.slice();                                                                                         // 4868
      subject.length = 0;                                                                                              // 4869
      b = this[i];                                                                                                     // 4870
      c = input[(m = input.length - closed) - 1];                                                                      // 4871
      j = -1;                                                                                                          // 4872
      while (++j < m) {                                                                                                // 4873
        d = input[j];                                                                                                  // 4874
        if (d3_geom_polygonInside(d, a, b)) {                                                                          // 4875
          if (!d3_geom_polygonInside(c, a, b)) {                                                                       // 4876
            subject.push(d3_geom_polygonIntersect(c, d, a, b));                                                        // 4877
          }                                                                                                            // 4878
          subject.push(d);                                                                                             // 4879
        } else if (d3_geom_polygonInside(c, a, b)) {                                                                   // 4880
          subject.push(d3_geom_polygonIntersect(c, d, a, b));                                                          // 4881
        }                                                                                                              // 4882
        c = d;                                                                                                         // 4883
      }                                                                                                                // 4884
      if (closed) subject.push(subject[0]);                                                                            // 4885
      a = b;                                                                                                           // 4886
    }                                                                                                                  // 4887
    return subject;                                                                                                    // 4888
  };                                                                                                                   // 4889
  function d3_geom_polygonInside(p, a, b) {                                                                            // 4890
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);                                              // 4891
  }                                                                                                                    // 4892
  function d3_geom_polygonIntersect(c, d, a, b) {                                                                      // 4893
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];                                                                           // 4895
  }                                                                                                                    // 4896
  function d3_geom_polygonClosed(coordinates) {                                                                        // 4897
    var a = coordinates[0], b = coordinates[coordinates.length - 1];                                                   // 4898
    return !(a[0] - b[0] || a[1] - b[1]);                                                                              // 4899
  }                                                                                                                    // 4900
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {                                                                                    // 4902
    d3_geom_voronoiRedBlackNode(this);                                                                                 // 4903
    this.edge = this.site = this.circle = null;                                                                        // 4904
  }                                                                                                                    // 4905
  function d3_geom_voronoiCreateBeach(site) {                                                                          // 4906
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();                                          // 4907
    beach.site = site;                                                                                                 // 4908
    return beach;                                                                                                      // 4909
  }                                                                                                                    // 4910
  function d3_geom_voronoiDetachBeach(beach) {                                                                         // 4911
    d3_geom_voronoiDetachCircle(beach);                                                                                // 4912
    d3_geom_voronoiBeaches.remove(beach);                                                                              // 4913
    d3_geom_voronoiBeachPool.push(beach);                                                                              // 4914
    d3_geom_voronoiRedBlackNode(beach);                                                                                // 4915
  }                                                                                                                    // 4916
  function d3_geom_voronoiRemoveBeach(beach) {                                                                         // 4917
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {                                                 // 4918
      x: x,                                                                                                            // 4919
      y: y                                                                                                             // 4920
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];                                                   // 4921
    d3_geom_voronoiDetachBeach(beach);                                                                                 // 4922
    var lArc = previous;                                                                                               // 4923
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {                                 // 4924
      previous = lArc.P;                                                                                               // 4925
      disappearing.unshift(lArc);                                                                                      // 4926
      d3_geom_voronoiDetachBeach(lArc);                                                                                // 4927
      lArc = previous;                                                                                                 // 4928
    }                                                                                                                  // 4929
    disappearing.unshift(lArc);                                                                                        // 4930
    d3_geom_voronoiDetachCircle(lArc);                                                                                 // 4931
    var rArc = next;                                                                                                   // 4932
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {                                 // 4933
      next = rArc.N;                                                                                                   // 4934
      disappearing.push(rArc);                                                                                         // 4935
      d3_geom_voronoiDetachBeach(rArc);                                                                                // 4936
      rArc = next;                                                                                                     // 4937
    }                                                                                                                  // 4938
    disappearing.push(rArc);                                                                                           // 4939
    d3_geom_voronoiDetachCircle(rArc);                                                                                 // 4940
    var nArcs = disappearing.length, iArc;                                                                             // 4941
    for (iArc = 1; iArc < nArcs; ++iArc) {                                                                             // 4942
      rArc = disappearing[iArc];                                                                                       // 4943
      lArc = disappearing[iArc - 1];                                                                                   // 4944
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);                                              // 4945
    }                                                                                                                  // 4946
    lArc = disappearing[0];                                                                                            // 4947
    rArc = disappearing[nArcs - 1];                                                                                    // 4948
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);                                         // 4949
    d3_geom_voronoiAttachCircle(lArc);                                                                                 // 4950
    d3_geom_voronoiAttachCircle(rArc);                                                                                 // 4951
  }                                                                                                                    // 4952
  function d3_geom_voronoiAddBeach(site) {                                                                             // 4953
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;                         // 4954
    while (node) {                                                                                                     // 4955
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;                                                        // 4956
      if (dxl > ε) node = node.L; else {                                                                               // 4957
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);                                                     // 4958
        if (dxr > ε) {                                                                                                 // 4959
          if (!node.R) {                                                                                               // 4960
            lArc = node;                                                                                               // 4961
            break;                                                                                                     // 4962
          }                                                                                                            // 4963
          node = node.R;                                                                                               // 4964
        } else {                                                                                                       // 4965
          if (dxl > -ε) {                                                                                              // 4966
            lArc = node.P;                                                                                             // 4967
            rArc = node;                                                                                               // 4968
          } else if (dxr > -ε) {                                                                                       // 4969
            lArc = node;                                                                                               // 4970
            rArc = node.N;                                                                                             // 4971
          } else {                                                                                                     // 4972
            lArc = rArc = node;                                                                                        // 4973
          }                                                                                                            // 4974
          break;                                                                                                       // 4975
        }                                                                                                              // 4976
      }                                                                                                                // 4977
    }                                                                                                                  // 4978
    var newArc = d3_geom_voronoiCreateBeach(site);                                                                     // 4979
    d3_geom_voronoiBeaches.insert(lArc, newArc);                                                                       // 4980
    if (!lArc && !rArc) return;                                                                                        // 4981
    if (lArc === rArc) {                                                                                               // 4982
      d3_geom_voronoiDetachCircle(lArc);                                                                               // 4983
      rArc = d3_geom_voronoiCreateBeach(lArc.site);                                                                    // 4984
      d3_geom_voronoiBeaches.insert(newArc, rArc);                                                                     // 4985
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);                                     // 4986
      d3_geom_voronoiAttachCircle(lArc);                                                                               // 4987
      d3_geom_voronoiAttachCircle(rArc);                                                                               // 4988
      return;                                                                                                          // 4989
    }                                                                                                                  // 4990
    if (!rArc) {                                                                                                       // 4991
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);                                                 // 4992
      return;                                                                                                          // 4993
    }                                                                                                                  // 4994
    d3_geom_voronoiDetachCircle(lArc);                                                                                 // 4995
    d3_geom_voronoiDetachCircle(rArc);                                                                                 // 4996
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,                                                                                 // 4998
      y: (bx * hc - cx * hb) / d + ay                                                                                  // 4999
    };                                                                                                                 // 5000
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);                                                        // 5001
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);                                                // 5002
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);                                                  // 5003
    d3_geom_voronoiAttachCircle(lArc);                                                                                 // 5004
    d3_geom_voronoiAttachCircle(rArc);                                                                                 // 5005
  }                                                                                                                    // 5006
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {                                                             // 5007
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;                                     // 5008
    if (!pby2) return rfocx;                                                                                           // 5009
    var lArc = arc.P;                                                                                                  // 5010
    if (!lArc) return -Infinity;                                                                                       // 5011
    site = lArc.site;                                                                                                  // 5012
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;                                                     // 5013
    if (!plby2) return lfocx;                                                                                          // 5014
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;                                               // 5015
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;                                                                                        // 5017
  }                                                                                                                    // 5018
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {                                                            // 5019
    var rArc = arc.N;                                                                                                  // 5020
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);                                                   // 5021
    var site = arc.site;                                                                                               // 5022
    return site.y === directrix ? site.x : Infinity;                                                                   // 5023
  }                                                                                                                    // 5024
  function d3_geom_voronoiCell(site) {                                                                                 // 5025
    this.site = site;                                                                                                  // 5026
    this.edges = [];                                                                                                   // 5027
  }                                                                                                                    // 5028
  d3_geom_voronoiCell.prototype.prepare = function() {                                                                 // 5029
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;                                                    // 5030
    while (iHalfEdge--) {                                                                                              // 5031
      edge = halfEdges[iHalfEdge].edge;                                                                                // 5032
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);                                                          // 5033
    }                                                                                                                  // 5034
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);                                                                      // 5035
    return halfEdges.length;                                                                                           // 5036
  };                                                                                                                   // 5037
  function d3_geom_voronoiCloseCells(extent) {                                                                         // 5038
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {                                                                                                  // 5040
      cell = cells[iCell];                                                                                             // 5041
      if (!cell || !cell.prepare()) continue;                                                                          // 5042
      halfEdges = cell.edges;                                                                                          // 5043
      nHalfEdges = halfEdges.length;                                                                                   // 5044
      iHalfEdge = 0;                                                                                                   // 5045
      while (iHalfEdge < nHalfEdges) {                                                                                 // 5046
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;                                                      // 5047
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;                               // 5048
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {                                                                    // 5049
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,                                                                                                     // 5051
            y: abs(x2 - x0) < ε ? y2 : y1                                                                              // 5052
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {                                                                      // 5053
            x: abs(y2 - y1) < ε ? x2 : x1,                                                                             // 5054
            y: y1                                                                                                      // 5055
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {                                                                      // 5056
            x: x1,                                                                                                     // 5057
            y: abs(x2 - x1) < ε ? y2 : y0                                                                              // 5058
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {                                                                      // 5059
            x: abs(y2 - y0) < ε ? x2 : x0,                                                                             // 5060
            y: y0                                                                                                      // 5061
          } : null), cell.site, null));                                                                                // 5062
          ++nHalfEdges;                                                                                                // 5063
        }                                                                                                              // 5064
      }                                                                                                                // 5065
    }                                                                                                                  // 5066
  }                                                                                                                    // 5067
  function d3_geom_voronoiHalfEdgeOrder(a, b) {                                                                        // 5068
    return b.angle - a.angle;                                                                                          // 5069
  }                                                                                                                    // 5070
  function d3_geom_voronoiCircle() {                                                                                   // 5071
    d3_geom_voronoiRedBlackNode(this);                                                                                 // 5072
    this.x = this.y = this.arc = this.site = this.cy = null;                                                           // 5073
  }                                                                                                                    // 5074
  function d3_geom_voronoiAttachCircle(arc) {                                                                          // 5075
    var lArc = arc.P, rArc = arc.N;                                                                                    // 5076
    if (!lArc || !rArc) return;                                                                                        // 5077
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;                                                        // 5078
    if (lSite === rSite) return;                                                                                       // 5079
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;        // 5080
    var d = 2 * (ax * cy - ay * cx);                                                                                   // 5081
    if (d >= -ε2) return;                                                                                              // 5082
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();                                       // 5084
    circle.arc = arc;                                                                                                  // 5085
    circle.site = cSite;                                                                                               // 5086
    circle.x = x + bx;                                                                                                 // 5087
    circle.y = cy + Math.sqrt(x * x + y * y);                                                                          // 5088
    circle.cy = cy;                                                                                                    // 5089
    arc.circle = circle;                                                                                               // 5090
    var before = null, node = d3_geom_voronoiCircles._;                                                                // 5091
    while (node) {                                                                                                     // 5092
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {                                            // 5093
        if (node.L) node = node.L; else {                                                                              // 5094
          before = node.P;                                                                                             // 5095
          break;                                                                                                       // 5096
        }                                                                                                              // 5097
      } else {                                                                                                         // 5098
        if (node.R) node = node.R; else {                                                                              // 5099
          before = node;                                                                                               // 5100
          break;                                                                                                       // 5101
        }                                                                                                              // 5102
      }                                                                                                                // 5103
    }                                                                                                                  // 5104
    d3_geom_voronoiCircles.insert(before, circle);                                                                     // 5105
    if (!before) d3_geom_voronoiFirstCircle = circle;                                                                  // 5106
  }                                                                                                                    // 5107
  function d3_geom_voronoiDetachCircle(arc) {                                                                          // 5108
    var circle = arc.circle;                                                                                           // 5109
    if (circle) {                                                                                                      // 5110
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;                                                            // 5111
      d3_geom_voronoiCircles.remove(circle);                                                                           // 5112
      d3_geom_voronoiCirclePool.push(circle);                                                                          // 5113
      d3_geom_voronoiRedBlackNode(circle);                                                                             // 5114
      arc.circle = null;                                                                                               // 5115
    }                                                                                                                  // 5116
  }                                                                                                                    // 5117
  function d3_geom_voronoiClipEdges(extent) {                                                                          // 5118
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {                                                                                                      // 5120
      e = edges[i];                                                                                                    // 5121
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {    // 5122
        e.a = e.b = null;                                                                                              // 5123
        edges.splice(i, 1);                                                                                            // 5124
      }                                                                                                                // 5125
    }                                                                                                                  // 5126
  }                                                                                                                    // 5127
  function d3_geom_voronoiConnectEdge(edge, extent) {                                                                  // 5128
    var vb = edge.b;                                                                                                   // 5129
    if (vb) return true;                                                                                               // 5130
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {                                                                                                   // 5132
      if (fx < x0 || fx >= x1) return;                                                                                 // 5133
      if (lx > rx) {                                                                                                   // 5134
        if (!va) va = {                                                                                                // 5135
          x: fx,                                                                                                       // 5136
          y: y0                                                                                                        // 5137
        }; else if (va.y >= y1) return;                                                                                // 5138
        vb = {                                                                                                         // 5139
          x: fx,                                                                                                       // 5140
          y: y1                                                                                                        // 5141
        };                                                                                                             // 5142
      } else {                                                                                                         // 5143
        if (!va) va = {                                                                                                // 5144
          x: fx,                                                                                                       // 5145
          y: y1                                                                                                        // 5146
        }; else if (va.y < y0) return;                                                                                 // 5147
        vb = {                                                                                                         // 5148
          x: fx,                                                                                                       // 5149
          y: y0                                                                                                        // 5150
        };                                                                                                             // 5151
      }                                                                                                                // 5152
    } else {                                                                                                           // 5153
      fm = (lx - rx) / (ry - ly);                                                                                      // 5154
      fb = fy - fm * fx;                                                                                               // 5155
      if (fm < -1 || fm > 1) {                                                                                         // 5156
        if (lx > rx) {                                                                                                 // 5157
          if (!va) va = {                                                                                              // 5158
            x: (y0 - fb) / fm,                                                                                         // 5159
            y: y0                                                                                                      // 5160
          }; else if (va.y >= y1) return;                                                                              // 5161
          vb = {                                                                                                       // 5162
            x: (y1 - fb) / fm,                                                                                         // 5163
            y: y1                                                                                                      // 5164
          };                                                                                                           // 5165
        } else {                                                                                                       // 5166
          if (!va) va = {                                                                                              // 5167
            x: (y1 - fb) / fm,                                                                                         // 5168
            y: y1                                                                                                      // 5169
          }; else if (va.y < y0) return;                                                                               // 5170
          vb = {                                                                                                       // 5171
            x: (y0 - fb) / fm,                                                                                         // 5172
            y: y0                                                                                                      // 5173
          };                                                                                                           // 5174
        }                                                                                                              // 5175
      } else {                                                                                                         // 5176
        if (ly < ry) {                                                                                                 // 5177
          if (!va) va = {                                                                                              // 5178
            x: x0,                                                                                                     // 5179
            y: fm * x0 + fb                                                                                            // 5180
          }; else if (va.x >= x1) return;                                                                              // 5181
          vb = {                                                                                                       // 5182
            x: x1,                                                                                                     // 5183
            y: fm * x1 + fb                                                                                            // 5184
          };                                                                                                           // 5185
        } else {                                                                                                       // 5186
          if (!va) va = {                                                                                              // 5187
            x: x1,                                                                                                     // 5188
            y: fm * x1 + fb                                                                                            // 5189
          }; else if (va.x < x0) return;                                                                               // 5190
          vb = {                                                                                                       // 5191
            x: x0,                                                                                                     // 5192
            y: fm * x0 + fb                                                                                            // 5193
          };                                                                                                           // 5194
        }                                                                                                              // 5195
      }                                                                                                                // 5196
    }                                                                                                                  // 5197
    edge.a = va;                                                                                                       // 5198
    edge.b = vb;                                                                                                       // 5199
    return true;                                                                                                       // 5200
  }                                                                                                                    // 5201
  function d3_geom_voronoiEdge(lSite, rSite) {                                                                         // 5202
    this.l = lSite;                                                                                                    // 5203
    this.r = rSite;                                                                                                    // 5204
    this.a = this.b = null;                                                                                            // 5205
  }                                                                                                                    // 5206
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {                                                           // 5207
    var edge = new d3_geom_voronoiEdge(lSite, rSite);                                                                  // 5208
    d3_geom_voronoiEdges.push(edge);                                                                                   // 5209
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);                                                         // 5210
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);                                                         // 5211
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));                         // 5212
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));                         // 5213
    return edge;                                                                                                       // 5214
  }                                                                                                                    // 5215
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {                                                            // 5216
    var edge = new d3_geom_voronoiEdge(lSite, null);                                                                   // 5217
    edge.a = va;                                                                                                       // 5218
    edge.b = vb;                                                                                                       // 5219
    d3_geom_voronoiEdges.push(edge);                                                                                   // 5220
    return edge;                                                                                                       // 5221
  }                                                                                                                    // 5222
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {                                                     // 5223
    if (!edge.a && !edge.b) {                                                                                          // 5224
      edge.a = vertex;                                                                                                 // 5225
      edge.l = lSite;                                                                                                  // 5226
      edge.r = rSite;                                                                                                  // 5227
    } else if (edge.l === rSite) {                                                                                     // 5228
      edge.b = vertex;                                                                                                 // 5229
    } else {                                                                                                           // 5230
      edge.a = vertex;                                                                                                 // 5231
    }                                                                                                                  // 5232
  }                                                                                                                    // 5233
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {                                                               // 5234
    var va = edge.a, vb = edge.b;                                                                                      // 5235
    this.edge = edge;                                                                                                  // 5236
    this.site = lSite;                                                                                                 // 5237
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }                                                                                                                    // 5239
  d3_geom_voronoiHalfEdge.prototype = {                                                                                // 5240
    start: function() {                                                                                                // 5241
      return this.edge.l === this.site ? this.edge.a : this.edge.b;                                                    // 5242
    },                                                                                                                 // 5243
    end: function() {                                                                                                  // 5244
      return this.edge.l === this.site ? this.edge.b : this.edge.a;                                                    // 5245
    }                                                                                                                  // 5246
  };                                                                                                                   // 5247
  function d3_geom_voronoiRedBlackTree() {                                                                             // 5248
    this._ = null;                                                                                                     // 5249
  }                                                                                                                    // 5250
  function d3_geom_voronoiRedBlackNode(node) {                                                                         // 5251
    node.U = node.C = node.L = node.R = node.P = node.N = null;                                                        // 5252
  }                                                                                                                    // 5253
  d3_geom_voronoiRedBlackTree.prototype = {                                                                            // 5254
    insert: function(after, node) {                                                                                    // 5255
      var parent, grandpa, uncle;                                                                                      // 5256
      if (after) {                                                                                                     // 5257
        node.P = after;                                                                                                // 5258
        node.N = after.N;                                                                                              // 5259
        if (after.N) after.N.P = node;                                                                                 // 5260
        after.N = node;                                                                                                // 5261
        if (after.R) {                                                                                                 // 5262
          after = after.R;                                                                                             // 5263
          while (after.L) after = after.L;                                                                             // 5264
          after.L = node;                                                                                              // 5265
        } else {                                                                                                       // 5266
          after.R = node;                                                                                              // 5267
        }                                                                                                              // 5268
        parent = after;                                                                                                // 5269
      } else if (this._) {                                                                                             // 5270
        after = d3_geom_voronoiRedBlackFirst(this._);                                                                  // 5271
        node.P = null;                                                                                                 // 5272
        node.N = after;                                                                                                // 5273
        after.P = after.L = node;                                                                                      // 5274
        parent = after;                                                                                                // 5275
      } else {                                                                                                         // 5276
        node.P = node.N = null;                                                                                        // 5277
        this._ = node;                                                                                                 // 5278
        parent = null;                                                                                                 // 5279
      }                                                                                                                // 5280
      node.L = node.R = null;                                                                                          // 5281
      node.U = parent;                                                                                                 // 5282
      node.C = true;                                                                                                   // 5283
      after = node;                                                                                                    // 5284
      while (parent && parent.C) {                                                                                     // 5285
        grandpa = parent.U;                                                                                            // 5286
        if (parent === grandpa.L) {                                                                                    // 5287
          uncle = grandpa.R;                                                                                           // 5288
          if (uncle && uncle.C) {                                                                                      // 5289
            parent.C = uncle.C = false;                                                                                // 5290
            grandpa.C = true;                                                                                          // 5291
            after = grandpa;                                                                                           // 5292
          } else {                                                                                                     // 5293
            if (after === parent.R) {                                                                                  // 5294
              d3_geom_voronoiRedBlackRotateLeft(this, parent);                                                         // 5295
              after = parent;                                                                                          // 5296
              parent = after.U;                                                                                        // 5297
            }                                                                                                          // 5298
            parent.C = false;                                                                                          // 5299
            grandpa.C = true;                                                                                          // 5300
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);                                                         // 5301
          }                                                                                                            // 5302
        } else {                                                                                                       // 5303
          uncle = grandpa.L;                                                                                           // 5304
          if (uncle && uncle.C) {                                                                                      // 5305
            parent.C = uncle.C = false;                                                                                // 5306
            grandpa.C = true;                                                                                          // 5307
            after = grandpa;                                                                                           // 5308
          } else {                                                                                                     // 5309
            if (after === parent.L) {                                                                                  // 5310
              d3_geom_voronoiRedBlackRotateRight(this, parent);                                                        // 5311
              after = parent;                                                                                          // 5312
              parent = after.U;                                                                                        // 5313
            }                                                                                                          // 5314
            parent.C = false;                                                                                          // 5315
            grandpa.C = true;                                                                                          // 5316
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);                                                          // 5317
          }                                                                                                            // 5318
        }                                                                                                              // 5319
        parent = after.U;                                                                                              // 5320
      }                                                                                                                // 5321
      this._.C = false;                                                                                                // 5322
    },                                                                                                                 // 5323
    remove: function(node) {                                                                                           // 5324
      if (node.N) node.N.P = node.P;                                                                                   // 5325
      if (node.P) node.P.N = node.N;                                                                                   // 5326
      node.N = node.P = null;                                                                                          // 5327
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;                                          // 5328
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);          // 5329
      if (parent) {                                                                                                    // 5330
        if (parent.L === node) parent.L = next; else parent.R = next;                                                  // 5331
      } else {                                                                                                         // 5332
        this._ = next;                                                                                                 // 5333
      }                                                                                                                // 5334
      if (left && right) {                                                                                             // 5335
        red = next.C;                                                                                                  // 5336
        next.C = node.C;                                                                                               // 5337
        next.L = left;                                                                                                 // 5338
        left.U = next;                                                                                                 // 5339
        if (next !== right) {                                                                                          // 5340
          parent = next.U;                                                                                             // 5341
          next.U = node.U;                                                                                             // 5342
          node = next.R;                                                                                               // 5343
          parent.L = node;                                                                                             // 5344
          next.R = right;                                                                                              // 5345
          right.U = next;                                                                                              // 5346
        } else {                                                                                                       // 5347
          next.U = parent;                                                                                             // 5348
          parent = next;                                                                                               // 5349
          node = next.R;                                                                                               // 5350
        }                                                                                                              // 5351
      } else {                                                                                                         // 5352
        red = node.C;                                                                                                  // 5353
        node = next;                                                                                                   // 5354
      }                                                                                                                // 5355
      if (node) node.U = parent;                                                                                       // 5356
      if (red) return;                                                                                                 // 5357
      if (node && node.C) {                                                                                            // 5358
        node.C = false;                                                                                                // 5359
        return;                                                                                                        // 5360
      }                                                                                                                // 5361
      do {                                                                                                             // 5362
        if (node === this._) break;                                                                                    // 5363
        if (node === parent.L) {                                                                                       // 5364
          sibling = parent.R;                                                                                          // 5365
          if (sibling.C) {                                                                                             // 5366
            sibling.C = false;                                                                                         // 5367
            parent.C = true;                                                                                           // 5368
            d3_geom_voronoiRedBlackRotateLeft(this, parent);                                                           // 5369
            sibling = parent.R;                                                                                        // 5370
          }                                                                                                            // 5371
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {                                                  // 5372
            if (!sibling.R || !sibling.R.C) {                                                                          // 5373
              sibling.L.C = false;                                                                                     // 5374
              sibling.C = true;                                                                                        // 5375
              d3_geom_voronoiRedBlackRotateRight(this, sibling);                                                       // 5376
              sibling = parent.R;                                                                                      // 5377
            }                                                                                                          // 5378
            sibling.C = parent.C;                                                                                      // 5379
            parent.C = sibling.R.C = false;                                                                            // 5380
            d3_geom_voronoiRedBlackRotateLeft(this, parent);                                                           // 5381
            node = this._;                                                                                             // 5382
            break;                                                                                                     // 5383
          }                                                                                                            // 5384
        } else {                                                                                                       // 5385
          sibling = parent.L;                                                                                          // 5386
          if (sibling.C) {                                                                                             // 5387
            sibling.C = false;                                                                                         // 5388
            parent.C = true;                                                                                           // 5389
            d3_geom_voronoiRedBlackRotateRight(this, parent);                                                          // 5390
            sibling = parent.L;                                                                                        // 5391
          }                                                                                                            // 5392
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {                                                  // 5393
            if (!sibling.L || !sibling.L.C) {                                                                          // 5394
              sibling.R.C = false;                                                                                     // 5395
              sibling.C = true;                                                                                        // 5396
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);                                                        // 5397
              sibling = parent.L;                                                                                      // 5398
            }                                                                                                          // 5399
            sibling.C = parent.C;                                                                                      // 5400
            parent.C = sibling.L.C = false;                                                                            // 5401
            d3_geom_voronoiRedBlackRotateRight(this, parent);                                                          // 5402
            node = this._;                                                                                             // 5403
            break;                                                                                                     // 5404
          }                                                                                                            // 5405
        }                                                                                                              // 5406
        sibling.C = true;                                                                                              // 5407
        node = parent;                                                                                                 // 5408
        parent = parent.U;                                                                                             // 5409
      } while (!node.C);                                                                                               // 5410
      if (node) node.C = false;                                                                                        // 5411
    }                                                                                                                  // 5412
  };                                                                                                                   // 5413
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {                                                             // 5414
    var p = node, q = node.R, parent = p.U;                                                                            // 5415
    if (parent) {                                                                                                      // 5416
      if (parent.L === p) parent.L = q; else parent.R = q;                                                             // 5417
    } else {                                                                                                           // 5418
      tree._ = q;                                                                                                      // 5419
    }                                                                                                                  // 5420
    q.U = parent;                                                                                                      // 5421
    p.U = q;                                                                                                           // 5422
    p.R = q.L;                                                                                                         // 5423
    if (p.R) p.R.U = p;                                                                                                // 5424
    q.L = p;                                                                                                           // 5425
  }                                                                                                                    // 5426
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {                                                            // 5427
    var p = node, q = node.L, parent = p.U;                                                                            // 5428
    if (parent) {                                                                                                      // 5429
      if (parent.L === p) parent.L = q; else parent.R = q;                                                             // 5430
    } else {                                                                                                           // 5431
      tree._ = q;                                                                                                      // 5432
    }                                                                                                                  // 5433
    q.U = parent;                                                                                                      // 5434
    p.U = q;                                                                                                           // 5435
    p.L = q.R;                                                                                                         // 5436
    if (p.L) p.L.U = p;                                                                                                // 5437
    q.R = p;                                                                                                           // 5438
  }                                                                                                                    // 5439
  function d3_geom_voronoiRedBlackFirst(node) {                                                                        // 5440
    while (node.L) node = node.L;                                                                                      // 5441
    return node;                                                                                                       // 5442
  }                                                                                                                    // 5443
  function d3_geom_voronoi(sites, bbox) {                                                                              // 5444
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;                                           // 5445
    d3_geom_voronoiEdges = [];                                                                                         // 5446
    d3_geom_voronoiCells = new Array(sites.length);                                                                    // 5447
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();                                                        // 5448
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();                                                        // 5449
    while (true) {                                                                                                     // 5450
      circle = d3_geom_voronoiFirstCircle;                                                                             // 5451
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {                        // 5452
        if (site.x !== x0 || site.y !== y0) {                                                                          // 5453
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);                                                // 5454
          d3_geom_voronoiAddBeach(site);                                                                               // 5455
          x0 = site.x, y0 = site.y;                                                                                    // 5456
        }                                                                                                              // 5457
        site = sites.pop();                                                                                            // 5458
      } else if (circle) {                                                                                             // 5459
        d3_geom_voronoiRemoveBeach(circle.arc);                                                                        // 5460
      } else {                                                                                                         // 5461
        break;                                                                                                         // 5462
      }                                                                                                                // 5463
    }                                                                                                                  // 5464
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);                                         // 5465
    var diagram = {                                                                                                    // 5466
      cells: d3_geom_voronoiCells,                                                                                     // 5467
      edges: d3_geom_voronoiEdges                                                                                      // 5468
    };                                                                                                                 // 5469
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;              // 5470
    return diagram;                                                                                                    // 5471
  }                                                                                                                    // 5472
  function d3_geom_voronoiVertexOrder(a, b) {                                                                          // 5473
    return b.y - a.y || b.x - a.x;                                                                                     // 5474
  }                                                                                                                    // 5475
  d3.geom.voronoi = function(points) {                                                                                 // 5476
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;                // 5477
    if (points) return voronoi(points);                                                                                // 5478
    function voronoi(data) {                                                                                           // 5479
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {                                       // 5481
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {       // 5482
          var s = e.start();                                                                                           // 5483
          return [ s.x, s.y ];                                                                                         // 5484
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];                                                                                       // 5486
      });                                                                                                              // 5487
      return polygons;                                                                                                 // 5488
    }                                                                                                                  // 5489
    function sites(data) {                                                                                             // 5490
      return data.map(function(d, i) {                                                                                 // 5491
        return {                                                                                                       // 5492
          x: Math.round(fx(d, i) / ε) * ε,                                                                             // 5493
          y: Math.round(fy(d, i) / ε) * ε,                                                                             // 5494
          i: i                                                                                                         // 5495
        };                                                                                                             // 5496
      });                                                                                                              // 5497
    }                                                                                                                  // 5498
    voronoi.links = function(data) {                                                                                   // 5499
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {                                                // 5500
        return edge.l && edge.r;                                                                                       // 5501
      }).map(function(edge) {                                                                                          // 5502
        return {                                                                                                       // 5503
          source: data[edge.l.i],                                                                                      // 5504
          target: data[edge.r.i]                                                                                       // 5505
        };                                                                                                             // 5506
      });                                                                                                              // 5507
    };                                                                                                                 // 5508
    voronoi.triangles = function(data) {                                                                               // 5509
      var triangles = [];                                                                                              // 5510
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {                                                   // 5511
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {                                                                                              // 5513
          e0 = e1;                                                                                                     // 5514
          s0 = s1;                                                                                                     // 5515
          e1 = edges[j].edge;                                                                                          // 5516
          s1 = e1.l === site ? e1.r : e1.l;                                                                            // 5517
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {                                 // 5518
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);                                                       // 5519
          }                                                                                                            // 5520
        }                                                                                                              // 5521
      });                                                                                                              // 5522
      return triangles;                                                                                                // 5523
    };                                                                                                                 // 5524
    voronoi.x = function(_) {                                                                                          // 5525
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;                                                 // 5526
    };                                                                                                                 // 5527
    voronoi.y = function(_) {                                                                                          // 5528
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;                                                 // 5529
    };                                                                                                                 // 5530
    voronoi.clipExtent = function(_) {                                                                                 // 5531
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;                      // 5532
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;                                                          // 5533
      return voronoi;                                                                                                  // 5534
    };                                                                                                                 // 5535
    voronoi.size = function(_) {                                                                                       // 5536
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];     // 5537
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);                                                                 // 5538
    };                                                                                                                 // 5539
    return voronoi;                                                                                                    // 5540
  };                                                                                                                   // 5541
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];                                                    // 5542
  function d3_geom_voronoiTriangleArea(a, b, c) {                                                                      // 5543
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);                                                      // 5544
  }                                                                                                                    // 5545
  d3.geom.delaunay = function(vertices) {                                                                              // 5546
    return d3.geom.voronoi().triangles(vertices);                                                                      // 5547
  };                                                                                                                   // 5548
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {                                                                // 5549
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;                                                                // 5550
    if (compat = arguments.length) {                                                                                   // 5551
      x = d3_geom_quadtreeCompatX;                                                                                     // 5552
      y = d3_geom_quadtreeCompatY;                                                                                     // 5553
      if (compat === 3) {                                                                                              // 5554
        y2 = y1;                                                                                                       // 5555
        x2 = x1;                                                                                                       // 5556
        y1 = x1 = 0;                                                                                                   // 5557
      }                                                                                                                // 5558
      return quadtree(points);                                                                                         // 5559
    }                                                                                                                  // 5560
    function quadtree(data) {                                                                                          // 5561
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;                                 // 5562
      if (x1 != null) {                                                                                                // 5563
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;                                                                        // 5564
      } else {                                                                                                         // 5565
        x2_ = y2_ = -(x1_ = y1_ = Infinity);                                                                           // 5566
        xs = [], ys = [];                                                                                              // 5567
        n = data.length;                                                                                               // 5568
        if (compat) for (i = 0; i < n; ++i) {                                                                          // 5569
          d = data[i];                                                                                                 // 5570
          if (d.x < x1_) x1_ = d.x;                                                                                    // 5571
          if (d.y < y1_) y1_ = d.y;                                                                                    // 5572
          if (d.x > x2_) x2_ = d.x;                                                                                    // 5573
          if (d.y > y2_) y2_ = d.y;                                                                                    // 5574
          xs.push(d.x);                                                                                                // 5575
          ys.push(d.y);                                                                                                // 5576
        } else for (i = 0; i < n; ++i) {                                                                               // 5577
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);                                                                // 5578
          if (x_ < x1_) x1_ = x_;                                                                                      // 5579
          if (y_ < y1_) y1_ = y_;                                                                                      // 5580
          if (x_ > x2_) x2_ = x_;                                                                                      // 5581
          if (y_ > y2_) y2_ = y_;                                                                                      // 5582
          xs.push(x_);                                                                                                 // 5583
          ys.push(y_);                                                                                                 // 5584
        }                                                                                                              // 5585
      }                                                                                                                // 5586
      var dx = x2_ - x1_, dy = y2_ - y1_;                                                                              // 5587
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;                                                                // 5588
      function insert(n, d, x, y, x1, y1, x2, y2) {                                                                    // 5589
        if (isNaN(x) || isNaN(y)) return;                                                                              // 5590
        if (n.leaf) {                                                                                                  // 5591
          var nx = n.x, ny = n.y;                                                                                      // 5592
          if (nx != null) {                                                                                            // 5593
            if (abs(nx - x) + abs(ny - y) < .01) {                                                                     // 5594
              insertChild(n, d, x, y, x1, y1, x2, y2);                                                                 // 5595
            } else {                                                                                                   // 5596
              var nPoint = n.point;                                                                                    // 5597
              n.x = n.y = n.point = null;                                                                              // 5598
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);                                                          // 5599
              insertChild(n, d, x, y, x1, y1, x2, y2);                                                                 // 5600
            }                                                                                                          // 5601
          } else {                                                                                                     // 5602
            n.x = x, n.y = y, n.point = d;                                                                             // 5603
          }                                                                                                            // 5604
        } else {                                                                                                       // 5605
          insertChild(n, d, x, y, x1, y1, x2, y2);                                                                     // 5606
        }                                                                                                              // 5607
      }                                                                                                                // 5608
      function insertChild(n, d, x, y, x1, y1, x2, y2) {                                                               // 5609
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;        // 5610
        n.leaf = false;                                                                                                // 5611
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());                                                       // 5612
        if (right) x1 = xm; else x2 = xm;                                                                              // 5613
        if (below) y1 = ym; else y2 = ym;                                                                              // 5614
        insert(n, d, x, y, x1, y1, x2, y2);                                                                            // 5615
      }                                                                                                                // 5616
      var root = d3_geom_quadtreeNode();                                                                               // 5617
      root.add = function(d) {                                                                                         // 5618
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);                                                   // 5619
      };                                                                                                               // 5620
      root.visit = function(f) {                                                                                       // 5621
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);                                                            // 5622
      };                                                                                                               // 5623
      root.find = function(point) {                                                                                    // 5624
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);                                     // 5625
      };                                                                                                               // 5626
      i = -1;                                                                                                          // 5627
      if (x1 == null) {                                                                                                // 5628
        while (++i < n) {                                                                                              // 5629
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);                                                     // 5630
        }                                                                                                              // 5631
        --i;                                                                                                           // 5632
      } else data.forEach(root.add);                                                                                   // 5633
      xs = ys = data = d = null;                                                                                       // 5634
      return root;                                                                                                     // 5635
    }                                                                                                                  // 5636
    quadtree.x = function(_) {                                                                                         // 5637
      return arguments.length ? (x = _, quadtree) : x;                                                                 // 5638
    };                                                                                                                 // 5639
    quadtree.y = function(_) {                                                                                         // 5640
      return arguments.length ? (y = _, quadtree) : y;                                                                 // 5641
    };                                                                                                                 // 5642
    quadtree.extent = function(_) {                                                                                    // 5643
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];                                    // 5644
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0],                       // 5645
      y2 = +_[1][1];                                                                                                   // 5646
      return quadtree;                                                                                                 // 5647
    };                                                                                                                 // 5648
    quadtree.size = function(_) {                                                                                      // 5649
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];                                          // 5650
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];                               // 5651
      return quadtree;                                                                                                 // 5652
    };                                                                                                                 // 5653
    return quadtree;                                                                                                   // 5654
  };                                                                                                                   // 5655
  function d3_geom_quadtreeCompatX(d) {                                                                                // 5656
    return d.x;                                                                                                        // 5657
  }                                                                                                                    // 5658
  function d3_geom_quadtreeCompatY(d) {                                                                                // 5659
    return d.y;                                                                                                        // 5660
  }                                                                                                                    // 5661
  function d3_geom_quadtreeNode() {                                                                                    // 5662
    return {                                                                                                           // 5663
      leaf: true,                                                                                                      // 5664
      nodes: [],                                                                                                       // 5665
      point: null,                                                                                                     // 5666
      x: null,                                                                                                         // 5667
      y: null                                                                                                          // 5668
    };                                                                                                                 // 5669
  }                                                                                                                    // 5670
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {                                                            // 5671
    if (!f(node, x1, y1, x2, y2)) {                                                                                    // 5672
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;                                             // 5673
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);                                          // 5674
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);                                          // 5675
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);                                          // 5676
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);                                          // 5677
    }                                                                                                                  // 5678
  }                                                                                                                    // 5679
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {                                                          // 5680
    var minDistance2 = Infinity, closestPoint;                                                                         // 5681
    (function find(node, x1, y1, x2, y2) {                                                                             // 5682
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;                                                            // 5683
      if (point = node.point) {                                                                                        // 5684
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;                                    // 5685
        if (distance2 < minDistance2) {                                                                                // 5686
          var distance = Math.sqrt(minDistance2 = distance2);                                                          // 5687
          x0 = x - distance, y0 = y - distance;                                                                        // 5688
          x3 = x + distance, y3 = y + distance;                                                                        // 5689
          closestPoint = point;                                                                                        // 5690
        }                                                                                                              // 5691
      }                                                                                                                // 5692
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;           // 5693
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {                                                        // 5694
        if (node = children[i & 3]) switch (i & 3) {                                                                   // 5695
         case 0:                                                                                                       // 5696
          find(node, x1, y1, xm, ym);                                                                                  // 5697
          break;                                                                                                       // 5698
                                                                                                                       // 5699
         case 1:                                                                                                       // 5700
          find(node, xm, y1, x2, ym);                                                                                  // 5701
          break;                                                                                                       // 5702
                                                                                                                       // 5703
         case 2:                                                                                                       // 5704
          find(node, x1, ym, xm, y2);                                                                                  // 5705
          break;                                                                                                       // 5706
                                                                                                                       // 5707
         case 3:                                                                                                       // 5708
          find(node, xm, ym, x2, y2);                                                                                  // 5709
          break;                                                                                                       // 5710
        }                                                                                                              // 5711
      }                                                                                                                // 5712
    })(root, x0, y0, x3, y3);                                                                                          // 5713
    return closestPoint;                                                                                               // 5714
  }                                                                                                                    // 5715
  d3.interpolateRgb = d3_interpolateRgb;                                                                               // 5716
  function d3_interpolateRgb(a, b) {                                                                                   // 5717
    a = d3.rgb(a);                                                                                                     // 5718
    b = d3.rgb(b);                                                                                                     // 5719
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;                                     // 5720
    return function(t) {                                                                                               // 5721
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };                                                                                                                 // 5723
  }                                                                                                                    // 5724
  d3.interpolateObject = d3_interpolateObject;                                                                         // 5725
  function d3_interpolateObject(a, b) {                                                                                // 5726
    var i = {}, c = {}, k;                                                                                             // 5727
    for (k in a) {                                                                                                     // 5728
      if (k in b) {                                                                                                    // 5729
        i[k] = d3_interpolate(a[k], b[k]);                                                                             // 5730
      } else {                                                                                                         // 5731
        c[k] = a[k];                                                                                                   // 5732
      }                                                                                                                // 5733
    }                                                                                                                  // 5734
    for (k in b) {                                                                                                     // 5735
      if (!(k in a)) {                                                                                                 // 5736
        c[k] = b[k];                                                                                                   // 5737
      }                                                                                                                // 5738
    }                                                                                                                  // 5739
    return function(t) {                                                                                               // 5740
      for (k in i) c[k] = i[k](t);                                                                                     // 5741
      return c;                                                                                                        // 5742
    };                                                                                                                 // 5743
  }                                                                                                                    // 5744
  d3.interpolateNumber = d3_interpolateNumber;                                                                         // 5745
  function d3_interpolateNumber(a, b) {                                                                                // 5746
    a = +a, b = +b;                                                                                                    // 5747
    return function(t) {                                                                                               // 5748
      return a * (1 - t) + b * t;                                                                                      // 5749
    };                                                                                                                 // 5750
  }                                                                                                                    // 5751
  d3.interpolateString = d3_interpolateString;                                                                         // 5752
  function d3_interpolateString(a, b) {                                                                                // 5753
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";                                                                                            // 5755
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {                           // 5756
      if ((bs = bm.index) > bi) {                                                                                      // 5757
        bs = b.slice(bi, bs);                                                                                          // 5758
        if (s[i]) s[i] += bs; else s[++i] = bs;                                                                        // 5759
      }                                                                                                                // 5760
      if ((am = am[0]) === (bm = bm[0])) {                                                                             // 5761
        if (s[i]) s[i] += bm; else s[++i] = bm;                                                                        // 5762
      } else {                                                                                                         // 5763
        s[++i] = null;                                                                                                 // 5764
        q.push({                                                                                                       // 5765
          i: i,                                                                                                        // 5766
          x: d3_interpolateNumber(am, bm)                                                                              // 5767
        });                                                                                                            // 5768
      }                                                                                                                // 5769
      bi = d3_interpolate_numberB.lastIndex;                                                                           // 5770
    }                                                                                                                  // 5771
    if (bi < b.length) {                                                                                               // 5772
      bs = b.slice(bi);                                                                                                // 5773
      if (s[i]) s[i] += bs; else s[++i] = bs;                                                                          // 5774
    }                                                                                                                  // 5775
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {                                                            // 5776
      return b(t) + "";                                                                                                // 5777
    }) : function() {                                                                                                  // 5778
      return b;                                                                                                        // 5779
    } : (b = q.length, function(t) {                                                                                   // 5780
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);                                                         // 5781
      return s.join("");                                                                                               // 5782
    });                                                                                                                // 5783
  }                                                                                                                    // 5784
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;                                                                                     // 5786
  function d3_interpolate(a, b) {                                                                                      // 5787
    var i = d3.interpolators.length, f;                                                                                // 5788
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;                                                             // 5789
    return f;                                                                                                          // 5790
  }                                                                                                                    // 5791
  d3.interpolators = [ function(a, b) {                                                                                // 5792
    var t = typeof b;                                                                                                  // 5793
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];                                                                                                                 // 5795
  d3.interpolateArray = d3_interpolateArray;                                                                           // 5796
  function d3_interpolateArray(a, b) {                                                                                 // 5797
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;                            // 5798
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));                                                       // 5799
    for (;i < na; ++i) c[i] = a[i];                                                                                    // 5800
    for (;i < nb; ++i) c[i] = b[i];                                                                                    // 5801
    return function(t) {                                                                                               // 5802
      for (i = 0; i < n0; ++i) c[i] = x[i](t);                                                                         // 5803
      return c;                                                                                                        // 5804
    };                                                                                                                 // 5805
  }                                                                                                                    // 5806
  var d3_ease_default = function() {                                                                                   // 5807
    return d3_identity;                                                                                                // 5808
  };                                                                                                                   // 5809
  var d3_ease = d3.map({                                                                                               // 5810
    linear: d3_ease_default,                                                                                           // 5811
    poly: d3_ease_poly,                                                                                                // 5812
    quad: function() {                                                                                                 // 5813
      return d3_ease_quad;                                                                                             // 5814
    },                                                                                                                 // 5815
    cubic: function() {                                                                                                // 5816
      return d3_ease_cubic;                                                                                            // 5817
    },                                                                                                                 // 5818
    sin: function() {                                                                                                  // 5819
      return d3_ease_sin;                                                                                              // 5820
    },                                                                                                                 // 5821
    exp: function() {                                                                                                  // 5822
      return d3_ease_exp;                                                                                              // 5823
    },                                                                                                                 // 5824
    circle: function() {                                                                                               // 5825
      return d3_ease_circle;                                                                                           // 5826
    },                                                                                                                 // 5827
    elastic: d3_ease_elastic,                                                                                          // 5828
    back: d3_ease_back,                                                                                                // 5829
    bounce: function() {                                                                                               // 5830
      return d3_ease_bounce;                                                                                           // 5831
    }                                                                                                                  // 5832
  });                                                                                                                  // 5833
  var d3_ease_mode = d3.map({                                                                                          // 5834
    "in": d3_identity,                                                                                                 // 5835
    out: d3_ease_reverse,                                                                                              // 5836
    "in-out": d3_ease_reflect,                                                                                         // 5837
    "out-in": function(f) {                                                                                            // 5838
      return d3_ease_reflect(d3_ease_reverse(f));                                                                      // 5839
    }                                                                                                                  // 5840
  });                                                                                                                  // 5841
  d3.ease = function(name) {                                                                                           // 5842
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";            // 5843
    t = d3_ease.get(t) || d3_ease_default;                                                                             // 5844
    m = d3_ease_mode.get(m) || d3_identity;                                                                            // 5845
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));                                          // 5846
  };                                                                                                                   // 5847
  function d3_ease_clamp(f) {                                                                                          // 5848
    return function(t) {                                                                                               // 5849
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);                                                                           // 5850
    };                                                                                                                 // 5851
  }                                                                                                                    // 5852
  function d3_ease_reverse(f) {                                                                                        // 5853
    return function(t) {                                                                                               // 5854
      return 1 - f(1 - t);                                                                                             // 5855
    };                                                                                                                 // 5856
  }                                                                                                                    // 5857
  function d3_ease_reflect(f) {                                                                                        // 5858
    return function(t) {                                                                                               // 5859
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));                                                              // 5860
    };                                                                                                                 // 5861
  }                                                                                                                    // 5862
  function d3_ease_quad(t) {                                                                                           // 5863
    return t * t;                                                                                                      // 5864
  }                                                                                                                    // 5865
  function d3_ease_cubic(t) {                                                                                          // 5866
    return t * t * t;                                                                                                  // 5867
  }                                                                                                                    // 5868
  function d3_ease_cubicInOut(t) {                                                                                     // 5869
    if (t <= 0) return 0;                                                                                              // 5870
    if (t >= 1) return 1;                                                                                              // 5871
    var t2 = t * t, t3 = t2 * t;                                                                                       // 5872
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);                                                                // 5873
  }                                                                                                                    // 5874
  function d3_ease_poly(e) {                                                                                           // 5875
    return function(t) {                                                                                               // 5876
      return Math.pow(t, e);                                                                                           // 5877
    };                                                                                                                 // 5878
  }                                                                                                                    // 5879
  function d3_ease_sin(t) {                                                                                            // 5880
    return 1 - Math.cos(t * halfπ);                                                                                    // 5881
  }                                                                                                                    // 5882
  function d3_ease_exp(t) {                                                                                            // 5883
    return Math.pow(2, 10 * (t - 1));                                                                                  // 5884
  }                                                                                                                    // 5885
  function d3_ease_circle(t) {                                                                                         // 5886
    return 1 - Math.sqrt(1 - t * t);                                                                                   // 5887
  }                                                                                                                    // 5888
  function d3_ease_elastic(a, p) {                                                                                     // 5889
    var s;                                                                                                             // 5890
    if (arguments.length < 2) p = .45;                                                                                 // 5891
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;                                         // 5892
    return function(t) {                                                                                               // 5893
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);                                                 // 5894
    };                                                                                                                 // 5895
  }                                                                                                                    // 5896
  function d3_ease_back(s) {                                                                                           // 5897
    if (!s) s = 1.70158;                                                                                               // 5898
    return function(t) {                                                                                               // 5899
      return t * t * ((s + 1) * t - s);                                                                                // 5900
    };                                                                                                                 // 5901
  }                                                                                                                    // 5902
  function d3_ease_bounce(t) {                                                                                         // 5903
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }                                                                                                                    // 5905
  d3.interpolateHcl = d3_interpolateHcl;                                                                               // 5906
  function d3_interpolateHcl(a, b) {                                                                                   // 5907
    a = d3.hcl(a);                                                                                                     // 5908
    b = d3.hcl(b);                                                                                                     // 5909
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;                                     // 5910
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;                                                                  // 5911
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;     // 5912
    return function(t) {                                                                                               // 5913
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";                                                   // 5914
    };                                                                                                                 // 5915
  }                                                                                                                    // 5916
  d3.interpolateHsl = d3_interpolateHsl;                                                                               // 5917
  function d3_interpolateHsl(a, b) {                                                                                   // 5918
    a = d3.hsl(a);                                                                                                     // 5919
    b = d3.hsl(b);                                                                                                     // 5920
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;                                     // 5921
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;                                                                  // 5922
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;     // 5923
    return function(t) {                                                                                               // 5924
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";                                                   // 5925
    };                                                                                                                 // 5926
  }                                                                                                                    // 5927
  d3.interpolateLab = d3_interpolateLab;                                                                               // 5928
  function d3_interpolateLab(a, b) {                                                                                   // 5929
    a = d3.lab(a);                                                                                                     // 5930
    b = d3.lab(b);                                                                                                     // 5931
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;                                     // 5932
    return function(t) {                                                                                               // 5933
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";                                                   // 5934
    };                                                                                                                 // 5935
  }                                                                                                                    // 5936
  d3.interpolateRound = d3_interpolateRound;                                                                           // 5937
  function d3_interpolateRound(a, b) {                                                                                 // 5938
    b -= a;                                                                                                            // 5939
    return function(t) {                                                                                               // 5940
      return Math.round(a + b * t);                                                                                    // 5941
    };                                                                                                                 // 5942
  }                                                                                                                    // 5943
  d3.transform = function(string) {                                                                                    // 5944
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");                                                        // 5945
    return (d3.transform = function(string) {                                                                          // 5946
      if (string != null) {                                                                                            // 5947
        g.setAttribute("transform", string);                                                                           // 5948
        var t = g.transform.baseVal.consolidate();                                                                     // 5949
      }                                                                                                                // 5950
      return new d3_transform(t ? t.matrix : d3_transformIdentity);                                                    // 5951
    })(string);                                                                                                        // 5952
  };                                                                                                                   // 5953
  function d3_transform(m) {                                                                                           // 5954
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {                                                                               // 5956
      r0[0] *= -1;                                                                                                     // 5957
      r0[1] *= -1;                                                                                                     // 5958
      kx *= -1;                                                                                                        // 5959
      kz *= -1;                                                                                                        // 5960
    }                                                                                                                  // 5961
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;                            // 5962
    this.translate = [ m.e, m.f ];                                                                                     // 5963
    this.scale = [ kx, ky ];                                                                                           // 5964
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;                                                              // 5965
  }                                                                                                                    // 5966
  d3_transform.prototype.toString = function() {                                                                       // 5967
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };                                                                                                                   // 5969
  function d3_transformDot(a, b) {                                                                                     // 5970
    return a[0] * b[0] + a[1] * b[1];                                                                                  // 5971
  }                                                                                                                    // 5972
  function d3_transformNormalize(a) {                                                                                  // 5973
    var k = Math.sqrt(d3_transformDot(a, a));                                                                          // 5974
    if (k) {                                                                                                           // 5975
      a[0] /= k;                                                                                                       // 5976
      a[1] /= k;                                                                                                       // 5977
    }                                                                                                                  // 5978
    return k;                                                                                                          // 5979
  }                                                                                                                    // 5980
  function d3_transformCombine(a, b, k) {                                                                              // 5981
    a[0] += k * b[0];                                                                                                  // 5982
    a[1] += k * b[1];                                                                                                  // 5983
    return a;                                                                                                          // 5984
  }                                                                                                                    // 5985
  var d3_transformIdentity = {                                                                                         // 5986
    a: 1,                                                                                                              // 5987
    b: 0,                                                                                                              // 5988
    c: 0,                                                                                                              // 5989
    d: 1,                                                                                                              // 5990
    e: 0,                                                                                                              // 5991
    f: 0                                                                                                               // 5992
  };                                                                                                                   // 5993
  d3.interpolateTransform = d3_interpolateTransform;                                                                   // 5994
  function d3_interpolateTransformPop(s) {                                                                             // 5995
    return s.length ? s.pop() + "," : "";                                                                              // 5996
  }                                                                                                                    // 5997
  function d3_interpolateTranslate(ta, tb, s, q) {                                                                     // 5998
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {                                                                          // 5999
      var i = s.push("translate(", null, ",", null, ")");                                                              // 6000
      q.push({                                                                                                         // 6001
        i: i - 4,                                                                                                      // 6002
        x: d3_interpolateNumber(ta[0], tb[0])                                                                          // 6003
      }, {                                                                                                             // 6004
        i: i - 2,                                                                                                      // 6005
        x: d3_interpolateNumber(ta[1], tb[1])                                                                          // 6006
      });                                                                                                              // 6007
    } else if (tb[0] || tb[1]) {                                                                                       // 6008
      s.push("translate(" + tb + ")");                                                                                 // 6009
    }                                                                                                                  // 6010
  }                                                                                                                    // 6011
  function d3_interpolateRotate(ra, rb, s, q) {                                                                        // 6012
    if (ra !== rb) {                                                                                                   // 6013
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;                                                 // 6014
      q.push({                                                                                                         // 6015
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,                                           // 6016
        x: d3_interpolateNumber(ra, rb)                                                                                // 6017
      });                                                                                                              // 6018
    } else if (rb) {                                                                                                   // 6019
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");                                                    // 6020
    }                                                                                                                  // 6021
  }                                                                                                                    // 6022
  function d3_interpolateSkew(wa, wb, s, q) {                                                                          // 6023
    if (wa !== wb) {                                                                                                   // 6024
      q.push({                                                                                                         // 6025
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,                                            // 6026
        x: d3_interpolateNumber(wa, wb)                                                                                // 6027
      });                                                                                                              // 6028
    } else if (wb) {                                                                                                   // 6029
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");                                                     // 6030
    }                                                                                                                  // 6031
  }                                                                                                                    // 6032
  function d3_interpolateScale(ka, kb, s, q) {                                                                         // 6033
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {                                                                          // 6034
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");                                  // 6035
      q.push({                                                                                                         // 6036
        i: i - 4,                                                                                                      // 6037
        x: d3_interpolateNumber(ka[0], kb[0])                                                                          // 6038
      }, {                                                                                                             // 6039
        i: i - 2,                                                                                                      // 6040
        x: d3_interpolateNumber(ka[1], kb[1])                                                                          // 6041
      });                                                                                                              // 6042
    } else if (kb[0] !== 1 || kb[1] !== 1) {                                                                           // 6043
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");                                                     // 6044
    }                                                                                                                  // 6045
  }                                                                                                                    // 6046
  function d3_interpolateTransform(a, b) {                                                                             // 6047
    var s = [], q = [];                                                                                                // 6048
    a = d3.transform(a), b = d3.transform(b);                                                                          // 6049
    d3_interpolateTranslate(a.translate, b.translate, s, q);                                                           // 6050
    d3_interpolateRotate(a.rotate, b.rotate, s, q);                                                                    // 6051
    d3_interpolateSkew(a.skew, b.skew, s, q);                                                                          // 6052
    d3_interpolateScale(a.scale, b.scale, s, q);                                                                       // 6053
    a = b = null;                                                                                                      // 6054
    return function(t) {                                                                                               // 6055
      var i = -1, n = q.length, o;                                                                                     // 6056
      while (++i < n) s[(o = q[i]).i] = o.x(t);                                                                        // 6057
      return s.join("");                                                                                               // 6058
    };                                                                                                                 // 6059
  }                                                                                                                    // 6060
  function d3_uninterpolateNumber(a, b) {                                                                              // 6061
    b = (b -= a = +a) || 1 / b;                                                                                        // 6062
    return function(x) {                                                                                               // 6063
      return (x - a) / b;                                                                                              // 6064
    };                                                                                                                 // 6065
  }                                                                                                                    // 6066
  function d3_uninterpolateClamp(a, b) {                                                                               // 6067
    b = (b -= a = +a) || 1 / b;                                                                                        // 6068
    return function(x) {                                                                                               // 6069
      return Math.max(0, Math.min(1, (x - a) / b));                                                                    // 6070
    };                                                                                                                 // 6071
  }                                                                                                                    // 6072
  d3.layout = {};                                                                                                      // 6073
  d3.layout.bundle = function() {                                                                                      // 6074
    return function(links) {                                                                                           // 6075
      var paths = [], i = -1, n = links.length;                                                                        // 6076
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));                                                      // 6077
      return paths;                                                                                                    // 6078
    };                                                                                                                 // 6079
  };                                                                                                                   // 6080
  function d3_layout_bundlePath(link) {                                                                                // 6081
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {                                                                                            // 6083
      start = start.parent;                                                                                            // 6084
      points.push(start);                                                                                              // 6085
    }                                                                                                                  // 6086
    var k = points.length;                                                                                             // 6087
    while (end !== lca) {                                                                                              // 6088
      points.splice(k, 0, end);                                                                                        // 6089
      end = end.parent;                                                                                                // 6090
    }                                                                                                                  // 6091
    return points;                                                                                                     // 6092
  }                                                                                                                    // 6093
  function d3_layout_bundleAncestors(node) {                                                                           // 6094
    var ancestors = [], parent = node.parent;                                                                          // 6095
    while (parent != null) {                                                                                           // 6096
      ancestors.push(node);                                                                                            // 6097
      node = parent;                                                                                                   // 6098
      parent = parent.parent;                                                                                          // 6099
    }                                                                                                                  // 6100
    ancestors.push(node);                                                                                              // 6101
    return ancestors;                                                                                                  // 6102
  }                                                                                                                    // 6103
  function d3_layout_bundleLeastCommonAncestor(a, b) {                                                                 // 6104
    if (a === b) return a;                                                                                             // 6105
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {                                                                                          // 6107
      sharedNode = aNode;                                                                                              // 6108
      aNode = aNodes.pop();                                                                                            // 6109
      bNode = bNodes.pop();                                                                                            // 6110
    }                                                                                                                  // 6111
    return sharedNode;                                                                                                 // 6112
  }                                                                                                                    // 6113
  d3.layout.chord = function() {                                                                                       // 6114
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;                     // 6115
    function relayout() {                                                                                              // 6116
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;                // 6117
      chords = [];                                                                                                     // 6118
      groups = [];                                                                                                     // 6119
      k = 0, i = -1;                                                                                                   // 6120
      while (++i < n) {                                                                                                // 6121
        x = 0, j = -1;                                                                                                 // 6122
        while (++j < n) {                                                                                              // 6123
          x += matrix[i][j];                                                                                           // 6124
        }                                                                                                              // 6125
        groupSums.push(x);                                                                                             // 6126
        subgroupIndex.push(d3.range(n));                                                                               // 6127
        k += x;                                                                                                        // 6128
      }                                                                                                                // 6129
      if (sortGroups) {                                                                                                // 6130
        groupIndex.sort(function(a, b) {                                                                               // 6131
          return sortGroups(groupSums[a], groupSums[b]);                                                               // 6132
        });                                                                                                            // 6133
      }                                                                                                                // 6134
      if (sortSubgroups) {                                                                                             // 6135
        subgroupIndex.forEach(function(d, i) {                                                                         // 6136
          d.sort(function(a, b) {                                                                                      // 6137
            return sortSubgroups(matrix[i][a], matrix[i][b]);                                                          // 6138
          });                                                                                                          // 6139
        });                                                                                                            // 6140
      }                                                                                                                // 6141
      k = (τ - padding * n) / k;                                                                                       // 6142
      x = 0, i = -1;                                                                                                   // 6143
      while (++i < n) {                                                                                                // 6144
        x0 = x, j = -1;                                                                                                // 6145
        while (++j < n) {                                                                                              // 6146
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;              // 6147
          subgroups[di + "-" + dj] = {                                                                                 // 6148
            index: di,                                                                                                 // 6149
            subindex: dj,                                                                                              // 6150
            startAngle: a0,                                                                                            // 6151
            endAngle: a1,                                                                                              // 6152
            value: v                                                                                                   // 6153
          };                                                                                                           // 6154
        }                                                                                                              // 6155
        groups[di] = {                                                                                                 // 6156
          index: di,                                                                                                   // 6157
          startAngle: x0,                                                                                              // 6158
          endAngle: x,                                                                                                 // 6159
          value: (x - x0) / k                                                                                          // 6160
        };                                                                                                             // 6161
        x += padding;                                                                                                  // 6162
      }                                                                                                                // 6163
      i = -1;                                                                                                          // 6164
      while (++i < n) {                                                                                                // 6165
        j = i - 1;                                                                                                     // 6166
        while (++j < n) {                                                                                              // 6167
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];                                        // 6168
          if (source.value || target.value) {                                                                          // 6169
            chords.push(source.value < target.value ? {                                                                // 6170
              source: target,                                                                                          // 6171
              target: source                                                                                           // 6172
            } : {                                                                                                      // 6173
              source: source,                                                                                          // 6174
              target: target                                                                                           // 6175
            });                                                                                                        // 6176
          }                                                                                                            // 6177
        }                                                                                                              // 6178
      }                                                                                                                // 6179
      if (sortChords) resort();                                                                                        // 6180
    }                                                                                                                  // 6181
    function resort() {                                                                                                // 6182
      chords.sort(function(a, b) {                                                                                     // 6183
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);               // 6184
      });                                                                                                              // 6185
    }                                                                                                                  // 6186
    chord.matrix = function(x) {                                                                                       // 6187
      if (!arguments.length) return matrix;                                                                            // 6188
      n = (matrix = x) && matrix.length;                                                                               // 6189
      chords = groups = null;                                                                                          // 6190
      return chord;                                                                                                    // 6191
    };                                                                                                                 // 6192
    chord.padding = function(x) {                                                                                      // 6193
      if (!arguments.length) return padding;                                                                           // 6194
      padding = x;                                                                                                     // 6195
      chords = groups = null;                                                                                          // 6196
      return chord;                                                                                                    // 6197
    };                                                                                                                 // 6198
    chord.sortGroups = function(x) {                                                                                   // 6199
      if (!arguments.length) return sortGroups;                                                                        // 6200
      sortGroups = x;                                                                                                  // 6201
      chords = groups = null;                                                                                          // 6202
      return chord;                                                                                                    // 6203
    };                                                                                                                 // 6204
    chord.sortSubgroups = function(x) {                                                                                // 6205
      if (!arguments.length) return sortSubgroups;                                                                     // 6206
      sortSubgroups = x;                                                                                               // 6207
      chords = null;                                                                                                   // 6208
      return chord;                                                                                                    // 6209
    };                                                                                                                 // 6210
    chord.sortChords = function(x) {                                                                                   // 6211
      if (!arguments.length) return sortChords;                                                                        // 6212
      sortChords = x;                                                                                                  // 6213
      if (chords) resort();                                                                                            // 6214
      return chord;                                                                                                    // 6215
    };                                                                                                                 // 6216
    chord.chords = function() {                                                                                        // 6217
      if (!chords) relayout();                                                                                         // 6218
      return chords;                                                                                                   // 6219
    };                                                                                                                 // 6220
    chord.groups = function() {                                                                                        // 6221
      if (!groups) relayout();                                                                                         // 6222
      return groups;                                                                                                   // 6223
    };                                                                                                                 // 6224
    return chord;                                                                                                      // 6225
  };                                                                                                                   // 6226
  d3.layout.force = function() {                                                                                       // 6227
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {                                                                                           // 6229
      return function(quad, x1, _, x2) {                                                                               // 6230
        if (quad.point !== node) {                                                                                     // 6231
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;                      // 6232
          if (dw * dw / theta2 < dn) {                                                                                 // 6233
            if (dn < chargeDistance2) {                                                                                // 6234
              var k = quad.charge / dn;                                                                                // 6235
              node.px -= dx * k;                                                                                       // 6236
              node.py -= dy * k;                                                                                       // 6237
            }                                                                                                          // 6238
            return true;                                                                                               // 6239
          }                                                                                                            // 6240
          if (quad.point && dn && dn < chargeDistance2) {                                                              // 6241
            var k = quad.pointCharge / dn;                                                                             // 6242
            node.px -= dx * k;                                                                                         // 6243
            node.py -= dy * k;                                                                                         // 6244
          }                                                                                                            // 6245
        }                                                                                                              // 6246
        return !quad.charge;                                                                                           // 6247
      };                                                                                                               // 6248
    }                                                                                                                  // 6249
    force.tick = function() {                                                                                          // 6250
      if ((alpha *= .99) < .005) {                                                                                     // 6251
        timer = null;                                                                                                  // 6252
        event.end({                                                                                                    // 6253
          type: "end",                                                                                                 // 6254
          alpha: alpha = 0                                                                                             // 6255
        });                                                                                                            // 6256
        return true;                                                                                                   // 6257
      }                                                                                                                // 6258
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;                                               // 6259
      for (i = 0; i < m; ++i) {                                                                                        // 6260
        o = links[i];                                                                                                  // 6261
        s = o.source;                                                                                                  // 6262
        t = o.target;                                                                                                  // 6263
        x = t.x - s.x;                                                                                                 // 6264
        y = t.y - s.y;                                                                                                 // 6265
        if (l = x * x + y * y) {                                                                                       // 6266
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;                                          // 6267
          x *= l;                                                                                                      // 6268
          y *= l;                                                                                                      // 6269
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);                                // 6270
          t.y -= y * k;                                                                                                // 6271
          s.x += x * (k = 1 - k);                                                                                      // 6272
          s.y += y * k;                                                                                                // 6273
        }                                                                                                              // 6274
      }                                                                                                                // 6275
      if (k = alpha * gravity) {                                                                                       // 6276
        x = size[0] / 2;                                                                                               // 6277
        y = size[1] / 2;                                                                                               // 6278
        i = -1;                                                                                                        // 6279
        if (k) while (++i < n) {                                                                                       // 6280
          o = nodes[i];                                                                                                // 6281
          o.x += (x - o.x) * k;                                                                                        // 6282
          o.y += (y - o.y) * k;                                                                                        // 6283
        }                                                                                                              // 6284
      }                                                                                                                // 6285
      if (charge) {                                                                                                    // 6286
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);                                        // 6287
        i = -1;                                                                                                        // 6288
        while (++i < n) {                                                                                              // 6289
          if (!(o = nodes[i]).fixed) {                                                                                 // 6290
            q.visit(repulse(o));                                                                                       // 6291
          }                                                                                                            // 6292
        }                                                                                                              // 6293
      }                                                                                                                // 6294
      i = -1;                                                                                                          // 6295
      while (++i < n) {                                                                                                // 6296
        o = nodes[i];                                                                                                  // 6297
        if (o.fixed) {                                                                                                 // 6298
          o.x = o.px;                                                                                                  // 6299
          o.y = o.py;                                                                                                  // 6300
        } else {                                                                                                       // 6301
          o.x -= (o.px - (o.px = o.x)) * friction;                                                                     // 6302
          o.y -= (o.py - (o.py = o.y)) * friction;                                                                     // 6303
        }                                                                                                              // 6304
      }                                                                                                                // 6305
      event.tick({                                                                                                     // 6306
        type: "tick",                                                                                                  // 6307
        alpha: alpha                                                                                                   // 6308
      });                                                                                                              // 6309
    };                                                                                                                 // 6310
    force.nodes = function(x) {                                                                                        // 6311
      if (!arguments.length) return nodes;                                                                             // 6312
      nodes = x;                                                                                                       // 6313
      return force;                                                                                                    // 6314
    };                                                                                                                 // 6315
    force.links = function(x) {                                                                                        // 6316
      if (!arguments.length) return links;                                                                             // 6317
      links = x;                                                                                                       // 6318
      return force;                                                                                                    // 6319
    };                                                                                                                 // 6320
    force.size = function(x) {                                                                                         // 6321
      if (!arguments.length) return size;                                                                              // 6322
      size = x;                                                                                                        // 6323
      return force;                                                                                                    // 6324
    };                                                                                                                 // 6325
    force.linkDistance = function(x) {                                                                                 // 6326
      if (!arguments.length) return linkDistance;                                                                      // 6327
      linkDistance = typeof x === "function" ? x : +x;                                                                 // 6328
      return force;                                                                                                    // 6329
    };                                                                                                                 // 6330
    force.distance = force.linkDistance;                                                                               // 6331
    force.linkStrength = function(x) {                                                                                 // 6332
      if (!arguments.length) return linkStrength;                                                                      // 6333
      linkStrength = typeof x === "function" ? x : +x;                                                                 // 6334
      return force;                                                                                                    // 6335
    };                                                                                                                 // 6336
    force.friction = function(x) {                                                                                     // 6337
      if (!arguments.length) return friction;                                                                          // 6338
      friction = +x;                                                                                                   // 6339
      return force;                                                                                                    // 6340
    };                                                                                                                 // 6341
    force.charge = function(x) {                                                                                       // 6342
      if (!arguments.length) return charge;                                                                            // 6343
      charge = typeof x === "function" ? x : +x;                                                                       // 6344
      return force;                                                                                                    // 6345
    };                                                                                                                 // 6346
    force.chargeDistance = function(x) {                                                                               // 6347
      if (!arguments.length) return Math.sqrt(chargeDistance2);                                                        // 6348
      chargeDistance2 = x * x;                                                                                         // 6349
      return force;                                                                                                    // 6350
    };                                                                                                                 // 6351
    force.gravity = function(x) {                                                                                      // 6352
      if (!arguments.length) return gravity;                                                                           // 6353
      gravity = +x;                                                                                                    // 6354
      return force;                                                                                                    // 6355
    };                                                                                                                 // 6356
    force.theta = function(x) {                                                                                        // 6357
      if (!arguments.length) return Math.sqrt(theta2);                                                                 // 6358
      theta2 = x * x;                                                                                                  // 6359
      return force;                                                                                                    // 6360
    };                                                                                                                 // 6361
    force.alpha = function(x) {                                                                                        // 6362
      if (!arguments.length) return alpha;                                                                             // 6363
      x = +x;                                                                                                          // 6364
      if (alpha) {                                                                                                     // 6365
        if (x > 0) {                                                                                                   // 6366
          alpha = x;                                                                                                   // 6367
        } else {                                                                                                       // 6368
          timer.c = null, timer.t = NaN, timer = null;                                                                 // 6369
          event.start({                                                                                                // 6370
            type: "end",                                                                                               // 6371
            alpha: alpha = 0                                                                                           // 6372
          });                                                                                                          // 6373
        }                                                                                                              // 6374
      } else if (x > 0) {                                                                                              // 6375
        event.start({                                                                                                  // 6376
          type: "start",                                                                                               // 6377
          alpha: alpha = x                                                                                             // 6378
        });                                                                                                            // 6379
        timer = d3_timer(force.tick);                                                                                  // 6380
      }                                                                                                                // 6381
      return force;                                                                                                    // 6382
    };                                                                                                                 // 6383
    force.start = function() {                                                                                         // 6384
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;                               // 6385
      for (i = 0; i < n; ++i) {                                                                                        // 6386
        (o = nodes[i]).index = i;                                                                                      // 6387
        o.weight = 0;                                                                                                  // 6388
      }                                                                                                                // 6389
      for (i = 0; i < m; ++i) {                                                                                        // 6390
        o = links[i];                                                                                                  // 6391
        if (typeof o.source == "number") o.source = nodes[o.source];                                                   // 6392
        if (typeof o.target == "number") o.target = nodes[o.target];                                                   // 6393
        ++o.source.weight;                                                                                             // 6394
        ++o.target.weight;                                                                                             // 6395
      }                                                                                                                // 6396
      for (i = 0; i < n; ++i) {                                                                                        // 6397
        o = nodes[i];                                                                                                  // 6398
        if (isNaN(o.x)) o.x = position("x", w);                                                                        // 6399
        if (isNaN(o.y)) o.y = position("y", h);                                                                        // 6400
        if (isNaN(o.px)) o.px = o.x;                                                                                   // 6401
        if (isNaN(o.py)) o.py = o.y;                                                                                   // 6402
      }                                                                                                                // 6403
      distances = [];                                                                                                  // 6404
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];                                                                                                  // 6406
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];                                                                                                    // 6408
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {                                                                             // 6410
        if (!neighbors) {                                                                                              // 6411
          neighbors = new Array(n);                                                                                    // 6412
          for (j = 0; j < n; ++j) {                                                                                    // 6413
            neighbors[j] = [];                                                                                         // 6414
          }                                                                                                            // 6415
          for (j = 0; j < m; ++j) {                                                                                    // 6416
            var o = links[j];                                                                                          // 6417
            neighbors[o.source.index].push(o.target);                                                                  // 6418
            neighbors[o.target.index].push(o.source);                                                                  // 6419
          }                                                                                                            // 6420
        }                                                                                                              // 6421
        var candidates = neighbors[i], j = -1, l = candidates.length, x;                                               // 6422
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;                                            // 6423
        return Math.random() * size;                                                                                   // 6424
      }                                                                                                                // 6425
      return force.resume();                                                                                           // 6426
    };                                                                                                                 // 6427
    force.resume = function() {                                                                                        // 6428
      return force.alpha(.1);                                                                                          // 6429
    };                                                                                                                 // 6430
    force.stop = function() {                                                                                          // 6431
      return force.alpha(0);                                                                                           // 6432
    };                                                                                                                 // 6433
    force.drag = function() {                                                                                          // 6434
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;                                                                              // 6436
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);   // 6437
    };                                                                                                                 // 6438
    function dragmove(d) {                                                                                             // 6439
      d.px = d3.event.x, d.py = d3.event.y;                                                                            // 6440
      force.resume();                                                                                                  // 6441
    }                                                                                                                  // 6442
    return d3.rebind(force, event, "on");                                                                              // 6443
  };                                                                                                                   // 6444
  function d3_layout_forceDragstart(d) {                                                                               // 6445
    d.fixed |= 2;                                                                                                      // 6446
  }                                                                                                                    // 6447
  function d3_layout_forceDragend(d) {                                                                                 // 6448
    d.fixed &= ~6;                                                                                                     // 6449
  }                                                                                                                    // 6450
  function d3_layout_forceMouseover(d) {                                                                               // 6451
    d.fixed |= 4;                                                                                                      // 6452
    d.px = d.x, d.py = d.y;                                                                                            // 6453
  }                                                                                                                    // 6454
  function d3_layout_forceMouseout(d) {                                                                                // 6455
    d.fixed &= ~4;                                                                                                     // 6456
  }                                                                                                                    // 6457
  function d3_layout_forceAccumulate(quad, alpha, charges) {                                                           // 6458
    var cx = 0, cy = 0;                                                                                                // 6459
    quad.charge = 0;                                                                                                   // 6460
    if (!quad.leaf) {                                                                                                  // 6461
      var nodes = quad.nodes, n = nodes.length, i = -1, c;                                                             // 6462
      while (++i < n) {                                                                                                // 6463
        c = nodes[i];                                                                                                  // 6464
        if (c == null) continue;                                                                                       // 6465
        d3_layout_forceAccumulate(c, alpha, charges);                                                                  // 6466
        quad.charge += c.charge;                                                                                       // 6467
        cx += c.charge * c.cx;                                                                                         // 6468
        cy += c.charge * c.cy;                                                                                         // 6469
      }                                                                                                                // 6470
    }                                                                                                                  // 6471
    if (quad.point) {                                                                                                  // 6472
      if (!quad.leaf) {                                                                                                // 6473
        quad.point.x += Math.random() - .5;                                                                            // 6474
        quad.point.y += Math.random() - .5;                                                                            // 6475
      }                                                                                                                // 6476
      var k = alpha * charges[quad.point.index];                                                                       // 6477
      quad.charge += quad.pointCharge = k;                                                                             // 6478
      cx += k * quad.point.x;                                                                                          // 6479
      cy += k * quad.point.y;                                                                                          // 6480
    }                                                                                                                  // 6481
    quad.cx = cx / quad.charge;                                                                                        // 6482
    quad.cy = cy / quad.charge;                                                                                        // 6483
  }                                                                                                                    // 6484
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;    // 6485
  d3.layout.hierarchy = function() {                                                                                   // 6486
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;      // 6487
    function hierarchy(root) {                                                                                         // 6488
      var stack = [ root ], nodes = [], node;                                                                          // 6489
      root.depth = 0;                                                                                                  // 6490
      while ((node = stack.pop()) != null) {                                                                           // 6491
        nodes.push(node);                                                                                              // 6492
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {                            // 6493
          var n, childs, child;                                                                                        // 6494
          while (--n >= 0) {                                                                                           // 6495
            stack.push(child = childs[n]);                                                                             // 6496
            child.parent = node;                                                                                       // 6497
            child.depth = node.depth + 1;                                                                              // 6498
          }                                                                                                            // 6499
          if (value) node.value = 0;                                                                                   // 6500
          node.children = childs;                                                                                      // 6501
        } else {                                                                                                       // 6502
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;                                       // 6503
          delete node.children;                                                                                        // 6504
        }                                                                                                              // 6505
      }                                                                                                                // 6506
      d3_layout_hierarchyVisitAfter(root, function(node) {                                                             // 6507
        var childs, parent;                                                                                            // 6508
        if (sort && (childs = node.children)) childs.sort(sort);                                                       // 6509
        if (value && (parent = node.parent)) parent.value += node.value;                                               // 6510
      });                                                                                                              // 6511
      return nodes;                                                                                                    // 6512
    }                                                                                                                  // 6513
    hierarchy.sort = function(x) {                                                                                     // 6514
      if (!arguments.length) return sort;                                                                              // 6515
      sort = x;                                                                                                        // 6516
      return hierarchy;                                                                                                // 6517
    };                                                                                                                 // 6518
    hierarchy.children = function(x) {                                                                                 // 6519
      if (!arguments.length) return children;                                                                          // 6520
      children = x;                                                                                                    // 6521
      return hierarchy;                                                                                                // 6522
    };                                                                                                                 // 6523
    hierarchy.value = function(x) {                                                                                    // 6524
      if (!arguments.length) return value;                                                                             // 6525
      value = x;                                                                                                       // 6526
      return hierarchy;                                                                                                // 6527
    };                                                                                                                 // 6528
    hierarchy.revalue = function(root) {                                                                               // 6529
      if (value) {                                                                                                     // 6530
        d3_layout_hierarchyVisitBefore(root, function(node) {                                                          // 6531
          if (node.children) node.value = 0;                                                                           // 6532
        });                                                                                                            // 6533
        d3_layout_hierarchyVisitAfter(root, function(node) {                                                           // 6534
          var parent;                                                                                                  // 6535
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;                              // 6536
          if (parent = node.parent) parent.value += node.value;                                                        // 6537
        });                                                                                                            // 6538
      }                                                                                                                // 6539
      return root;                                                                                                     // 6540
    };                                                                                                                 // 6541
    return hierarchy;                                                                                                  // 6542
  };                                                                                                                   // 6543
  function d3_layout_hierarchyRebind(object, hierarchy) {                                                              // 6544
    d3.rebind(object, hierarchy, "sort", "children", "value");                                                         // 6545
    object.nodes = object;                                                                                             // 6546
    object.links = d3_layout_hierarchyLinks;                                                                           // 6547
    return object;                                                                                                     // 6548
  }                                                                                                                    // 6549
  function d3_layout_hierarchyVisitBefore(node, callback) {                                                            // 6550
    var nodes = [ node ];                                                                                              // 6551
    while ((node = nodes.pop()) != null) {                                                                             // 6552
      callback(node);                                                                                                  // 6553
      if ((children = node.children) && (n = children.length)) {                                                       // 6554
        var n, children;                                                                                               // 6555
        while (--n >= 0) nodes.push(children[n]);                                                                      // 6556
      }                                                                                                                // 6557
    }                                                                                                                  // 6558
  }                                                                                                                    // 6559
  function d3_layout_hierarchyVisitAfter(node, callback) {                                                             // 6560
    var nodes = [ node ], nodes2 = [];                                                                                 // 6561
    while ((node = nodes.pop()) != null) {                                                                             // 6562
      nodes2.push(node);                                                                                               // 6563
      if ((children = node.children) && (n = children.length)) {                                                       // 6564
        var i = -1, n, children;                                                                                       // 6565
        while (++i < n) nodes.push(children[i]);                                                                       // 6566
      }                                                                                                                // 6567
    }                                                                                                                  // 6568
    while ((node = nodes2.pop()) != null) {                                                                            // 6569
      callback(node);                                                                                                  // 6570
    }                                                                                                                  // 6571
  }                                                                                                                    // 6572
  function d3_layout_hierarchyChildren(d) {                                                                            // 6573
    return d.children;                                                                                                 // 6574
  }                                                                                                                    // 6575
  function d3_layout_hierarchyValue(d) {                                                                               // 6576
    return d.value;                                                                                                    // 6577
  }                                                                                                                    // 6578
  function d3_layout_hierarchySort(a, b) {                                                                             // 6579
    return b.value - a.value;                                                                                          // 6580
  }                                                                                                                    // 6581
  function d3_layout_hierarchyLinks(nodes) {                                                                           // 6582
    return d3.merge(nodes.map(function(parent) {                                                                       // 6583
      return (parent.children || []).map(function(child) {                                                             // 6584
        return {                                                                                                       // 6585
          source: parent,                                                                                              // 6586
          target: child                                                                                                // 6587
        };                                                                                                             // 6588
      });                                                                                                              // 6589
    }));                                                                                                               // 6590
  }                                                                                                                    // 6591
  d3.layout.partition = function() {                                                                                   // 6592
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];                                                            // 6593
    function position(node, x, dx, dy) {                                                                               // 6594
      var children = node.children;                                                                                    // 6595
      node.x = x;                                                                                                      // 6596
      node.y = node.depth * dy;                                                                                        // 6597
      node.dx = dx;                                                                                                    // 6598
      node.dy = dy;                                                                                                    // 6599
      if (children && (n = children.length)) {                                                                         // 6600
        var i = -1, n, c, d;                                                                                           // 6601
        dx = node.value ? dx / node.value : 0;                                                                         // 6602
        while (++i < n) {                                                                                              // 6603
          position(c = children[i], x, d = c.value * dx, dy);                                                          // 6604
          x += d;                                                                                                      // 6605
        }                                                                                                              // 6606
      }                                                                                                                // 6607
    }                                                                                                                  // 6608
    function depth(node) {                                                                                             // 6609
      var children = node.children, d = 0;                                                                             // 6610
      if (children && (n = children.length)) {                                                                         // 6611
        var i = -1, n;                                                                                                 // 6612
        while (++i < n) d = Math.max(d, depth(children[i]));                                                           // 6613
      }                                                                                                                // 6614
      return 1 + d;                                                                                                    // 6615
    }                                                                                                                  // 6616
    function partition(d, i) {                                                                                         // 6617
      var nodes = hierarchy.call(this, d, i);                                                                          // 6618
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));                                                       // 6619
      return nodes;                                                                                                    // 6620
    }                                                                                                                  // 6621
    partition.size = function(x) {                                                                                     // 6622
      if (!arguments.length) return size;                                                                              // 6623
      size = x;                                                                                                        // 6624
      return partition;                                                                                                // 6625
    };                                                                                                                 // 6626
    return d3_layout_hierarchyRebind(partition, hierarchy);                                                            // 6627
  };                                                                                                                   // 6628
  d3.layout.pie = function() {                                                                                         // 6629
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;                   // 6630
    function pie(data) {                                                                                               // 6631
      var n = data.length, values = data.map(function(d, i) {                                                          // 6632
        return +value.call(pie, d, i);                                                                                 // 6633
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {                                // 6635
        return values[j] - values[i];                                                                                  // 6636
      } : function(i, j) {                                                                                             // 6637
        return sort(data[i], data[j]);                                                                                 // 6638
      });                                                                                                              // 6639
      index.forEach(function(i) {                                                                                      // 6640
        arcs[i] = {                                                                                                    // 6641
          data: data[i],                                                                                               // 6642
          value: v = values[i],                                                                                        // 6643
          startAngle: a,                                                                                               // 6644
          endAngle: a += v * k + pa,                                                                                   // 6645
          padAngle: p                                                                                                  // 6646
        };                                                                                                             // 6647
      });                                                                                                              // 6648
      return arcs;                                                                                                     // 6649
    }                                                                                                                  // 6650
    pie.value = function(_) {                                                                                          // 6651
      if (!arguments.length) return value;                                                                             // 6652
      value = _;                                                                                                       // 6653
      return pie;                                                                                                      // 6654
    };                                                                                                                 // 6655
    pie.sort = function(_) {                                                                                           // 6656
      if (!arguments.length) return sort;                                                                              // 6657
      sort = _;                                                                                                        // 6658
      return pie;                                                                                                      // 6659
    };                                                                                                                 // 6660
    pie.startAngle = function(_) {                                                                                     // 6661
      if (!arguments.length) return startAngle;                                                                        // 6662
      startAngle = _;                                                                                                  // 6663
      return pie;                                                                                                      // 6664
    };                                                                                                                 // 6665
    pie.endAngle = function(_) {                                                                                       // 6666
      if (!arguments.length) return endAngle;                                                                          // 6667
      endAngle = _;                                                                                                    // 6668
      return pie;                                                                                                      // 6669
    };                                                                                                                 // 6670
    pie.padAngle = function(_) {                                                                                       // 6671
      if (!arguments.length) return padAngle;                                                                          // 6672
      padAngle = _;                                                                                                    // 6673
      return pie;                                                                                                      // 6674
    };                                                                                                                 // 6675
    return pie;                                                                                                        // 6676
  };                                                                                                                   // 6677
  var d3_layout_pieSortByValue = {};                                                                                   // 6678
  d3.layout.stack = function() {                                                                                       // 6679
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {                                                                                      // 6681
      if (!(n = data.length)) return data;                                                                             // 6682
      var series = data.map(function(d, i) {                                                                           // 6683
        return values.call(stack, d, i);                                                                               // 6684
      });                                                                                                              // 6685
      var points = series.map(function(d) {                                                                            // 6686
        return d.map(function(v, i) {                                                                                  // 6687
          return [ x.call(stack, v, i), y.call(stack, v, i) ];                                                         // 6688
        });                                                                                                            // 6689
      });                                                                                                              // 6690
      var orders = order.call(stack, points, index);                                                                   // 6691
      series = d3.permute(series, orders);                                                                             // 6692
      points = d3.permute(points, orders);                                                                             // 6693
      var offsets = offset.call(stack, points, index);                                                                 // 6694
      var m = series[0].length, n, i, j, o;                                                                            // 6695
      for (j = 0; j < m; ++j) {                                                                                        // 6696
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);                                                // 6697
        for (i = 1; i < n; ++i) {                                                                                      // 6698
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);                                    // 6699
        }                                                                                                              // 6700
      }                                                                                                                // 6701
      return data;                                                                                                     // 6702
    }                                                                                                                  // 6703
    stack.values = function(x) {                                                                                       // 6704
      if (!arguments.length) return values;                                                                            // 6705
      values = x;                                                                                                      // 6706
      return stack;                                                                                                    // 6707
    };                                                                                                                 // 6708
    stack.order = function(x) {                                                                                        // 6709
      if (!arguments.length) return order;                                                                             // 6710
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;               // 6711
      return stack;                                                                                                    // 6712
    };                                                                                                                 // 6713
    stack.offset = function(x) {                                                                                       // 6714
      if (!arguments.length) return offset;                                                                            // 6715
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;               // 6716
      return stack;                                                                                                    // 6717
    };                                                                                                                 // 6718
    stack.x = function(z) {                                                                                            // 6719
      if (!arguments.length) return x;                                                                                 // 6720
      x = z;                                                                                                           // 6721
      return stack;                                                                                                    // 6722
    };                                                                                                                 // 6723
    stack.y = function(z) {                                                                                            // 6724
      if (!arguments.length) return y;                                                                                 // 6725
      y = z;                                                                                                           // 6726
      return stack;                                                                                                    // 6727
    };                                                                                                                 // 6728
    stack.out = function(z) {                                                                                          // 6729
      if (!arguments.length) return out;                                                                               // 6730
      out = z;                                                                                                         // 6731
      return stack;                                                                                                    // 6732
    };                                                                                                                 // 6733
    return stack;                                                                                                      // 6734
  };                                                                                                                   // 6735
  function d3_layout_stackX(d) {                                                                                       // 6736
    return d.x;                                                                                                        // 6737
  }                                                                                                                    // 6738
  function d3_layout_stackY(d) {                                                                                       // 6739
    return d.y;                                                                                                        // 6740
  }                                                                                                                    // 6741
  function d3_layout_stackOut(d, y0, y) {                                                                              // 6742
    d.y0 = y0;                                                                                                         // 6743
    d.y = y;                                                                                                           // 6744
  }                                                                                                                    // 6745
  var d3_layout_stackOrders = d3.map({                                                                                 // 6746
    "inside-out": function(data) {                                                                                     // 6747
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];                                                                                        // 6749
      }), top = 0, bottom = 0, tops = [], bottoms = [];                                                                // 6750
      for (i = 0; i < n; ++i) {                                                                                        // 6751
        j = index[i];                                                                                                  // 6752
        if (top < bottom) {                                                                                            // 6753
          top += sums[j];                                                                                              // 6754
          tops.push(j);                                                                                                // 6755
        } else {                                                                                                       // 6756
          bottom += sums[j];                                                                                           // 6757
          bottoms.push(j);                                                                                             // 6758
        }                                                                                                              // 6759
      }                                                                                                                // 6760
      return bottoms.reverse().concat(tops);                                                                           // 6761
    },                                                                                                                 // 6762
    reverse: function(data) {                                                                                          // 6763
      return d3.range(data.length).reverse();                                                                          // 6764
    },                                                                                                                 // 6765
    "default": d3_layout_stackOrderDefault                                                                             // 6766
  });                                                                                                                  // 6767
  var d3_layout_stackOffsets = d3.map({                                                                                // 6768
    silhouette: function(data) {                                                                                       // 6769
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];                                   // 6770
      for (j = 0; j < m; ++j) {                                                                                        // 6771
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];                                                             // 6772
        if (o > max) max = o;                                                                                          // 6773
        sums.push(o);                                                                                                  // 6774
      }                                                                                                                // 6775
      for (j = 0; j < m; ++j) {                                                                                        // 6776
        y0[j] = (max - sums[j]) / 2;                                                                                   // 6777
      }                                                                                                                // 6778
      return y0;                                                                                                       // 6779
    },                                                                                                                 // 6780
    wiggle: function(data) {                                                                                           // 6781
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];                         // 6782
      y0[0] = o = o0 = 0;                                                                                              // 6783
      for (j = 1; j < m; ++j) {                                                                                        // 6784
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];                                                           // 6785
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {                                                  // 6786
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {                               // 6787
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;                                                            // 6788
          }                                                                                                            // 6789
          s2 += s3 * data[i][j][1];                                                                                    // 6790
        }                                                                                                              // 6791
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;                                                                            // 6792
        if (o < o0) o0 = o;                                                                                            // 6793
      }                                                                                                                // 6794
      for (j = 0; j < m; ++j) y0[j] -= o0;                                                                             // 6795
      return y0;                                                                                                       // 6796
    },                                                                                                                 // 6797
    expand: function(data) {                                                                                           // 6798
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];                                            // 6799
      for (j = 0; j < m; ++j) {                                                                                        // 6800
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];                                                             // 6801
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;             // 6802
      }                                                                                                                // 6803
      for (j = 0; j < m; ++j) y0[j] = 0;                                                                               // 6804
      return y0;                                                                                                       // 6805
    },                                                                                                                 // 6806
    zero: d3_layout_stackOffsetZero                                                                                    // 6807
  });                                                                                                                  // 6808
  function d3_layout_stackOrderDefault(data) {                                                                         // 6809
    return d3.range(data.length);                                                                                      // 6810
  }                                                                                                                    // 6811
  function d3_layout_stackOffsetZero(data) {                                                                           // 6812
    var j = -1, m = data[0].length, y0 = [];                                                                           // 6813
    while (++j < m) y0[j] = 0;                                                                                         // 6814
    return y0;                                                                                                         // 6815
  }                                                                                                                    // 6816
  function d3_layout_stackMaxIndex(array) {                                                                            // 6817
    var i = 1, j = 0, v = array[0][1], k, n = array.length;                                                            // 6818
    for (;i < n; ++i) {                                                                                                // 6819
      if ((k = array[i][1]) > v) {                                                                                     // 6820
        j = i;                                                                                                         // 6821
        v = k;                                                                                                         // 6822
      }                                                                                                                // 6823
    }                                                                                                                  // 6824
    return j;                                                                                                          // 6825
  }                                                                                                                    // 6826
  function d3_layout_stackReduceSum(d) {                                                                               // 6827
    return d.reduce(d3_layout_stackSum, 0);                                                                            // 6828
  }                                                                                                                    // 6829
  function d3_layout_stackSum(p, d) {                                                                                  // 6830
    return p + d[1];                                                                                                   // 6831
  }                                                                                                                    // 6832
  d3.layout.histogram = function() {                                                                                   // 6833
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;  // 6834
    function histogram(data, i) {                                                                                      // 6835
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {                                                                                                // 6837
        bin = bins[i] = [];                                                                                            // 6838
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);                                                          // 6839
        bin.y = 0;                                                                                                     // 6840
      }                                                                                                                // 6841
      if (m > 0) {                                                                                                     // 6842
        i = -1;                                                                                                        // 6843
        while (++i < n) {                                                                                              // 6844
          x = values[i];                                                                                               // 6845
          if (x >= range[0] && x <= range[1]) {                                                                        // 6846
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];                                                            // 6847
            bin.y += k;                                                                                                // 6848
            bin.push(data[i]);                                                                                         // 6849
          }                                                                                                            // 6850
        }                                                                                                              // 6851
      }                                                                                                                // 6852
      return bins;                                                                                                     // 6853
    }                                                                                                                  // 6854
    histogram.value = function(x) {                                                                                    // 6855
      if (!arguments.length) return valuer;                                                                            // 6856
      valuer = x;                                                                                                      // 6857
      return histogram;                                                                                                // 6858
    };                                                                                                                 // 6859
    histogram.range = function(x) {                                                                                    // 6860
      if (!arguments.length) return ranger;                                                                            // 6861
      ranger = d3_functor(x);                                                                                          // 6862
      return histogram;                                                                                                // 6863
    };                                                                                                                 // 6864
    histogram.bins = function(x) {                                                                                     // 6865
      if (!arguments.length) return binner;                                                                            // 6866
      binner = typeof x === "number" ? function(range) {                                                               // 6867
        return d3_layout_histogramBinFixed(range, x);                                                                  // 6868
      } : d3_functor(x);                                                                                               // 6869
      return histogram;                                                                                                // 6870
    };                                                                                                                 // 6871
    histogram.frequency = function(x) {                                                                                // 6872
      if (!arguments.length) return frequency;                                                                         // 6873
      frequency = !!x;                                                                                                 // 6874
      return histogram;                                                                                                // 6875
    };                                                                                                                 // 6876
    return histogram;                                                                                                  // 6877
  };                                                                                                                   // 6878
  function d3_layout_histogramBinSturges(range, values) {                                                              // 6879
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));                      // 6880
  }                                                                                                                    // 6881
  function d3_layout_histogramBinFixed(range, n) {                                                                     // 6882
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];                                                         // 6883
    while (++x <= n) f[x] = m * x + b;                                                                                 // 6884
    return f;                                                                                                          // 6885
  }                                                                                                                    // 6886
  function d3_layout_histogramRange(values) {                                                                          // 6887
    return [ d3.min(values), d3.max(values) ];                                                                         // 6888
  }                                                                                                                    // 6889
  d3.layout.pack = function() {                                                                                        // 6890
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;              // 6891
    function pack(d, i) {                                                                                              // 6892
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;                                                                                                 // 6894
      };                                                                                                               // 6895
      root.x = root.y = 0;                                                                                             // 6896
      d3_layout_hierarchyVisitAfter(root, function(d) {                                                                // 6897
        d.r = +r(d.value);                                                                                             // 6898
      });                                                                                                              // 6899
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);                                                     // 6900
      if (padding) {                                                                                                   // 6901
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;                                // 6902
        d3_layout_hierarchyVisitAfter(root, function(d) {                                                              // 6903
          d.r += dr;                                                                                                   // 6904
        });                                                                                                            // 6905
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);                                                   // 6906
        d3_layout_hierarchyVisitAfter(root, function(d) {                                                              // 6907
          d.r -= dr;                                                                                                   // 6908
        });                                                                                                            // 6909
      }                                                                                                                // 6910
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));          // 6911
      return nodes;                                                                                                    // 6912
    }                                                                                                                  // 6913
    pack.size = function(_) {                                                                                          // 6914
      if (!arguments.length) return size;                                                                              // 6915
      size = _;                                                                                                        // 6916
      return pack;                                                                                                     // 6917
    };                                                                                                                 // 6918
    pack.radius = function(_) {                                                                                        // 6919
      if (!arguments.length) return radius;                                                                            // 6920
      radius = _ == null || typeof _ === "function" ? _ : +_;                                                          // 6921
      return pack;                                                                                                     // 6922
    };                                                                                                                 // 6923
    pack.padding = function(_) {                                                                                       // 6924
      if (!arguments.length) return padding;                                                                           // 6925
      padding = +_;                                                                                                    // 6926
      return pack;                                                                                                     // 6927
    };                                                                                                                 // 6928
    return d3_layout_hierarchyRebind(pack, hierarchy);                                                                 // 6929
  };                                                                                                                   // 6930
  function d3_layout_packSort(a, b) {                                                                                  // 6931
    return a.value - b.value;                                                                                          // 6932
  }                                                                                                                    // 6933
  function d3_layout_packInsert(a, b) {                                                                                // 6934
    var c = a._pack_next;                                                                                              // 6935
    a._pack_next = b;                                                                                                  // 6936
    b._pack_prev = a;                                                                                                  // 6937
    b._pack_next = c;                                                                                                  // 6938
    c._pack_prev = b;                                                                                                  // 6939
  }                                                                                                                    // 6940
  function d3_layout_packSplice(a, b) {                                                                                // 6941
    a._pack_next = b;                                                                                                  // 6942
    b._pack_prev = a;                                                                                                  // 6943
  }                                                                                                                    // 6944
  function d3_layout_packIntersects(a, b) {                                                                            // 6945
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;                                                                // 6946
    return .999 * dr * dr > dx * dx + dy * dy;                                                                         // 6947
  }                                                                                                                    // 6948
  function d3_layout_packSiblings(node) {                                                                              // 6949
    if (!(nodes = node.children) || !(n = nodes.length)) return;                                                       // 6950
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;              // 6951
    function bound(node) {                                                                                             // 6952
      xMin = Math.min(node.x - node.r, xMin);                                                                          // 6953
      xMax = Math.max(node.x + node.r, xMax);                                                                          // 6954
      yMin = Math.min(node.y - node.r, yMin);                                                                          // 6955
      yMax = Math.max(node.y + node.r, yMax);                                                                          // 6956
    }                                                                                                                  // 6957
    nodes.forEach(d3_layout_packLink);                                                                                 // 6958
    a = nodes[0];                                                                                                      // 6959
    a.x = -a.r;                                                                                                        // 6960
    a.y = 0;                                                                                                           // 6961
    bound(a);                                                                                                          // 6962
    if (n > 1) {                                                                                                       // 6963
      b = nodes[1];                                                                                                    // 6964
      b.x = b.r;                                                                                                       // 6965
      b.y = 0;                                                                                                         // 6966
      bound(b);                                                                                                        // 6967
      if (n > 2) {                                                                                                     // 6968
        c = nodes[2];                                                                                                  // 6969
        d3_layout_packPlace(a, b, c);                                                                                  // 6970
        bound(c);                                                                                                      // 6971
        d3_layout_packInsert(a, c);                                                                                    // 6972
        a._pack_prev = c;                                                                                              // 6973
        d3_layout_packInsert(c, b);                                                                                    // 6974
        b = a._pack_next;                                                                                              // 6975
        for (i = 3; i < n; i++) {                                                                                      // 6976
          d3_layout_packPlace(a, b, c = nodes[i]);                                                                     // 6977
          var isect = 0, s1 = 1, s2 = 1;                                                                               // 6978
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {                                                    // 6979
            if (d3_layout_packIntersects(j, c)) {                                                                      // 6980
              isect = 1;                                                                                               // 6981
              break;                                                                                                   // 6982
            }                                                                                                          // 6983
          }                                                                                                            // 6984
          if (isect == 1) {                                                                                            // 6985
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {                                       // 6986
              if (d3_layout_packIntersects(k, c)) {                                                                    // 6987
                break;                                                                                                 // 6988
              }                                                                                                        // 6989
            }                                                                                                          // 6990
          }                                                                                                            // 6991
          if (isect) {                                                                                                 // 6992
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b); // 6993
            i--;                                                                                                       // 6994
          } else {                                                                                                     // 6995
            d3_layout_packInsert(a, c);                                                                                // 6996
            b = c;                                                                                                     // 6997
            bound(c);                                                                                                  // 6998
          }                                                                                                            // 6999
        }                                                                                                              // 7000
      }                                                                                                                // 7001
    }                                                                                                                  // 7002
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;                                                        // 7003
    for (i = 0; i < n; i++) {                                                                                          // 7004
      c = nodes[i];                                                                                                    // 7005
      c.x -= cx;                                                                                                       // 7006
      c.y -= cy;                                                                                                       // 7007
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));                                                       // 7008
    }                                                                                                                  // 7009
    node.r = cr;                                                                                                       // 7010
    nodes.forEach(d3_layout_packUnlink);                                                                               // 7011
  }                                                                                                                    // 7012
  function d3_layout_packLink(node) {                                                                                  // 7013
    node._pack_next = node._pack_prev = node;                                                                          // 7014
  }                                                                                                                    // 7015
  function d3_layout_packUnlink(node) {                                                                                // 7016
    delete node._pack_next;                                                                                            // 7017
    delete node._pack_prev;                                                                                            // 7018
  }                                                                                                                    // 7019
  function d3_layout_packTransform(node, x, y, k) {                                                                    // 7020
    var children = node.children;                                                                                      // 7021
    node.x = x += k * node.x;                                                                                          // 7022
    node.y = y += k * node.y;                                                                                          // 7023
    node.r *= k;                                                                                                       // 7024
    if (children) {                                                                                                    // 7025
      var i = -1, n = children.length;                                                                                 // 7026
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);                                                   // 7027
    }                                                                                                                  // 7028
  }                                                                                                                    // 7029
  function d3_layout_packPlace(a, b, c) {                                                                              // 7030
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;                                                                // 7031
    if (db && (dx || dy)) {                                                                                            // 7032
      var da = b.r + c.r, dc = dx * dx + dy * dy;                                                                      // 7033
      da *= da;                                                                                                        // 7034
      db *= db;                                                                                                        // 7035
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;                                                                                     // 7037
      c.y = a.y + x * dy - y * dx;                                                                                     // 7038
    } else {                                                                                                           // 7039
      c.x = a.x + db;                                                                                                  // 7040
      c.y = a.y;                                                                                                       // 7041
    }                                                                                                                  // 7042
  }                                                                                                                    // 7043
  d3.layout.tree = function() {                                                                                        // 7044
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {                                                                                              // 7046
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);                               // 7047
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;                                      // 7048
      d3_layout_hierarchyVisitBefore(root1, secondWalk);                                                               // 7049
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {                                            // 7050
        var left = root0, right = root0, bottom = root0;                                                               // 7051
        d3_layout_hierarchyVisitBefore(root0, function(node) {                                                         // 7052
          if (node.x < left.x) left = node;                                                                            // 7053
          if (node.x > right.x) right = node;                                                                          // 7054
          if (node.depth > bottom.depth) bottom = node;                                                                // 7055
        });                                                                                                            // 7056
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {                                                         // 7058
          node.x = (node.x + tx) * kx;                                                                                 // 7059
          node.y = node.depth * ky;                                                                                    // 7060
        });                                                                                                            // 7061
      }                                                                                                                // 7062
      return nodes;                                                                                                    // 7063
    }                                                                                                                  // 7064
    function wrapTree(root0) {                                                                                         // 7065
      var root1 = {                                                                                                    // 7066
        A: null,                                                                                                       // 7067
        children: [ root0 ]                                                                                            // 7068
      }, queue = [ root1 ], node1;                                                                                     // 7069
      while ((node1 = queue.pop()) != null) {                                                                          // 7070
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {                           // 7071
          queue.push((children[i] = child = {                                                                          // 7072
            _: children[i],                                                                                            // 7073
            parent: node1,                                                                                             // 7074
            children: (child = children[i].children) && child.slice() || [],                                           // 7075
            A: null,                                                                                                   // 7076
            a: null,                                                                                                   // 7077
            z: 0,                                                                                                      // 7078
            m: 0,                                                                                                      // 7079
            c: 0,                                                                                                      // 7080
            s: 0,                                                                                                      // 7081
            t: null,                                                                                                   // 7082
            i: i                                                                                                       // 7083
          }).a = child);                                                                                               // 7084
        }                                                                                                              // 7085
      }                                                                                                                // 7086
      return root1.children[0];                                                                                        // 7087
    }                                                                                                                  // 7088
    function firstWalk(v) {                                                                                            // 7089
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;                     // 7090
      if (children.length) {                                                                                           // 7091
        d3_layout_treeShift(v);                                                                                        // 7092
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;                                          // 7093
        if (w) {                                                                                                       // 7094
          v.z = w.z + separation(v._, w._);                                                                            // 7095
          v.m = v.z - midpoint;                                                                                        // 7096
        } else {                                                                                                       // 7097
          v.z = midpoint;                                                                                              // 7098
        }                                                                                                              // 7099
      } else if (w) {                                                                                                  // 7100
        v.z = w.z + separation(v._, w._);                                                                              // 7101
      }                                                                                                                // 7102
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);                                                         // 7103
    }                                                                                                                  // 7104
    function secondWalk(v) {                                                                                           // 7105
      v._.x = v.z + v.parent.m;                                                                                        // 7106
      v.m += v.parent.m;                                                                                               // 7107
    }                                                                                                                  // 7108
    function apportion(v, w, ancestor) {                                                                               // 7109
      if (w) {                                                                                                         // 7110
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {                            // 7112
          vom = d3_layout_treeLeft(vom);                                                                               // 7113
          vop = d3_layout_treeRight(vop);                                                                              // 7114
          vop.a = v;                                                                                                   // 7115
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);                                                // 7116
          if (shift > 0) {                                                                                             // 7117
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);                                    // 7118
            sip += shift;                                                                                              // 7119
            sop += shift;                                                                                              // 7120
          }                                                                                                            // 7121
          sim += vim.m;                                                                                                // 7122
          sip += vip.m;                                                                                                // 7123
          som += vom.m;                                                                                                // 7124
          sop += vop.m;                                                                                                // 7125
        }                                                                                                              // 7126
        if (vim && !d3_layout_treeRight(vop)) {                                                                        // 7127
          vop.t = vim;                                                                                                 // 7128
          vop.m += sim - sop;                                                                                          // 7129
        }                                                                                                              // 7130
        if (vip && !d3_layout_treeLeft(vom)) {                                                                         // 7131
          vom.t = vip;                                                                                                 // 7132
          vom.m += sip - som;                                                                                          // 7133
          ancestor = v;                                                                                                // 7134
        }                                                                                                              // 7135
      }                                                                                                                // 7136
      return ancestor;                                                                                                 // 7137
    }                                                                                                                  // 7138
    function sizeNode(node) {                                                                                          // 7139
      node.x *= size[0];                                                                                               // 7140
      node.y = node.depth * size[1];                                                                                   // 7141
    }                                                                                                                  // 7142
    tree.separation = function(x) {                                                                                    // 7143
      if (!arguments.length) return separation;                                                                        // 7144
      separation = x;                                                                                                  // 7145
      return tree;                                                                                                     // 7146
    };                                                                                                                 // 7147
    tree.size = function(x) {                                                                                          // 7148
      if (!arguments.length) return nodeSize ? null : size;                                                            // 7149
      nodeSize = (size = x) == null ? sizeNode : null;                                                                 // 7150
      return tree;                                                                                                     // 7151
    };                                                                                                                 // 7152
    tree.nodeSize = function(x) {                                                                                      // 7153
      if (!arguments.length) return nodeSize ? size : null;                                                            // 7154
      nodeSize = (size = x) == null ? null : sizeNode;                                                                 // 7155
      return tree;                                                                                                     // 7156
    };                                                                                                                 // 7157
    return d3_layout_hierarchyRebind(tree, hierarchy);                                                                 // 7158
  };                                                                                                                   // 7159
  function d3_layout_treeSeparation(a, b) {                                                                            // 7160
    return a.parent == b.parent ? 1 : 2;                                                                               // 7161
  }                                                                                                                    // 7162
  function d3_layout_treeLeft(v) {                                                                                     // 7163
    var children = v.children;                                                                                         // 7164
    return children.length ? children[0] : v.t;                                                                        // 7165
  }                                                                                                                    // 7166
  function d3_layout_treeRight(v) {                                                                                    // 7167
    var children = v.children, n;                                                                                      // 7168
    return (n = children.length) ? children[n - 1] : v.t;                                                              // 7169
  }                                                                                                                    // 7170
  function d3_layout_treeMove(wm, wp, shift) {                                                                         // 7171
    var change = shift / (wp.i - wm.i);                                                                                // 7172
    wp.c -= change;                                                                                                    // 7173
    wp.s += shift;                                                                                                     // 7174
    wm.c += change;                                                                                                    // 7175
    wp.z += shift;                                                                                                     // 7176
    wp.m += shift;                                                                                                     // 7177
  }                                                                                                                    // 7178
  function d3_layout_treeShift(v) {                                                                                    // 7179
    var shift = 0, change = 0, children = v.children, i = children.length, w;                                          // 7180
    while (--i >= 0) {                                                                                                 // 7181
      w = children[i];                                                                                                 // 7182
      w.z += shift;                                                                                                    // 7183
      w.m += shift;                                                                                                    // 7184
      shift += w.s + (change += w.c);                                                                                  // 7185
    }                                                                                                                  // 7186
  }                                                                                                                    // 7187
  function d3_layout_treeAncestor(vim, v, ancestor) {                                                                  // 7188
    return vim.a.parent === v.parent ? vim.a : ancestor;                                                               // 7189
  }                                                                                                                    // 7190
  d3.layout.cluster = function() {                                                                                     // 7191
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {                                                                                           // 7193
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;                                    // 7194
      d3_layout_hierarchyVisitAfter(root, function(node) {                                                             // 7195
        var children = node.children;                                                                                  // 7196
        if (children && children.length) {                                                                             // 7197
          node.x = d3_layout_clusterX(children);                                                                       // 7198
          node.y = d3_layout_clusterY(children);                                                                       // 7199
        } else {                                                                                                       // 7200
          node.x = previousNode ? x += separation(node, previousNode) : 0;                                             // 7201
          node.y = 0;                                                                                                  // 7202
          previousNode = node;                                                                                         // 7203
        }                                                                                                              // 7204
      });                                                                                                              // 7205
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {                                                  // 7207
        node.x = (node.x - root.x) * size[0];                                                                          // 7208
        node.y = (root.y - node.y) * size[1];                                                                          // 7209
      } : function(node) {                                                                                             // 7210
        node.x = (node.x - x0) / (x1 - x0) * size[0];                                                                  // 7211
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];                                                       // 7212
      });                                                                                                              // 7213
      return nodes;                                                                                                    // 7214
    }                                                                                                                  // 7215
    cluster.separation = function(x) {                                                                                 // 7216
      if (!arguments.length) return separation;                                                                        // 7217
      separation = x;                                                                                                  // 7218
      return cluster;                                                                                                  // 7219
    };                                                                                                                 // 7220
    cluster.size = function(x) {                                                                                       // 7221
      if (!arguments.length) return nodeSize ? null : size;                                                            // 7222
      nodeSize = (size = x) == null;                                                                                   // 7223
      return cluster;                                                                                                  // 7224
    };                                                                                                                 // 7225
    cluster.nodeSize = function(x) {                                                                                   // 7226
      if (!arguments.length) return nodeSize ? size : null;                                                            // 7227
      nodeSize = (size = x) != null;                                                                                   // 7228
      return cluster;                                                                                                  // 7229
    };                                                                                                                 // 7230
    return d3_layout_hierarchyRebind(cluster, hierarchy);                                                              // 7231
  };                                                                                                                   // 7232
  function d3_layout_clusterY(children) {                                                                              // 7233
    return 1 + d3.max(children, function(child) {                                                                      // 7234
      return child.y;                                                                                                  // 7235
    });                                                                                                                // 7236
  }                                                                                                                    // 7237
  function d3_layout_clusterX(children) {                                                                              // 7238
    return children.reduce(function(x, child) {                                                                        // 7239
      return x + child.x;                                                                                              // 7240
    }, 0) / children.length;                                                                                           // 7241
  }                                                                                                                    // 7242
  function d3_layout_clusterLeft(node) {                                                                               // 7243
    var children = node.children;                                                                                      // 7244
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;                                    // 7245
  }                                                                                                                    // 7246
  function d3_layout_clusterRight(node) {                                                                              // 7247
    var children = node.children, n;                                                                                   // 7248
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;                         // 7249
  }                                                                                                                    // 7250
  d3.layout.treemap = function() {                                                                                     // 7251
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {                                                                                      // 7253
      var i = -1, n = children.length, child, area;                                                                    // 7254
      while (++i < n) {                                                                                                // 7255
        area = (child = children[i]).value * (k < 0 ? 0 : k);                                                          // 7256
        child.area = isNaN(area) || area <= 0 ? 0 : area;                                                              // 7257
      }                                                                                                                // 7258
    }                                                                                                                  // 7259
    function squarify(node) {                                                                                          // 7260
      var children = node.children;                                                                                    // 7261
      if (children && children.length) {                                                                               // 7262
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);                                                              // 7264
        row.area = 0;                                                                                                  // 7265
        while ((n = remaining.length) > 0) {                                                                           // 7266
          row.push(child = remaining[n - 1]);                                                                          // 7267
          row.area += child.area;                                                                                      // 7268
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {                                                // 7269
            remaining.pop();                                                                                           // 7270
            best = score;                                                                                              // 7271
          } else {                                                                                                     // 7272
            row.area -= row.pop().area;                                                                                // 7273
            position(row, u, rect, false);                                                                             // 7274
            u = Math.min(rect.dx, rect.dy);                                                                            // 7275
            row.length = row.area = 0;                                                                                 // 7276
            best = Infinity;                                                                                           // 7277
          }                                                                                                            // 7278
        }                                                                                                              // 7279
        if (row.length) {                                                                                              // 7280
          position(row, u, rect, true);                                                                                // 7281
          row.length = row.area = 0;                                                                                   // 7282
        }                                                                                                              // 7283
        children.forEach(squarify);                                                                                    // 7284
      }                                                                                                                // 7285
    }                                                                                                                  // 7286
    function stickify(node) {                                                                                          // 7287
      var children = node.children;                                                                                    // 7288
      if (children && children.length) {                                                                               // 7289
        var rect = pad(node), remaining = children.slice(), child, row = [];                                           // 7290
        scale(remaining, rect.dx * rect.dy / node.value);                                                              // 7291
        row.area = 0;                                                                                                  // 7292
        while (child = remaining.pop()) {                                                                              // 7293
          row.push(child);                                                                                             // 7294
          row.area += child.area;                                                                                      // 7295
          if (child.z != null) {                                                                                       // 7296
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);                                       // 7297
            row.length = row.area = 0;                                                                                 // 7298
          }                                                                                                            // 7299
        }                                                                                                              // 7300
        children.forEach(stickify);                                                                                    // 7301
      }                                                                                                                // 7302
    }                                                                                                                  // 7303
    function worst(row, u) {                                                                                           // 7304
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;                                          // 7305
      while (++i < n) {                                                                                                // 7306
        if (!(r = row[i].area)) continue;                                                                              // 7307
        if (r < rmin) rmin = r;                                                                                        // 7308
        if (r > rmax) rmax = r;                                                                                        // 7309
      }                                                                                                                // 7310
      s *= s;                                                                                                          // 7311
      u *= u;                                                                                                          // 7312
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;                                    // 7313
    }                                                                                                                  // 7314
    function position(row, u, rect, flush) {                                                                           // 7315
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;                          // 7316
      if (u == rect.dx) {                                                                                              // 7317
        if (flush || v > rect.dy) v = rect.dy;                                                                         // 7318
        while (++i < n) {                                                                                              // 7319
          o = row[i];                                                                                                  // 7320
          o.x = x;                                                                                                     // 7321
          o.y = y;                                                                                                     // 7322
          o.dy = v;                                                                                                    // 7323
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);                                       // 7324
        }                                                                                                              // 7325
        o.z = true;                                                                                                    // 7326
        o.dx += rect.x + rect.dx - x;                                                                                  // 7327
        rect.y += v;                                                                                                   // 7328
        rect.dy -= v;                                                                                                  // 7329
      } else {                                                                                                         // 7330
        if (flush || v > rect.dx) v = rect.dx;                                                                         // 7331
        while (++i < n) {                                                                                              // 7332
          o = row[i];                                                                                                  // 7333
          o.x = x;                                                                                                     // 7334
          o.y = y;                                                                                                     // 7335
          o.dx = v;                                                                                                    // 7336
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);                                       // 7337
        }                                                                                                              // 7338
        o.z = false;                                                                                                   // 7339
        o.dy += rect.y + rect.dy - y;                                                                                  // 7340
        rect.x += v;                                                                                                   // 7341
        rect.dx -= v;                                                                                                  // 7342
      }                                                                                                                // 7343
    }                                                                                                                  // 7344
    function treemap(d) {                                                                                              // 7345
      var nodes = stickies || hierarchy(d), root = nodes[0];                                                           // 7346
      root.x = root.y = 0;                                                                                             // 7347
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;                                // 7348
      if (stickies) hierarchy.revalue(root);                                                                           // 7349
      scale([ root ], root.dx * root.dy / root.value);                                                                 // 7350
      (stickies ? stickify : squarify)(root);                                                                          // 7351
      if (sticky) stickies = nodes;                                                                                    // 7352
      return nodes;                                                                                                    // 7353
    }                                                                                                                  // 7354
    treemap.size = function(x) {                                                                                       // 7355
      if (!arguments.length) return size;                                                                              // 7356
      size = x;                                                                                                        // 7357
      return treemap;                                                                                                  // 7358
    };                                                                                                                 // 7359
    treemap.padding = function(x) {                                                                                    // 7360
      if (!arguments.length) return padding;                                                                           // 7361
      function padFunction(node) {                                                                                     // 7362
        var p = x.call(treemap, node, node.depth);                                                                     // 7363
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }                                                                                                                // 7365
      function padConstant(node) {                                                                                     // 7366
        return d3_layout_treemapPad(node, x);                                                                          // 7367
      }                                                                                                                // 7368
      var type;                                                                                                        // 7369
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;                                                                                      // 7371
      return treemap;                                                                                                  // 7372
    };                                                                                                                 // 7373
    treemap.round = function(x) {                                                                                      // 7374
      if (!arguments.length) return round != Number;                                                                   // 7375
      round = x ? Math.round : Number;                                                                                 // 7376
      return treemap;                                                                                                  // 7377
    };                                                                                                                 // 7378
    treemap.sticky = function(x) {                                                                                     // 7379
      if (!arguments.length) return sticky;                                                                            // 7380
      sticky = x;                                                                                                      // 7381
      stickies = null;                                                                                                 // 7382
      return treemap;                                                                                                  // 7383
    };                                                                                                                 // 7384
    treemap.ratio = function(x) {                                                                                      // 7385
      if (!arguments.length) return ratio;                                                                             // 7386
      ratio = x;                                                                                                       // 7387
      return treemap;                                                                                                  // 7388
    };                                                                                                                 // 7389
    treemap.mode = function(x) {                                                                                       // 7390
      if (!arguments.length) return mode;                                                                              // 7391
      mode = x + "";                                                                                                   // 7392
      return treemap;                                                                                                  // 7393
    };                                                                                                                 // 7394
    return d3_layout_hierarchyRebind(treemap, hierarchy);                                                              // 7395
  };                                                                                                                   // 7396
  function d3_layout_treemapPadNull(node) {                                                                            // 7397
    return {                                                                                                           // 7398
      x: node.x,                                                                                                       // 7399
      y: node.y,                                                                                                       // 7400
      dx: node.dx,                                                                                                     // 7401
      dy: node.dy                                                                                                      // 7402
    };                                                                                                                 // 7403
  }                                                                                                                    // 7404
  function d3_layout_treemapPad(node, padding) {                                                                       // 7405
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {                                                                                                      // 7407
      x += dx / 2;                                                                                                     // 7408
      dx = 0;                                                                                                          // 7409
    }                                                                                                                  // 7410
    if (dy < 0) {                                                                                                      // 7411
      y += dy / 2;                                                                                                     // 7412
      dy = 0;                                                                                                          // 7413
    }                                                                                                                  // 7414
    return {                                                                                                           // 7415
      x: x,                                                                                                            // 7416
      y: y,                                                                                                            // 7417
      dx: dx,                                                                                                          // 7418
      dy: dy                                                                                                           // 7419
    };                                                                                                                 // 7420
  }                                                                                                                    // 7421
  d3.random = {                                                                                                        // 7422
    normal: function(µ, σ) {                                                                                           // 7423
      var n = arguments.length;                                                                                        // 7424
      if (n < 2) σ = 1;                                                                                                // 7425
      if (n < 1) µ = 0;                                                                                                // 7426
      return function() {                                                                                              // 7427
        var x, y, r;                                                                                                   // 7428
        do {                                                                                                           // 7429
          x = Math.random() * 2 - 1;                                                                                   // 7430
          y = Math.random() * 2 - 1;                                                                                   // 7431
          r = x * x + y * y;                                                                                           // 7432
        } while (!r || r > 1);                                                                                         // 7433
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);                                                            // 7434
      };                                                                                                               // 7435
    },                                                                                                                 // 7436
    logNormal: function() {                                                                                            // 7437
      var random = d3.random.normal.apply(d3, arguments);                                                              // 7438
      return function() {                                                                                              // 7439
        return Math.exp(random());                                                                                     // 7440
      };                                                                                                               // 7441
    },                                                                                                                 // 7442
    bates: function(m) {                                                                                               // 7443
      var random = d3.random.irwinHall(m);                                                                             // 7444
      return function() {                                                                                              // 7445
        return random() / m;                                                                                           // 7446
      };                                                                                                               // 7447
    },                                                                                                                 // 7448
    irwinHall: function(m) {                                                                                           // 7449
      return function() {                                                                                              // 7450
        for (var s = 0, j = 0; j < m; j++) s += Math.random();                                                         // 7451
        return s;                                                                                                      // 7452
      };                                                                                                               // 7453
    }                                                                                                                  // 7454
  };                                                                                                                   // 7455
  d3.scale = {};                                                                                                       // 7456
  function d3_scaleExtent(domain) {                                                                                    // 7457
    var start = domain[0], stop = domain[domain.length - 1];                                                           // 7458
    return start < stop ? [ start, stop ] : [ stop, start ];                                                           // 7459
  }                                                                                                                    // 7460
  function d3_scaleRange(scale) {                                                                                      // 7461
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());                                    // 7462
  }                                                                                                                    // 7463
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {                                              // 7464
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);                                  // 7465
    return function(x) {                                                                                               // 7466
      return i(u(x));                                                                                                  // 7467
    };                                                                                                                 // 7468
  }                                                                                                                    // 7469
  function d3_scale_nice(domain, nice) {                                                                               // 7470
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;                                          // 7471
    if (x1 < x0) {                                                                                                     // 7472
      dx = i0, i0 = i1, i1 = dx;                                                                                       // 7473
      dx = x0, x0 = x1, x1 = dx;                                                                                       // 7474
    }                                                                                                                  // 7475
    domain[i0] = nice.floor(x0);                                                                                       // 7476
    domain[i1] = nice.ceil(x1);                                                                                        // 7477
    return domain;                                                                                                     // 7478
  }                                                                                                                    // 7479
  function d3_scale_niceStep(step) {                                                                                   // 7480
    return step ? {                                                                                                    // 7481
      floor: function(x) {                                                                                             // 7482
        return Math.floor(x / step) * step;                                                                            // 7483
      },                                                                                                               // 7484
      ceil: function(x) {                                                                                              // 7485
        return Math.ceil(x / step) * step;                                                                             // 7486
      }                                                                                                                // 7487
    } : d3_scale_niceIdentity;                                                                                         // 7488
  }                                                                                                                    // 7489
  var d3_scale_niceIdentity = {                                                                                        // 7490
    floor: d3_identity,                                                                                                // 7491
    ceil: d3_identity                                                                                                  // 7492
  };                                                                                                                   // 7493
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {                                            // 7494
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;                                          // 7495
    if (domain[k] < domain[0]) {                                                                                       // 7496
      domain = domain.slice().reverse();                                                                               // 7497
      range = range.slice().reverse();                                                                                 // 7498
    }                                                                                                                  // 7499
    while (++j <= k) {                                                                                                 // 7500
      u.push(uninterpolate(domain[j - 1], domain[j]));                                                                 // 7501
      i.push(interpolate(range[j - 1], range[j]));                                                                     // 7502
    }                                                                                                                  // 7503
    return function(x) {                                                                                               // 7504
      var j = d3.bisect(domain, x, 1, k) - 1;                                                                          // 7505
      return i[j](u[j](x));                                                                                            // 7506
    };                                                                                                                 // 7507
  }                                                                                                                    // 7508
  d3.scale.linear = function() {                                                                                       // 7509
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);                                                 // 7510
  };                                                                                                                   // 7511
  function d3_scale_linear(domain, range, interpolate, clamp) {                                                        // 7512
    var output, input;                                                                                                 // 7513
    function rescale() {                                                                                               // 7514
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);                                                      // 7516
      input = linear(range, domain, uninterpolate, d3_interpolate);                                                    // 7517
      return scale;                                                                                                    // 7518
    }                                                                                                                  // 7519
    function scale(x) {                                                                                                // 7520
      return output(x);                                                                                                // 7521
    }                                                                                                                  // 7522
    scale.invert = function(y) {                                                                                       // 7523
      return input(y);                                                                                                 // 7524
    };                                                                                                                 // 7525
    scale.domain = function(x) {                                                                                       // 7526
      if (!arguments.length) return domain;                                                                            // 7527
      domain = x.map(Number);                                                                                          // 7528
      return rescale();                                                                                                // 7529
    };                                                                                                                 // 7530
    scale.range = function(x) {                                                                                        // 7531
      if (!arguments.length) return range;                                                                             // 7532
      range = x;                                                                                                       // 7533
      return rescale();                                                                                                // 7534
    };                                                                                                                 // 7535
    scale.rangeRound = function(x) {                                                                                   // 7536
      return scale.range(x).interpolate(d3_interpolateRound);                                                          // 7537
    };                                                                                                                 // 7538
    scale.clamp = function(x) {                                                                                        // 7539
      if (!arguments.length) return clamp;                                                                             // 7540
      clamp = x;                                                                                                       // 7541
      return rescale();                                                                                                // 7542
    };                                                                                                                 // 7543
    scale.interpolate = function(x) {                                                                                  // 7544
      if (!arguments.length) return interpolate;                                                                       // 7545
      interpolate = x;                                                                                                 // 7546
      return rescale();                                                                                                // 7547
    };                                                                                                                 // 7548
    scale.ticks = function(m) {                                                                                        // 7549
      return d3_scale_linearTicks(domain, m);                                                                          // 7550
    };                                                                                                                 // 7551
    scale.tickFormat = function(m, format) {                                                                           // 7552
      return d3_scale_linearTickFormat(domain, m, format);                                                             // 7553
    };                                                                                                                 // 7554
    scale.nice = function(m) {                                                                                         // 7555
      d3_scale_linearNice(domain, m);                                                                                  // 7556
      return rescale();                                                                                                // 7557
    };                                                                                                                 // 7558
    scale.copy = function() {                                                                                          // 7559
      return d3_scale_linear(domain, range, interpolate, clamp);                                                       // 7560
    };                                                                                                                 // 7561
    return rescale();                                                                                                  // 7562
  }                                                                                                                    // 7563
  function d3_scale_linearRebind(scale, linear) {                                                                      // 7564
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");                                    // 7565
  }                                                                                                                    // 7566
  function d3_scale_linearNice(domain, m) {                                                                            // 7567
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));                           // 7568
  }                                                                                                                    // 7569
  function d3_scale_linearTickRange(domain, m) {                                                                       // 7570
    if (m == null) m = 10;                                                                                             // 7571
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;                        // 7573
    extent[0] = Math.ceil(extent[0] / step) * step;                                                                    // 7574
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;                                                       // 7575
    extent[2] = step;                                                                                                  // 7576
    return extent;                                                                                                     // 7577
  }                                                                                                                    // 7578
  function d3_scale_linearTicks(domain, m) {                                                                           // 7579
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));                                                    // 7580
  }                                                                                                                    // 7581
  function d3_scale_linearTickFormat(domain, m, format) {                                                              // 7582
    var range = d3_scale_linearTickRange(domain, m);                                                                   // 7583
    if (format) {                                                                                                      // 7584
      var match = d3_format_re.exec(format);                                                                           // 7585
      match.shift();                                                                                                   // 7586
      if (match[8] === "s") {                                                                                          // 7587
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));                                          // 7588
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));                              // 7589
        match[8] = "f";                                                                                                // 7590
        format = d3.format(match.join(""));                                                                            // 7591
        return function(d) {                                                                                           // 7592
          return format(prefix.scale(d)) + prefix.symbol;                                                              // 7593
        };                                                                                                             // 7594
      }                                                                                                                // 7595
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);                                 // 7596
      format = match.join("");                                                                                         // 7597
    } else {                                                                                                           // 7598
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";                                                        // 7599
    }                                                                                                                  // 7600
    return d3.format(format);                                                                                          // 7601
  }                                                                                                                    // 7602
  var d3_scale_linearFormatSignificant = {                                                                             // 7603
    s: 1,                                                                                                              // 7604
    g: 1,                                                                                                              // 7605
    p: 1,                                                                                                              // 7606
    r: 1,                                                                                                              // 7607
    e: 1                                                                                                               // 7608
  };                                                                                                                   // 7609
  function d3_scale_linearPrecision(value) {                                                                           // 7610
    return -Math.floor(Math.log(value) / Math.LN10 + .01);                                                             // 7611
  }                                                                                                                    // 7612
  function d3_scale_linearFormatPrecision(type, range) {                                                               // 7613
    var p = d3_scale_linearPrecision(range[2]);                                                                        // 7614
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }                                                                                                                    // 7616
  d3.scale.log = function() {                                                                                          // 7617
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);                                      // 7618
  };                                                                                                                   // 7619
  function d3_scale_log(linear, base, positive, domain) {                                                              // 7620
    function log(x) {                                                                                                  // 7621
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);                        // 7622
    }                                                                                                                  // 7623
    function pow(x) {                                                                                                  // 7624
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);                                                       // 7625
    }                                                                                                                  // 7626
    function scale(x) {                                                                                                // 7627
      return linear(log(x));                                                                                           // 7628
    }                                                                                                                  // 7629
    scale.invert = function(x) {                                                                                       // 7630
      return pow(linear.invert(x));                                                                                    // 7631
    };                                                                                                                 // 7632
    scale.domain = function(x) {                                                                                       // 7633
      if (!arguments.length) return domain;                                                                            // 7634
      positive = x[0] >= 0;                                                                                            // 7635
      linear.domain((domain = x.map(Number)).map(log));                                                                // 7636
      return scale;                                                                                                    // 7637
    };                                                                                                                 // 7638
    scale.base = function(_) {                                                                                         // 7639
      if (!arguments.length) return base;                                                                              // 7640
      base = +_;                                                                                                       // 7641
      linear.domain(domain.map(log));                                                                                  // 7642
      return scale;                                                                                                    // 7643
    };                                                                                                                 // 7644
    scale.nice = function() {                                                                                          // 7645
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);                          // 7646
      linear.domain(niced);                                                                                            // 7647
      domain = niced.map(pow);                                                                                         // 7648
      return scale;                                                                                                    // 7649
    };                                                                                                                 // 7650
    scale.ticks = function() {                                                                                         // 7651
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {                                                                                           // 7653
        if (positive) {                                                                                                // 7654
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);                                        // 7655
          ticks.push(pow(i));                                                                                          // 7656
        } else {                                                                                                       // 7657
          ticks.push(pow(i));                                                                                          // 7658
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);                                     // 7659
        }                                                                                                              // 7660
        for (i = 0; ticks[i] < u; i++) {}                                                                              // 7661
        for (j = ticks.length; ticks[j - 1] > v; j--) {}                                                               // 7662
        ticks = ticks.slice(i, j);                                                                                     // 7663
      }                                                                                                                // 7664
      return ticks;                                                                                                    // 7665
    };                                                                                                                 // 7666
    scale.tickFormat = function(n, format) {                                                                           // 7667
      if (!arguments.length) return d3_scale_logFormat;                                                                // 7668
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12,             // 7670
      Math.floor), e;                                                                                                  // 7671
      return function(d) {                                                                                             // 7672
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";                                                           // 7673
      };                                                                                                               // 7674
    };                                                                                                                 // 7675
    scale.copy = function() {                                                                                          // 7676
      return d3_scale_log(linear.copy(), base, positive, domain);                                                      // 7677
    };                                                                                                                 // 7678
    return d3_scale_linearRebind(scale, linear);                                                                       // 7679
  }                                                                                                                    // 7680
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {                                              // 7681
    floor: function(x) {                                                                                               // 7682
      return -Math.ceil(-x);                                                                                           // 7683
    },                                                                                                                 // 7684
    ceil: function(x) {                                                                                                // 7685
      return -Math.floor(-x);                                                                                          // 7686
    }                                                                                                                  // 7687
  };                                                                                                                   // 7688
  d3.scale.pow = function() {                                                                                          // 7689
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);                                                               // 7690
  };                                                                                                                   // 7691
  function d3_scale_pow(linear, exponent, domain) {                                                                    // 7692
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);                                        // 7693
    function scale(x) {                                                                                                // 7694
      return linear(powp(x));                                                                                          // 7695
    }                                                                                                                  // 7696
    scale.invert = function(x) {                                                                                       // 7697
      return powb(linear.invert(x));                                                                                   // 7698
    };                                                                                                                 // 7699
    scale.domain = function(x) {                                                                                       // 7700
      if (!arguments.length) return domain;                                                                            // 7701
      linear.domain((domain = x.map(Number)).map(powp));                                                               // 7702
      return scale;                                                                                                    // 7703
    };                                                                                                                 // 7704
    scale.ticks = function(m) {                                                                                        // 7705
      return d3_scale_linearTicks(domain, m);                                                                          // 7706
    };                                                                                                                 // 7707
    scale.tickFormat = function(m, format) {                                                                           // 7708
      return d3_scale_linearTickFormat(domain, m, format);                                                             // 7709
    };                                                                                                                 // 7710
    scale.nice = function(m) {                                                                                         // 7711
      return scale.domain(d3_scale_linearNice(domain, m));                                                             // 7712
    };                                                                                                                 // 7713
    scale.exponent = function(x) {                                                                                     // 7714
      if (!arguments.length) return exponent;                                                                          // 7715
      powp = d3_scale_powPow(exponent = x);                                                                            // 7716
      powb = d3_scale_powPow(1 / exponent);                                                                            // 7717
      linear.domain(domain.map(powp));                                                                                 // 7718
      return scale;                                                                                                    // 7719
    };                                                                                                                 // 7720
    scale.copy = function() {                                                                                          // 7721
      return d3_scale_pow(linear.copy(), exponent, domain);                                                            // 7722
    };                                                                                                                 // 7723
    return d3_scale_linearRebind(scale, linear);                                                                       // 7724
  }                                                                                                                    // 7725
  function d3_scale_powPow(e) {                                                                                        // 7726
    return function(x) {                                                                                               // 7727
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);                                                                // 7728
    };                                                                                                                 // 7729
  }                                                                                                                    // 7730
  d3.scale.sqrt = function() {                                                                                         // 7731
    return d3.scale.pow().exponent(.5);                                                                                // 7732
  };                                                                                                                   // 7733
  d3.scale.ordinal = function() {                                                                                      // 7734
    return d3_scale_ordinal([], {                                                                                      // 7735
      t: "range",                                                                                                      // 7736
      a: [ [] ]                                                                                                        // 7737
    });                                                                                                                // 7738
  };                                                                                                                   // 7739
  function d3_scale_ordinal(domain, ranger) {                                                                          // 7740
    var index, range, rangeBand;                                                                                       // 7741
    function scale(x) {                                                                                                // 7742
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }                                                                                                                  // 7744
    function steps(start, step) {                                                                                      // 7745
      return d3.range(domain.length).map(function(i) {                                                                 // 7746
        return start + step * i;                                                                                       // 7747
      });                                                                                                              // 7748
    }                                                                                                                  // 7749
    scale.domain = function(x) {                                                                                       // 7750
      if (!arguments.length) return domain;                                                                            // 7751
      domain = [];                                                                                                     // 7752
      index = new d3_Map();                                                                                            // 7753
      var i = -1, n = x.length, xi;                                                                                    // 7754
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));                                       // 7755
      return scale[ranger.t].apply(scale, ranger.a);                                                                   // 7756
    };                                                                                                                 // 7757
    scale.range = function(x) {                                                                                        // 7758
      if (!arguments.length) return range;                                                                             // 7759
      range = x;                                                                                                       // 7760
      rangeBand = 0;                                                                                                   // 7761
      ranger = {                                                                                                       // 7762
        t: "range",                                                                                                    // 7763
        a: arguments                                                                                                   // 7764
      };                                                                                                               // 7765
      return scale;                                                                                                    // 7766
    };                                                                                                                 // 7767
    scale.rangePoints = function(x, padding) {                                                                         // 7768
      if (arguments.length < 2) padding = 0;                                                                           // 7769
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2,                           // 7770
      0) : (stop - start) / (domain.length - 1 + padding);                                                             // 7771
      range = steps(start + step * padding / 2, step);                                                                 // 7772
      rangeBand = 0;                                                                                                   // 7773
      ranger = {                                                                                                       // 7774
        t: "rangePoints",                                                                                              // 7775
        a: arguments                                                                                                   // 7776
      };                                                                                                               // 7777
      return scale;                                                                                                    // 7778
    };                                                                                                                 // 7779
    scale.rangeRoundPoints = function(x, padding) {                                                                    // 7780
      if (arguments.length < 2) padding = 0;                                                                           // 7781
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2),        // 7782
      0) : (stop - start) / (domain.length - 1 + padding) | 0;                                                         // 7783
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;                                                                                                   // 7785
      ranger = {                                                                                                       // 7786
        t: "rangeRoundPoints",                                                                                         // 7787
        a: arguments                                                                                                   // 7788
      };                                                                                                               // 7789
      return scale;                                                                                                    // 7790
    };                                                                                                                 // 7791
    scale.rangeBands = function(x, padding, outerPadding) {                                                            // 7792
      if (arguments.length < 2) padding = 0;                                                                           // 7793
      if (arguments.length < 3) outerPadding = padding;                                                                // 7794
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);                                                                // 7796
      if (reverse) range.reverse();                                                                                    // 7797
      rangeBand = step * (1 - padding);                                                                                // 7798
      ranger = {                                                                                                       // 7799
        t: "rangeBands",                                                                                               // 7800
        a: arguments                                                                                                   // 7801
      };                                                                                                               // 7802
      return scale;                                                                                                    // 7803
    };                                                                                                                 // 7804
    scale.rangeRoundBands = function(x, padding, outerPadding) {                                                       // 7805
      if (arguments.length < 2) padding = 0;                                                                           // 7806
      if (arguments.length < 3) outerPadding = padding;                                                                // 7807
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);                  // 7809
      if (reverse) range.reverse();                                                                                    // 7810
      rangeBand = Math.round(step * (1 - padding));                                                                    // 7811
      ranger = {                                                                                                       // 7812
        t: "rangeRoundBands",                                                                                          // 7813
        a: arguments                                                                                                   // 7814
      };                                                                                                               // 7815
      return scale;                                                                                                    // 7816
    };                                                                                                                 // 7817
    scale.rangeBand = function() {                                                                                     // 7818
      return rangeBand;                                                                                                // 7819
    };                                                                                                                 // 7820
    scale.rangeExtent = function() {                                                                                   // 7821
      return d3_scaleExtent(ranger.a[0]);                                                                              // 7822
    };                                                                                                                 // 7823
    scale.copy = function() {                                                                                          // 7824
      return d3_scale_ordinal(domain, ranger);                                                                         // 7825
    };                                                                                                                 // 7826
    return scale.domain(domain);                                                                                       // 7827
  }                                                                                                                    // 7828
  d3.scale.category10 = function() {                                                                                   // 7829
    return d3.scale.ordinal().range(d3_category10);                                                                    // 7830
  };                                                                                                                   // 7831
  d3.scale.category20 = function() {                                                                                   // 7832
    return d3.scale.ordinal().range(d3_category20);                                                                    // 7833
  };                                                                                                                   // 7834
  d3.scale.category20b = function() {                                                                                  // 7835
    return d3.scale.ordinal().range(d3_category20b);                                                                   // 7836
  };                                                                                                                   // 7837
  d3.scale.category20c = function() {                                                                                  // 7838
    return d3.scale.ordinal().range(d3_category20c);                                                                   // 7839
  };                                                                                                                   // 7840
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {                                                                                     // 7845
    return d3_scale_quantile([], []);                                                                                  // 7846
  };                                                                                                                   // 7847
  function d3_scale_quantile(domain, range) {                                                                          // 7848
    var thresholds;                                                                                                    // 7849
    function rescale() {                                                                                               // 7850
      var k = 0, q = range.length;                                                                                     // 7851
      thresholds = [];                                                                                                 // 7852
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);                                                  // 7853
      return scale;                                                                                                    // 7854
    }                                                                                                                  // 7855
    function scale(x) {                                                                                                // 7856
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];                                                      // 7857
    }                                                                                                                  // 7858
    scale.domain = function(x) {                                                                                       // 7859
      if (!arguments.length) return domain;                                                                            // 7860
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);                                                 // 7861
      return rescale();                                                                                                // 7862
    };                                                                                                                 // 7863
    scale.range = function(x) {                                                                                        // 7864
      if (!arguments.length) return range;                                                                             // 7865
      range = x;                                                                                                       // 7866
      return rescale();                                                                                                // 7867
    };                                                                                                                 // 7868
    scale.quantiles = function() {                                                                                     // 7869
      return thresholds;                                                                                               // 7870
    };                                                                                                                 // 7871
    scale.invertExtent = function(y) {                                                                                 // 7872
      y = range.indexOf(y);                                                                                            // 7873
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };                                                                                                                 // 7875
    scale.copy = function() {                                                                                          // 7876
      return d3_scale_quantile(domain, range);                                                                         // 7877
    };                                                                                                                 // 7878
    return rescale();                                                                                                  // 7879
  }                                                                                                                    // 7880
  d3.scale.quantize = function() {                                                                                     // 7881
    return d3_scale_quantize(0, 1, [ 0, 1 ]);                                                                          // 7882
  };                                                                                                                   // 7883
  function d3_scale_quantize(x0, x1, range) {                                                                          // 7884
    var kx, i;                                                                                                         // 7885
    function scale(x) {                                                                                                // 7886
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];                                               // 7887
    }                                                                                                                  // 7888
    function rescale() {                                                                                               // 7889
      kx = range.length / (x1 - x0);                                                                                   // 7890
      i = range.length - 1;                                                                                            // 7891
      return scale;                                                                                                    // 7892
    }                                                                                                                  // 7893
    scale.domain = function(x) {                                                                                       // 7894
      if (!arguments.length) return [ x0, x1 ];                                                                        // 7895
      x0 = +x[0];                                                                                                      // 7896
      x1 = +x[x.length - 1];                                                                                           // 7897
      return rescale();                                                                                                // 7898
    };                                                                                                                 // 7899
    scale.range = function(x) {                                                                                        // 7900
      if (!arguments.length) return range;                                                                             // 7901
      range = x;                                                                                                       // 7902
      return rescale();                                                                                                // 7903
    };                                                                                                                 // 7904
    scale.invertExtent = function(y) {                                                                                 // 7905
      y = range.indexOf(y);                                                                                            // 7906
      y = y < 0 ? NaN : y / kx + x0;                                                                                   // 7907
      return [ y, y + 1 / kx ];                                                                                        // 7908
    };                                                                                                                 // 7909
    scale.copy = function() {                                                                                          // 7910
      return d3_scale_quantize(x0, x1, range);                                                                         // 7911
    };                                                                                                                 // 7912
    return rescale();                                                                                                  // 7913
  }                                                                                                                    // 7914
  d3.scale.threshold = function() {                                                                                    // 7915
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);                                                                       // 7916
  };                                                                                                                   // 7917
  function d3_scale_threshold(domain, range) {                                                                         // 7918
    function scale(x) {                                                                                                // 7919
      if (x <= x) return range[d3.bisect(domain, x)];                                                                  // 7920
    }                                                                                                                  // 7921
    scale.domain = function(_) {                                                                                       // 7922
      if (!arguments.length) return domain;                                                                            // 7923
      domain = _;                                                                                                      // 7924
      return scale;                                                                                                    // 7925
    };                                                                                                                 // 7926
    scale.range = function(_) {                                                                                        // 7927
      if (!arguments.length) return range;                                                                             // 7928
      range = _;                                                                                                       // 7929
      return scale;                                                                                                    // 7930
    };                                                                                                                 // 7931
    scale.invertExtent = function(y) {                                                                                 // 7932
      y = range.indexOf(y);                                                                                            // 7933
      return [ domain[y - 1], domain[y] ];                                                                             // 7934
    };                                                                                                                 // 7935
    scale.copy = function() {                                                                                          // 7936
      return d3_scale_threshold(domain, range);                                                                        // 7937
    };                                                                                                                 // 7938
    return scale;                                                                                                      // 7939
  }                                                                                                                    // 7940
  d3.scale.identity = function() {                                                                                     // 7941
    return d3_scale_identity([ 0, 1 ]);                                                                                // 7942
  };                                                                                                                   // 7943
  function d3_scale_identity(domain) {                                                                                 // 7944
    function identity(x) {                                                                                             // 7945
      return +x;                                                                                                       // 7946
    }                                                                                                                  // 7947
    identity.invert = identity;                                                                                        // 7948
    identity.domain = identity.range = function(x) {                                                                   // 7949
      if (!arguments.length) return domain;                                                                            // 7950
      domain = x.map(identity);                                                                                        // 7951
      return identity;                                                                                                 // 7952
    };                                                                                                                 // 7953
    identity.ticks = function(m) {                                                                                     // 7954
      return d3_scale_linearTicks(domain, m);                                                                          // 7955
    };                                                                                                                 // 7956
    identity.tickFormat = function(m, format) {                                                                        // 7957
      return d3_scale_linearTickFormat(domain, m, format);                                                             // 7958
    };                                                                                                                 // 7959
    identity.copy = function() {                                                                                       // 7960
      return d3_scale_identity(domain);                                                                                // 7961
    };                                                                                                                 // 7962
    return identity;                                                                                                   // 7963
  }                                                                                                                    // 7964
  d3.svg = {};                                                                                                         // 7965
  function d3_zero() {                                                                                                 // 7966
    return 0;                                                                                                          // 7967
  }                                                                                                                    // 7968
  d3.svg.arc = function() {                                                                                            // 7969
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {                                                                                                   // 7971
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;                                                                          // 7973
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";                        // 7974
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];                                   // 7975
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {                                                          // 7976
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);          // 7977
        if (!cw) p1 *= -1;                                                                                             // 7978
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));                                                                  // 7979
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));                                                                  // 7980
      }                                                                                                                // 7981
      if (r1) {                                                                                                        // 7982
        x0 = r1 * Math.cos(a0 + p1);                                                                                   // 7983
        y0 = r1 * Math.sin(a0 + p1);                                                                                   // 7984
        x1 = r1 * Math.cos(a1 - p1);                                                                                   // 7985
        y1 = r1 * Math.sin(a1 - p1);                                                                                   // 7986
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;                                                              // 7987
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {                                                       // 7988
          var h1 = (a0 + a1) / 2;                                                                                      // 7989
          x0 = r1 * Math.cos(h1);                                                                                      // 7990
          y0 = r1 * Math.sin(h1);                                                                                      // 7991
          x1 = y1 = null;                                                                                              // 7992
        }                                                                                                              // 7993
      } else {                                                                                                         // 7994
        x0 = y0 = 0;                                                                                                   // 7995
      }                                                                                                                // 7996
      if (r0) {                                                                                                        // 7997
        x2 = r0 * Math.cos(a1 - p0);                                                                                   // 7998
        y2 = r0 * Math.sin(a1 - p0);                                                                                   // 7999
        x3 = r0 * Math.cos(a0 + p0);                                                                                   // 8000
        y3 = r0 * Math.sin(a0 + p0);                                                                                   // 8001
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;                                                              // 8002
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {                                                   // 8003
          var h0 = (a0 + a1) / 2;                                                                                      // 8004
          x2 = r0 * Math.cos(h0);                                                                                      // 8005
          y2 = r0 * Math.sin(h0);                                                                                      // 8006
          x3 = y3 = null;                                                                                              // 8007
        }                                                                                                              // 8008
      } else {                                                                                                         // 8009
        x2 = y2 = 0;                                                                                                   // 8010
      }                                                                                                                // 8011
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {             // 8012
        cr = r0 < r1 ^ cw ? 0 : 1;                                                                                     // 8013
        var rc1 = rc, rc0 = rc;                                                                                        // 8014
        if (da < π) {                                                                                                  // 8015
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));                                                                    // 8017
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));                                                                    // 8018
        }                                                                                                              // 8019
        if (x1 != null) {                                                                                              // 8020
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {                                                                                            // 8022
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {                                                                                                     // 8024
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);                                      // 8025
          }                                                                                                            // 8026
        } else {                                                                                                       // 8027
          path.push("M", x0, ",", y0);                                                                                 // 8028
        }                                                                                                              // 8029
        if (x3 != null) {                                                                                              // 8030
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {                                                                                            // 8032
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {                                                                                                     // 8034
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);                                      // 8035
          }                                                                                                            // 8036
        } else {                                                                                                       // 8037
          path.push("L", x2, ",", y2);                                                                                 // 8038
        }                                                                                                              // 8039
      } else {                                                                                                         // 8040
        path.push("M", x0, ",", y0);                                                                                   // 8041
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);                             // 8042
        path.push("L", x2, ",", y2);                                                                                   // 8043
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);                         // 8044
      }                                                                                                                // 8045
      path.push("Z");                                                                                                  // 8046
      return path.join("");                                                                                            // 8047
    }                                                                                                                  // 8048
    function circleSegment(r1, cw) {                                                                                   // 8049
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }                                                                                                                  // 8051
    arc.innerRadius = function(v) {                                                                                    // 8052
      if (!arguments.length) return innerRadius;                                                                       // 8053
      innerRadius = d3_functor(v);                                                                                     // 8054
      return arc;                                                                                                      // 8055
    };                                                                                                                 // 8056
    arc.outerRadius = function(v) {                                                                                    // 8057
      if (!arguments.length) return outerRadius;                                                                       // 8058
      outerRadius = d3_functor(v);                                                                                     // 8059
      return arc;                                                                                                      // 8060
    };                                                                                                                 // 8061
    arc.cornerRadius = function(v) {                                                                                   // 8062
      if (!arguments.length) return cornerRadius;                                                                      // 8063
      cornerRadius = d3_functor(v);                                                                                    // 8064
      return arc;                                                                                                      // 8065
    };                                                                                                                 // 8066
    arc.padRadius = function(v) {                                                                                      // 8067
      if (!arguments.length) return padRadius;                                                                         // 8068
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);                                                // 8069
      return arc;                                                                                                      // 8070
    };                                                                                                                 // 8071
    arc.startAngle = function(v) {                                                                                     // 8072
      if (!arguments.length) return startAngle;                                                                        // 8073
      startAngle = d3_functor(v);                                                                                      // 8074
      return arc;                                                                                                      // 8075
    };                                                                                                                 // 8076
    arc.endAngle = function(v) {                                                                                       // 8077
      if (!arguments.length) return endAngle;                                                                          // 8078
      endAngle = d3_functor(v);                                                                                        // 8079
      return arc;                                                                                                      // 8080
    };                                                                                                                 // 8081
    arc.padAngle = function(v) {                                                                                       // 8082
      if (!arguments.length) return padAngle;                                                                          // 8083
      padAngle = d3_functor(v);                                                                                        // 8084
      return arc;                                                                                                      // 8085
    };                                                                                                                 // 8086
    arc.centroid = function() {                                                                                        // 8087
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];                                                                     // 8089
    };                                                                                                                 // 8090
    return arc;                                                                                                        // 8091
  };                                                                                                                   // 8092
  var d3_svg_arcAuto = "auto";                                                                                         // 8093
  function d3_svg_arcInnerRadius(d) {                                                                                  // 8094
    return d.innerRadius;                                                                                              // 8095
  }                                                                                                                    // 8096
  function d3_svg_arcOuterRadius(d) {                                                                                  // 8097
    return d.outerRadius;                                                                                              // 8098
  }                                                                                                                    // 8099
  function d3_svg_arcStartAngle(d) {                                                                                   // 8100
    return d.startAngle;                                                                                               // 8101
  }                                                                                                                    // 8102
  function d3_svg_arcEndAngle(d) {                                                                                     // 8103
    return d.endAngle;                                                                                                 // 8104
  }                                                                                                                    // 8105
  function d3_svg_arcPadAngle(d) {                                                                                     // 8106
    return d && d.padAngle;                                                                                            // 8107
  }                                                                                                                    // 8108
  function d3_svg_arcSweep(x0, y0, x1, y1) {                                                                           // 8109
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;                                                                // 8110
  }                                                                                                                    // 8111
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {                                                              // 8112
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;                                           // 8114
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];                                                 // 8115
  }                                                                                                                    // 8116
  function d3_svg_line(projection) {                                                                                   // 8117
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {                                                                                              // 8119
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);              // 8120
      function segment() {                                                                                             // 8121
        segments.push("M", interpolate(projection(points), tension));                                                  // 8122
      }                                                                                                                // 8123
      while (++i < n) {                                                                                                // 8124
        if (defined.call(this, d = data[i], i)) {                                                                      // 8125
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);                                                 // 8126
        } else if (points.length) {                                                                                    // 8127
          segment();                                                                                                   // 8128
          points = [];                                                                                                 // 8129
        }                                                                                                              // 8130
      }                                                                                                                // 8131
      if (points.length) segment();                                                                                    // 8132
      return segments.length ? segments.join("") : null;                                                               // 8133
    }                                                                                                                  // 8134
    line.x = function(_) {                                                                                             // 8135
      if (!arguments.length) return x;                                                                                 // 8136
      x = _;                                                                                                           // 8137
      return line;                                                                                                     // 8138
    };                                                                                                                 // 8139
    line.y = function(_) {                                                                                             // 8140
      if (!arguments.length) return y;                                                                                 // 8141
      y = _;                                                                                                           // 8142
      return line;                                                                                                     // 8143
    };                                                                                                                 // 8144
    line.defined = function(_) {                                                                                       // 8145
      if (!arguments.length) return defined;                                                                           // 8146
      defined = _;                                                                                                     // 8147
      return line;                                                                                                     // 8148
    };                                                                                                                 // 8149
    line.interpolate = function(_) {                                                                                   // 8150
      if (!arguments.length) return interpolateKey;                                                                    // 8151
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;                                                                                                     // 8153
    };                                                                                                                 // 8154
    line.tension = function(_) {                                                                                       // 8155
      if (!arguments.length) return tension;                                                                           // 8156
      tension = _;                                                                                                     // 8157
      return line;                                                                                                     // 8158
    };                                                                                                                 // 8159
    return line;                                                                                                       // 8160
  }                                                                                                                    // 8161
  d3.svg.line = function() {                                                                                           // 8162
    return d3_svg_line(d3_identity);                                                                                   // 8163
  };                                                                                                                   // 8164
  var d3_svg_lineInterpolators = d3.map({                                                                              // 8165
    linear: d3_svg_lineLinear,                                                                                         // 8166
    "linear-closed": d3_svg_lineLinearClosed,                                                                          // 8167
    step: d3_svg_lineStep,                                                                                             // 8168
    "step-before": d3_svg_lineStepBefore,                                                                              // 8169
    "step-after": d3_svg_lineStepAfter,                                                                                // 8170
    basis: d3_svg_lineBasis,                                                                                           // 8171
    "basis-open": d3_svg_lineBasisOpen,                                                                                // 8172
    "basis-closed": d3_svg_lineBasisClosed,                                                                            // 8173
    bundle: d3_svg_lineBundle,                                                                                         // 8174
    cardinal: d3_svg_lineCardinal,                                                                                     // 8175
    "cardinal-open": d3_svg_lineCardinalOpen,                                                                          // 8176
    "cardinal-closed": d3_svg_lineCardinalClosed,                                                                      // 8177
    monotone: d3_svg_lineMonotone                                                                                      // 8178
  });                                                                                                                  // 8179
  d3_svg_lineInterpolators.forEach(function(key, value) {                                                              // 8180
    value.key = key;                                                                                                   // 8181
    value.closed = /-closed$/.test(key);                                                                               // 8182
  });                                                                                                                  // 8183
  function d3_svg_lineLinear(points) {                                                                                 // 8184
    return points.length > 1 ? points.join("L") : points + "Z";                                                        // 8185
  }                                                                                                                    // 8186
  function d3_svg_lineLinearClosed(points) {                                                                           // 8187
    return points.join("L") + "Z";                                                                                     // 8188
  }                                                                                                                    // 8189
  function d3_svg_lineStep(points) {                                                                                   // 8190
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];                                           // 8191
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);                                        // 8192
    if (n > 1) path.push("H", p[0]);                                                                                   // 8193
    return path.join("");                                                                                              // 8194
  }                                                                                                                    // 8195
  function d3_svg_lineStepBefore(points) {                                                                             // 8196
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];                                           // 8197
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);                                                     // 8198
    return path.join("");                                                                                              // 8199
  }                                                                                                                    // 8200
  function d3_svg_lineStepAfter(points) {                                                                              // 8201
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];                                           // 8202
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);                                                     // 8203
    return path.join("");                                                                                              // 8204
  }                                                                                                                    // 8205
  function d3_svg_lineCardinalOpen(points, tension) {                                                                  // 8206
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }                                                                                                                    // 8208
  function d3_svg_lineCardinalClosed(points, tension) {                                                                // 8209
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));       // 8211
  }                                                                                                                    // 8212
  function d3_svg_lineCardinal(points, tension) {                                                                      // 8213
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }                                                                                                                    // 8215
  function d3_svg_lineHermite(points, tangents) {                                                                      // 8216
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {             // 8217
      return d3_svg_lineLinear(points);                                                                                // 8218
    }                                                                                                                  // 8219
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {                                                                                                        // 8221
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];                   // 8222
      p0 = points[1];                                                                                                  // 8223
      pi = 2;                                                                                                          // 8224
    }                                                                                                                  // 8225
    if (tangents.length > 1) {                                                                                         // 8226
      t = tangents[1];                                                                                                 // 8227
      p = points[pi];                                                                                                  // 8228
      pi++;                                                                                                            // 8229
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {                                                                // 8231
        p = points[pi];                                                                                                // 8232
        t = tangents[i];                                                                                               // 8233
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];                                   // 8234
      }                                                                                                                // 8235
    }                                                                                                                  // 8236
    if (quad) {                                                                                                        // 8237
      var lp = points[pi];                                                                                             // 8238
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];                   // 8239
    }                                                                                                                  // 8240
    return path;                                                                                                       // 8241
  }                                                                                                                    // 8242
  function d3_svg_lineCardinalTangents(points, tension) {                                                              // 8243
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;            // 8244
    while (++i < n) {                                                                                                  // 8245
      p0 = p1;                                                                                                         // 8246
      p1 = p2;                                                                                                         // 8247
      p2 = points[i];                                                                                                  // 8248
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);                                                     // 8249
    }                                                                                                                  // 8250
    return tangents;                                                                                                   // 8251
  }                                                                                                                    // 8252
  function d3_svg_lineBasis(points) {                                                                                  // 8253
    if (points.length < 3) return d3_svg_lineLinear(points);                                                           // 8254
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);                                                                                        // 8256
    while (++i <= n) {                                                                                                 // 8257
      pi = points[i];                                                                                                  // 8258
      px.shift();                                                                                                      // 8259
      px.push(pi[0]);                                                                                                  // 8260
      py.shift();                                                                                                      // 8261
      py.push(pi[1]);                                                                                                  // 8262
      d3_svg_lineBasisBezier(path, px, py);                                                                            // 8263
    }                                                                                                                  // 8264
    points.pop();                                                                                                      // 8265
    path.push("L", pi);                                                                                                // 8266
    return path.join("");                                                                                              // 8267
  }                                                                                                                    // 8268
  function d3_svg_lineBasisOpen(points) {                                                                              // 8269
    if (points.length < 4) return d3_svg_lineLinear(points);                                                           // 8270
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];                                              // 8271
    while (++i < 3) {                                                                                                  // 8272
      pi = points[i];                                                                                                  // 8273
      px.push(pi[0]);                                                                                                  // 8274
      py.push(pi[1]);                                                                                                  // 8275
    }                                                                                                                  // 8276
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));      // 8277
    --i;                                                                                                               // 8278
    while (++i < n) {                                                                                                  // 8279
      pi = points[i];                                                                                                  // 8280
      px.shift();                                                                                                      // 8281
      px.push(pi[0]);                                                                                                  // 8282
      py.shift();                                                                                                      // 8283
      py.push(pi[1]);                                                                                                  // 8284
      d3_svg_lineBasisBezier(path, px, py);                                                                            // 8285
    }                                                                                                                  // 8286
    return path.join("");                                                                                              // 8287
  }                                                                                                                    // 8288
  function d3_svg_lineBasisClosed(points) {                                                                            // 8289
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];                                              // 8290
    while (++i < 4) {                                                                                                  // 8291
      pi = points[i % n];                                                                                              // 8292
      px.push(pi[0]);                                                                                                  // 8293
      py.push(pi[1]);                                                                                                  // 8294
    }                                                                                                                  // 8295
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];        // 8296
    --i;                                                                                                               // 8297
    while (++i < m) {                                                                                                  // 8298
      pi = points[i % n];                                                                                              // 8299
      px.shift();                                                                                                      // 8300
      px.push(pi[0]);                                                                                                  // 8301
      py.shift();                                                                                                      // 8302
      py.push(pi[1]);                                                                                                  // 8303
      d3_svg_lineBasisBezier(path, px, py);                                                                            // 8304
    }                                                                                                                  // 8305
    return path.join("");                                                                                              // 8306
  }                                                                                                                    // 8307
  function d3_svg_lineBundle(points, tension) {                                                                        // 8308
    var n = points.length - 1;                                                                                         // 8309
    if (n) {                                                                                                           // 8310
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;          // 8311
      while (++i <= n) {                                                                                               // 8312
        p = points[i];                                                                                                 // 8313
        t = i / n;                                                                                                     // 8314
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);                                                         // 8315
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);                                                         // 8316
      }                                                                                                                // 8317
    }                                                                                                                  // 8318
    return d3_svg_lineBasis(points);                                                                                   // 8319
  }                                                                                                                    // 8320
  function d3_svg_lineDot4(a, b) {                                                                                     // 8321
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];                                                      // 8322
  }                                                                                                                    // 8323
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {                                                                        // 8325
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }                                                                                                                    // 8327
  function d3_svg_lineSlope(p0, p1) {                                                                                  // 8328
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);                                                                          // 8329
  }                                                                                                                    // 8330
  function d3_svg_lineFiniteDifferences(points) {                                                                      // 8331
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);     // 8332
    while (++i < j) {                                                                                                  // 8333
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;                                            // 8334
    }                                                                                                                  // 8335
    m[i] = d;                                                                                                          // 8336
    return m;                                                                                                          // 8337
  }                                                                                                                    // 8338
  function d3_svg_lineMonotoneTangents(points) {                                                                       // 8339
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;            // 8340
    while (++i < j) {                                                                                                  // 8341
      d = d3_svg_lineSlope(points[i], points[i + 1]);                                                                  // 8342
      if (abs(d) < ε) {                                                                                                // 8343
        m[i] = m[i + 1] = 0;                                                                                           // 8344
      } else {                                                                                                         // 8345
        a = m[i] / d;                                                                                                  // 8346
        b = m[i + 1] / d;                                                                                              // 8347
        s = a * a + b * b;                                                                                             // 8348
        if (s > 9) {                                                                                                   // 8349
          s = d * 3 / Math.sqrt(s);                                                                                    // 8350
          m[i] = s * a;                                                                                                // 8351
          m[i + 1] = s * b;                                                                                            // 8352
        }                                                                                                              // 8353
      }                                                                                                                // 8354
    }                                                                                                                  // 8355
    i = -1;                                                                                                            // 8356
    while (++i <= j) {                                                                                                 // 8357
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));                   // 8358
      tangents.push([ s || 0, m[i] * s || 0 ]);                                                                        // 8359
    }                                                                                                                  // 8360
    return tangents;                                                                                                   // 8361
  }                                                                                                                    // 8362
  function d3_svg_lineMonotone(points) {                                                                               // 8363
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }                                                                                                                    // 8365
  d3.svg.line.radial = function() {                                                                                    // 8366
    var line = d3_svg_line(d3_svg_lineRadial);                                                                         // 8367
    line.radius = line.x, delete line.x;                                                                               // 8368
    line.angle = line.y, delete line.y;                                                                                // 8369
    return line;                                                                                                       // 8370
  };                                                                                                                   // 8371
  function d3_svg_lineRadial(points) {                                                                                 // 8372
    var point, i = -1, n = points.length, r, a;                                                                        // 8373
    while (++i < n) {                                                                                                  // 8374
      point = points[i];                                                                                               // 8375
      r = point[0];                                                                                                    // 8376
      a = point[1] - halfπ;                                                                                            // 8377
      point[0] = r * Math.cos(a);                                                                                      // 8378
      point[1] = r * Math.sin(a);                                                                                      // 8379
    }                                                                                                                  // 8380
    return points;                                                                                                     // 8381
  }                                                                                                                    // 8382
  function d3_svg_area(projection) {                                                                                   // 8383
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {                                                                                              // 8385
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;                                                                                                      // 8387
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {                                                               // 8388
        return y;                                                                                                      // 8389
      } : d3_functor(y1), x, y;                                                                                        // 8390
      function segment() {                                                                                             // 8391
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }                                                                                                                // 8393
      while (++i < n) {                                                                                                // 8394
        if (defined.call(this, d = data[i], i)) {                                                                      // 8395
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);                                      // 8396
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);                                              // 8397
        } else if (points0.length) {                                                                                   // 8398
          segment();                                                                                                   // 8399
          points0 = [];                                                                                                // 8400
          points1 = [];                                                                                                // 8401
        }                                                                                                              // 8402
      }                                                                                                                // 8403
      if (points0.length) segment();                                                                                   // 8404
      return segments.length ? segments.join("") : null;                                                               // 8405
    }                                                                                                                  // 8406
    area.x = function(_) {                                                                                             // 8407
      if (!arguments.length) return x1;                                                                                // 8408
      x0 = x1 = _;                                                                                                     // 8409
      return area;                                                                                                     // 8410
    };                                                                                                                 // 8411
    area.x0 = function(_) {                                                                                            // 8412
      if (!arguments.length) return x0;                                                                                // 8413
      x0 = _;                                                                                                          // 8414
      return area;                                                                                                     // 8415
    };                                                                                                                 // 8416
    area.x1 = function(_) {                                                                                            // 8417
      if (!arguments.length) return x1;                                                                                // 8418
      x1 = _;                                                                                                          // 8419
      return area;                                                                                                     // 8420
    };                                                                                                                 // 8421
    area.y = function(_) {                                                                                             // 8422
      if (!arguments.length) return y1;                                                                                // 8423
      y0 = y1 = _;                                                                                                     // 8424
      return area;                                                                                                     // 8425
    };                                                                                                                 // 8426
    area.y0 = function(_) {                                                                                            // 8427
      if (!arguments.length) return y0;                                                                                // 8428
      y0 = _;                                                                                                          // 8429
      return area;                                                                                                     // 8430
    };                                                                                                                 // 8431
    area.y1 = function(_) {                                                                                            // 8432
      if (!arguments.length) return y1;                                                                                // 8433
      y1 = _;                                                                                                          // 8434
      return area;                                                                                                     // 8435
    };                                                                                                                 // 8436
    area.defined = function(_) {                                                                                       // 8437
      if (!arguments.length) return defined;                                                                           // 8438
      defined = _;                                                                                                     // 8439
      return area;                                                                                                     // 8440
    };                                                                                                                 // 8441
    area.interpolate = function(_) {                                                                                   // 8442
      if (!arguments.length) return interpolateKey;                                                                    // 8443
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;                                                         // 8445
      L = interpolate.closed ? "M" : "L";                                                                              // 8446
      return area;                                                                                                     // 8447
    };                                                                                                                 // 8448
    area.tension = function(_) {                                                                                       // 8449
      if (!arguments.length) return tension;                                                                           // 8450
      tension = _;                                                                                                     // 8451
      return area;                                                                                                     // 8452
    };                                                                                                                 // 8453
    return area;                                                                                                       // 8454
  }                                                                                                                    // 8455
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;                                                                // 8456
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;                                                                // 8457
  d3.svg.area = function() {                                                                                           // 8458
    return d3_svg_area(d3_identity);                                                                                   // 8459
  };                                                                                                                   // 8460
  d3.svg.area.radial = function() {                                                                                    // 8461
    var area = d3_svg_area(d3_svg_lineRadial);                                                                         // 8462
    area.radius = area.x, delete area.x;                                                                               // 8463
    area.innerRadius = area.x0, delete area.x0;                                                                        // 8464
    area.outerRadius = area.x1, delete area.x1;                                                                        // 8465
    area.angle = area.y, delete area.y;                                                                                // 8466
    area.startAngle = area.y0, delete area.y0;                                                                         // 8467
    area.endAngle = area.y1, delete area.y1;                                                                           // 8468
    return area;                                                                                                       // 8469
  };                                                                                                                   // 8470
  d3.svg.chord = function() {                                                                                          // 8471
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {                                                                                             // 8473
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);                                          // 8474
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }                                                                                                                  // 8476
    function subgroup(self, f, d, i) {                                                                                 // 8477
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {                                                                                                         // 8479
        r: r,                                                                                                          // 8480
        a0: a0,                                                                                                        // 8481
        a1: a1,                                                                                                        // 8482
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],                                                                    // 8483
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]                                                                     // 8484
      };                                                                                                               // 8485
    }                                                                                                                  // 8486
    function equals(a, b) {                                                                                            // 8487
      return a.a0 == b.a0 && a.a1 == b.a1;                                                                             // 8488
    }                                                                                                                  // 8489
    function arc(r, p, a) {                                                                                            // 8490
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;                                                         // 8491
    }                                                                                                                  // 8492
    function curve(r0, p0, r1, p1) {                                                                                   // 8493
      return "Q 0,0 " + p1;                                                                                            // 8494
    }                                                                                                                  // 8495
    chord.radius = function(v) {                                                                                       // 8496
      if (!arguments.length) return radius;                                                                            // 8497
      radius = d3_functor(v);                                                                                          // 8498
      return chord;                                                                                                    // 8499
    };                                                                                                                 // 8500
    chord.source = function(v) {                                                                                       // 8501
      if (!arguments.length) return source;                                                                            // 8502
      source = d3_functor(v);                                                                                          // 8503
      return chord;                                                                                                    // 8504
    };                                                                                                                 // 8505
    chord.target = function(v) {                                                                                       // 8506
      if (!arguments.length) return target;                                                                            // 8507
      target = d3_functor(v);                                                                                          // 8508
      return chord;                                                                                                    // 8509
    };                                                                                                                 // 8510
    chord.startAngle = function(v) {                                                                                   // 8511
      if (!arguments.length) return startAngle;                                                                        // 8512
      startAngle = d3_functor(v);                                                                                      // 8513
      return chord;                                                                                                    // 8514
    };                                                                                                                 // 8515
    chord.endAngle = function(v) {                                                                                     // 8516
      if (!arguments.length) return endAngle;                                                                          // 8517
      endAngle = d3_functor(v);                                                                                        // 8518
      return chord;                                                                                                    // 8519
    };                                                                                                                 // 8520
    return chord;                                                                                                      // 8521
  };                                                                                                                   // 8522
  function d3_svg_chordRadius(d) {                                                                                     // 8523
    return d.radius;                                                                                                   // 8524
  }                                                                                                                    // 8525
  d3.svg.diagonal = function() {                                                                                       // 8526
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;                                // 8527
    function diagonal(d, i) {                                                                                          // 8528
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {               // 8529
        x: p0.x,                                                                                                       // 8530
        y: m                                                                                                           // 8531
      }, {                                                                                                             // 8532
        x: p3.x,                                                                                                       // 8533
        y: m                                                                                                           // 8534
      }, p3 ];                                                                                                         // 8535
      p = p.map(projection);                                                                                           // 8536
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];                                                        // 8537
    }                                                                                                                  // 8538
    diagonal.source = function(x) {                                                                                    // 8539
      if (!arguments.length) return source;                                                                            // 8540
      source = d3_functor(x);                                                                                          // 8541
      return diagonal;                                                                                                 // 8542
    };                                                                                                                 // 8543
    diagonal.target = function(x) {                                                                                    // 8544
      if (!arguments.length) return target;                                                                            // 8545
      target = d3_functor(x);                                                                                          // 8546
      return diagonal;                                                                                                 // 8547
    };                                                                                                                 // 8548
    diagonal.projection = function(x) {                                                                                // 8549
      if (!arguments.length) return projection;                                                                        // 8550
      projection = x;                                                                                                  // 8551
      return diagonal;                                                                                                 // 8552
    };                                                                                                                 // 8553
    return diagonal;                                                                                                   // 8554
  };                                                                                                                   // 8555
  function d3_svg_diagonalProjection(d) {                                                                              // 8556
    return [ d.x, d.y ];                                                                                               // 8557
  }                                                                                                                    // 8558
  d3.svg.diagonal.radial = function() {                                                                                // 8559
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;       // 8560
    diagonal.projection = function(x) {                                                                                // 8561
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;             // 8562
    };                                                                                                                 // 8563
    return diagonal;                                                                                                   // 8564
  };                                                                                                                   // 8565
  function d3_svg_diagonalRadialProjection(projection) {                                                               // 8566
    return function() {                                                                                                // 8567
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;                                           // 8568
      return [ r * Math.cos(a), r * Math.sin(a) ];                                                                     // 8569
    };                                                                                                                 // 8570
  }                                                                                                                    // 8571
  d3.svg.symbol = function() {                                                                                         // 8572
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;                                                            // 8573
    function symbol(d, i) {                                                                                            // 8574
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));                // 8575
    }                                                                                                                  // 8576
    symbol.type = function(x) {                                                                                        // 8577
      if (!arguments.length) return type;                                                                              // 8578
      type = d3_functor(x);                                                                                            // 8579
      return symbol;                                                                                                   // 8580
    };                                                                                                                 // 8581
    symbol.size = function(x) {                                                                                        // 8582
      if (!arguments.length) return size;                                                                              // 8583
      size = d3_functor(x);                                                                                            // 8584
      return symbol;                                                                                                   // 8585
    };                                                                                                                 // 8586
    return symbol;                                                                                                     // 8587
  };                                                                                                                   // 8588
  function d3_svg_symbolSize() {                                                                                       // 8589
    return 64;                                                                                                         // 8590
  }                                                                                                                    // 8591
  function d3_svg_symbolType() {                                                                                       // 8592
    return "circle";                                                                                                   // 8593
  }                                                                                                                    // 8594
  function d3_svg_symbolCircle(size) {                                                                                 // 8595
    var r = Math.sqrt(size / π);                                                                                       // 8596
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";               // 8597
  }                                                                                                                    // 8598
  var d3_svg_symbols = d3.map({                                                                                        // 8599
    circle: d3_svg_symbolCircle,                                                                                       // 8600
    cross: function(size) {                                                                                            // 8601
      var r = Math.sqrt(size / 5) / 2;                                                                                 // 8602
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },                                                                                                                 // 8604
    diamond: function(size) {                                                                                          // 8605
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;                               // 8606
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";                                      // 8607
    },                                                                                                                 // 8608
    square: function(size) {                                                                                           // 8609
      var r = Math.sqrt(size) / 2;                                                                                     // 8610
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";                  // 8611
    },                                                                                                                 // 8612
    "triangle-down": function(size) {                                                                                  // 8613
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;                                 // 8614
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";                                          // 8615
    },                                                                                                                 // 8616
    "triangle-up": function(size) {                                                                                    // 8617
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;                                 // 8618
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";                                           // 8619
    }                                                                                                                  // 8620
  });                                                                                                                  // 8621
  d3.svg.symbolTypes = d3_svg_symbols.keys();                                                                          // 8622
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);                               // 8623
  d3_selectionPrototype.transition = function(name) {                                                                  // 8624
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),                                                                                                // 8626
      ease: d3_ease_cubicInOut,                                                                                        // 8627
      delay: 0,                                                                                                        // 8628
      duration: 250                                                                                                    // 8629
    };                                                                                                                 // 8630
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 8631
      subgroups.push(subgroup = []);                                                                                   // 8632
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 8633
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);                                           // 8634
        subgroup.push(node);                                                                                           // 8635
      }                                                                                                                // 8636
    }                                                                                                                  // 8637
    return d3_transition(subgroups, ns, id);                                                                           // 8638
  };                                                                                                                   // 8639
  d3_selectionPrototype.interrupt = function(name) {                                                                   // 8640
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));  // 8641
  };                                                                                                                   // 8642
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());                                     // 8643
  function d3_selection_interruptNS(ns) {                                                                              // 8644
    return function() {                                                                                                // 8645
      var lock, activeId, active;                                                                                      // 8646
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {                                              // 8647
        active.timer.c = null;                                                                                         // 8648
        active.timer.t = NaN;                                                                                          // 8649
        if (--lock.count) delete lock[activeId]; else delete this[ns];                                                 // 8650
        lock.active += .5;                                                                                             // 8651
        active.event && active.event.interrupt.call(this, this.__data__, active.index);                                // 8652
      }                                                                                                                // 8653
    };                                                                                                                 // 8654
  }                                                                                                                    // 8655
  function d3_transition(groups, ns, id) {                                                                             // 8656
    d3_subclass(groups, d3_transitionPrototype);                                                                       // 8657
    groups.namespace = ns;                                                                                             // 8658
    groups.id = id;                                                                                                    // 8659
    return groups;                                                                                                     // 8660
  }                                                                                                                    // 8661
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;                  // 8662
  d3_transitionPrototype.call = d3_selectionPrototype.call;                                                            // 8663
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;                                                          // 8664
  d3_transitionPrototype.node = d3_selectionPrototype.node;                                                            // 8665
  d3_transitionPrototype.size = d3_selectionPrototype.size;                                                            // 8666
  d3.transition = function(selection, name) {                                                                          // 8667
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };                                                                                                                   // 8669
  d3.transition.prototype = d3_transitionPrototype;                                                                    // 8670
  d3_transitionPrototype.select = function(selector) {                                                                 // 8671
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;                                    // 8672
    selector = d3_selection_selector(selector);                                                                        // 8673
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 8674
      subgroups.push(subgroup = []);                                                                                   // 8675
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 8676
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {                               // 8677
          if ("__data__" in node) subnode.__data__ = node.__data__;                                                    // 8678
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);                                                         // 8679
          subgroup.push(subnode);                                                                                      // 8680
        } else {                                                                                                       // 8681
          subgroup.push(null);                                                                                         // 8682
        }                                                                                                              // 8683
      }                                                                                                                // 8684
    }                                                                                                                  // 8685
    return d3_transition(subgroups, ns, id);                                                                           // 8686
  };                                                                                                                   // 8687
  d3_transitionPrototype.selectAll = function(selector) {                                                              // 8688
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;              // 8689
    selector = d3_selection_selectorAll(selector);                                                                     // 8690
    for (var j = -1, m = this.length; ++j < m; ) {                                                                     // 8691
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {                                                 // 8692
        if (node = group[i]) {                                                                                         // 8693
          transition = node[ns][id];                                                                                   // 8694
          subnodes = selector.call(node, node.__data__, i, j);                                                         // 8695
          subgroups.push(subgroup = []);                                                                               // 8696
          for (var k = -1, o = subnodes.length; ++k < o; ) {                                                           // 8697
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);                              // 8698
            subgroup.push(subnode);                                                                                    // 8699
          }                                                                                                            // 8700
        }                                                                                                              // 8701
      }                                                                                                                // 8702
    }                                                                                                                  // 8703
    return d3_transition(subgroups, ns, id);                                                                           // 8704
  };                                                                                                                   // 8705
  d3_transitionPrototype.filter = function(filter) {                                                                   // 8706
    var subgroups = [], subgroup, group, node;                                                                         // 8707
    if (typeof filter !== "function") filter = d3_selection_filter(filter);                                            // 8708
    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 8709
      subgroups.push(subgroup = []);                                                                                   // 8710
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 8711
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {                                             // 8712
          subgroup.push(node);                                                                                         // 8713
        }                                                                                                              // 8714
      }                                                                                                                // 8715
    }                                                                                                                  // 8716
    return d3_transition(subgroups, this.namespace, this.id);                                                          // 8717
  };                                                                                                                   // 8718
  d3_transitionPrototype.tween = function(name, tween) {                                                               // 8719
    var id = this.id, ns = this.namespace;                                                                             // 8720
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);                                              // 8721
    return d3_selection_each(this, tween == null ? function(node) {                                                    // 8722
      node[ns][id].tween.remove(name);                                                                                 // 8723
    } : function(node) {                                                                                               // 8724
      node[ns][id].tween.set(name, tween);                                                                             // 8725
    });                                                                                                                // 8726
  };                                                                                                                   // 8727
  function d3_transition_tween(groups, name, value, tween) {                                                           // 8728
    var id = groups.id, ns = groups.namespace;                                                                         // 8729
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {                              // 8730
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));                                      // 8731
    } : (value = tween(value), function(node) {                                                                        // 8732
      node[ns][id].tween.set(name, value);                                                                             // 8733
    }));                                                                                                               // 8734
  }                                                                                                                    // 8735
  d3_transitionPrototype.attr = function(nameNS, value) {                                                              // 8736
    if (arguments.length < 2) {                                                                                        // 8737
      for (value in nameNS) this.attr(value, nameNS[value]);                                                           // 8738
      return this;                                                                                                     // 8739
    }                                                                                                                  // 8740
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);  // 8741
    function attrNull() {                                                                                              // 8742
      this.removeAttribute(name);                                                                                      // 8743
    }                                                                                                                  // 8744
    function attrNullNS() {                                                                                            // 8745
      this.removeAttributeNS(name.space, name.local);                                                                  // 8746
    }                                                                                                                  // 8747
    function attrTween(b) {                                                                                            // 8748
      return b == null ? attrNull : (b += "", function() {                                                             // 8749
        var a = this.getAttribute(name), i;                                                                            // 8750
        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 8751
          this.setAttribute(name, i(t));                                                                               // 8752
        });                                                                                                            // 8753
      });                                                                                                              // 8754
    }                                                                                                                  // 8755
    function attrTweenNS(b) {                                                                                          // 8756
      return b == null ? attrNullNS : (b += "", function() {                                                           // 8757
        var a = this.getAttributeNS(name.space, name.local), i;                                                        // 8758
        return a !== b && (i = interpolate(a, b), function(t) {                                                        // 8759
          this.setAttributeNS(name.space, name.local, i(t));                                                           // 8760
        });                                                                                                            // 8761
      });                                                                                                              // 8762
    }                                                                                                                  // 8763
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);                   // 8764
  };                                                                                                                   // 8765
  d3_transitionPrototype.attrTween = function(nameNS, tween) {                                                         // 8766
    var name = d3.ns.qualify(nameNS);                                                                                  // 8767
    function attrTween(d, i) {                                                                                         // 8768
      var f = tween.call(this, d, i, this.getAttribute(name));                                                         // 8769
      return f && function(t) {                                                                                        // 8770
        this.setAttribute(name, f(t));                                                                                 // 8771
      };                                                                                                               // 8772
    }                                                                                                                  // 8773
    function attrTweenNS(d, i) {                                                                                       // 8774
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));                                     // 8775
      return f && function(t) {                                                                                        // 8776
        this.setAttributeNS(name.space, name.local, f(t));                                                             // 8777
      };                                                                                                               // 8778
    }                                                                                                                  // 8779
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);                                         // 8780
  };                                                                                                                   // 8781
  d3_transitionPrototype.style = function(name, value, priority) {                                                     // 8782
    var n = arguments.length;                                                                                          // 8783
    if (n < 3) {                                                                                                       // 8784
      if (typeof name !== "string") {                                                                                  // 8785
        if (n < 2) value = "";                                                                                         // 8786
        for (priority in name) this.style(priority, name[priority], value);                                            // 8787
        return this;                                                                                                   // 8788
      }                                                                                                                // 8789
      priority = "";                                                                                                   // 8790
    }                                                                                                                  // 8791
    function styleNull() {                                                                                             // 8792
      this.style.removeProperty(name);                                                                                 // 8793
    }                                                                                                                  // 8794
    function styleString(b) {                                                                                          // 8795
      return b == null ? styleNull : (b += "", function() {                                                            // 8796
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;                                // 8797
        return a !== b && (i = d3_interpolate(a, b), function(t) {                                                     // 8798
          this.style.setProperty(name, i(t), priority);                                                                // 8799
        });                                                                                                            // 8800
      });                                                                                                              // 8801
    }                                                                                                                  // 8802
    return d3_transition_tween(this, "style." + name, value, styleString);                                             // 8803
  };                                                                                                                   // 8804
  d3_transitionPrototype.styleTween = function(name, tween, priority) {                                                // 8805
    if (arguments.length < 3) priority = "";                                                                           // 8806
    function styleTween(d, i) {                                                                                        // 8807
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));             // 8808
      return f && function(t) {                                                                                        // 8809
        this.style.setProperty(name, f(t), priority);                                                                  // 8810
      };                                                                                                               // 8811
    }                                                                                                                  // 8812
    return this.tween("style." + name, styleTween);                                                                    // 8813
  };                                                                                                                   // 8814
  d3_transitionPrototype.text = function(value) {                                                                      // 8815
    return d3_transition_tween(this, "text", value, d3_transition_text);                                               // 8816
  };                                                                                                                   // 8817
  function d3_transition_text(b) {                                                                                     // 8818
    if (b == null) b = "";                                                                                             // 8819
    return function() {                                                                                                // 8820
      this.textContent = b;                                                                                            // 8821
    };                                                                                                                 // 8822
  }                                                                                                                    // 8823
  d3_transitionPrototype.remove = function() {                                                                         // 8824
    var ns = this.namespace;                                                                                           // 8825
    return this.each("end.transition", function() {                                                                    // 8826
      var p;                                                                                                           // 8827
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);                                            // 8828
    });                                                                                                                // 8829
  };                                                                                                                   // 8830
  d3_transitionPrototype.ease = function(value) {                                                                      // 8831
    var id = this.id, ns = this.namespace;                                                                             // 8832
    if (arguments.length < 1) return this.node()[ns][id].ease;                                                         // 8833
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);                                             // 8834
    return d3_selection_each(this, function(node) {                                                                    // 8835
      node[ns][id].ease = value;                                                                                       // 8836
    });                                                                                                                // 8837
  };                                                                                                                   // 8838
  d3_transitionPrototype.delay = function(value) {                                                                     // 8839
    var id = this.id, ns = this.namespace;                                                                             // 8840
    if (arguments.length < 1) return this.node()[ns][id].delay;                                                        // 8841
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {                                // 8842
      node[ns][id].delay = +value.call(node, node.__data__, i, j);                                                     // 8843
    } : (value = +value, function(node) {                                                                              // 8844
      node[ns][id].delay = value;                                                                                      // 8845
    }));                                                                                                               // 8846
  };                                                                                                                   // 8847
  d3_transitionPrototype.duration = function(value) {                                                                  // 8848
    var id = this.id, ns = this.namespace;                                                                             // 8849
    if (arguments.length < 1) return this.node()[ns][id].duration;                                                     // 8850
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {                                // 8851
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));                                      // 8852
    } : (value = Math.max(1, value), function(node) {                                                                  // 8853
      node[ns][id].duration = value;                                                                                   // 8854
    }));                                                                                                               // 8855
  };                                                                                                                   // 8856
  d3_transitionPrototype.each = function(type, listener) {                                                             // 8857
    var id = this.id, ns = this.namespace;                                                                             // 8858
    if (arguments.length < 2) {                                                                                        // 8859
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;                                          // 8860
      try {                                                                                                            // 8861
        d3_transitionInheritId = id;                                                                                   // 8862
        d3_selection_each(this, function(node, i, j) {                                                                 // 8863
          d3_transitionInherit = node[ns][id];                                                                         // 8864
          type.call(node, node.__data__, i, j);                                                                        // 8865
        });                                                                                                            // 8866
      } finally {                                                                                                      // 8867
        d3_transitionInherit = inherit;                                                                                // 8868
        d3_transitionInheritId = inheritId;                                                                            // 8869
      }                                                                                                                // 8870
    } else {                                                                                                           // 8871
      d3_selection_each(this, function(node) {                                                                         // 8872
        var transition = node[ns][id];                                                                                 // 8873
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);        // 8874
      });                                                                                                              // 8875
    }                                                                                                                  // 8876
    return this;                                                                                                       // 8877
  };                                                                                                                   // 8878
  d3_transitionPrototype.transition = function() {                                                                     // 8879
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {                                                                     // 8881
      subgroups.push(subgroup = []);                                                                                   // 8882
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {                                                 // 8883
        if (node = group[i]) {                                                                                         // 8884
          transition = node[ns][id0];                                                                                  // 8885
          d3_transitionNode(node, i, ns, id1, {                                                                        // 8886
            time: transition.time,                                                                                     // 8887
            ease: transition.ease,                                                                                     // 8888
            delay: transition.delay + transition.duration,                                                             // 8889
            duration: transition.duration                                                                              // 8890
          });                                                                                                          // 8891
        }                                                                                                              // 8892
        subgroup.push(node);                                                                                           // 8893
      }                                                                                                                // 8894
    }                                                                                                                  // 8895
    return d3_transition(subgroups, ns, id1);                                                                          // 8896
  };                                                                                                                   // 8897
  function d3_transitionNamespace(name) {                                                                              // 8898
    return name == null ? "__transition__" : "__transition_" + name + "__";                                            // 8899
  }                                                                                                                    // 8900
  function d3_transitionNode(node, i, ns, id, inherit) {                                                               // 8901
    var lock = node[ns] || (node[ns] = {                                                                               // 8902
      active: 0,                                                                                                       // 8903
      count: 0                                                                                                         // 8904
    }), transition = lock[id], time, timer, duration, ease, tweens;                                                    // 8905
    function schedule(elapsed) {                                                                                       // 8906
      var delay = transition.delay;                                                                                    // 8907
      timer.t = delay + time;                                                                                          // 8908
      if (delay <= elapsed) return start(elapsed - delay);                                                             // 8909
      timer.c = start;                                                                                                 // 8910
    }                                                                                                                  // 8911
    function start(elapsed) {                                                                                          // 8912
      var activeId = lock.active, active = lock[activeId];                                                             // 8913
      if (active) {                                                                                                    // 8914
        active.timer.c = null;                                                                                         // 8915
        active.timer.t = NaN;                                                                                          // 8916
        --lock.count;                                                                                                  // 8917
        delete lock[activeId];                                                                                         // 8918
        active.event && active.event.interrupt.call(node, node.__data__, active.index);                                // 8919
      }                                                                                                                // 8920
      for (var cancelId in lock) {                                                                                     // 8921
        if (+cancelId < id) {                                                                                          // 8922
          var cancel = lock[cancelId];                                                                                 // 8923
          cancel.timer.c = null;                                                                                       // 8924
          cancel.timer.t = NaN;                                                                                        // 8925
          --lock.count;                                                                                                // 8926
          delete lock[cancelId];                                                                                       // 8927
        }                                                                                                              // 8928
      }                                                                                                                // 8929
      lock.active = id;                                                                                                // 8930
      transition.event && transition.event.start.call(node, node.__data__, i);                                         // 8931
      tweens = [];                                                                                                     // 8932
      transition.tween.forEach(function(key, value) {                                                                  // 8933
        if (value = value.call(node, node.__data__, i)) {                                                              // 8934
          tweens.push(value);                                                                                          // 8935
        }                                                                                                              // 8936
      });                                                                                                              // 8937
      ease = transition.ease;                                                                                          // 8938
      duration = transition.duration;                                                                                  // 8939
      timer.c = tick;                                                                                                  // 8940
      d3_timer(function() {                                                                                            // 8941
        if (timer.c && tick(elapsed || 1)) {                                                                           // 8942
          timer.c = null;                                                                                              // 8943
          timer.t = NaN;                                                                                               // 8944
        }                                                                                                              // 8945
        return 1;                                                                                                      // 8946
      }, 0, time);                                                                                                     // 8947
    }                                                                                                                  // 8948
    function tick(elapsed) {                                                                                           // 8949
      var t = elapsed / duration, e = ease(t), n = tweens.length;                                                      // 8950
      while (n > 0) {                                                                                                  // 8951
        tweens[--n].call(node, e);                                                                                     // 8952
      }                                                                                                                // 8953
      if (t >= 1) {                                                                                                    // 8954
        transition.event && transition.event.end.call(node, node.__data__, i);                                         // 8955
        if (--lock.count) delete lock[id]; else delete node[ns];                                                       // 8956
        return 1;                                                                                                      // 8957
      }                                                                                                                // 8958
    }                                                                                                                  // 8959
    if (!transition) {                                                                                                 // 8960
      time = inherit.time;                                                                                             // 8961
      timer = d3_timer(schedule, 0, time);                                                                             // 8962
      transition = lock[id] = {                                                                                        // 8963
        tween: new d3_Map(),                                                                                           // 8964
        time: time,                                                                                                    // 8965
        timer: timer,                                                                                                  // 8966
        delay: inherit.delay,                                                                                          // 8967
        duration: inherit.duration,                                                                                    // 8968
        ease: inherit.ease,                                                                                            // 8969
        index: i                                                                                                       // 8970
      };                                                                                                               // 8971
      inherit = null;                                                                                                  // 8972
      ++lock.count;                                                                                                    // 8973
    }                                                                                                                  // 8974
  }                                                                                                                    // 8975
  d3.svg.axis = function() {                                                                                           // 8976
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {                                                                                                 // 8978
      g.each(function() {                                                                                              // 8979
        var g = d3.select(this);                                                                                       // 8980
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();                                  // 8981
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));                                                                                          // 8984
        tickEnter.append("line");                                                                                      // 8985
        tickEnter.append("text");                                                                                      // 8986
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {                                                                 // 8988
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";                                      // 8989
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");                                  // 8990
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {                                                                                                       // 8992
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";                                      // 8993
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");                                   // 8994
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }                                                                                                              // 8996
        lineEnter.attr(y2, sign * innerTickSize);                                                                      // 8997
        textEnter.attr(y1, sign * tickSpacing);                                                                        // 8998
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);                                                         // 8999
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);                                                           // 9000
        if (scale1.rangeBand) {                                                                                        // 9001
          var x = scale1, dx = x.rangeBand() / 2;                                                                      // 9002
          scale0 = scale1 = function(d) {                                                                              // 9003
            return x(d) + dx;                                                                                          // 9004
          };                                                                                                           // 9005
        } else if (scale0.rangeBand) {                                                                                 // 9006
          scale0 = scale1;                                                                                             // 9007
        } else {                                                                                                       // 9008
          tickExit.call(tickTransform, scale1, scale0);                                                                // 9009
        }                                                                                                              // 9010
        tickEnter.call(tickTransform, scale0, scale1);                                                                 // 9011
        tickUpdate.call(tickTransform, scale1, scale1);                                                                // 9012
      });                                                                                                              // 9013
    }                                                                                                                  // 9014
    axis.scale = function(x) {                                                                                         // 9015
      if (!arguments.length) return scale;                                                                             // 9016
      scale = x;                                                                                                       // 9017
      return axis;                                                                                                     // 9018
    };                                                                                                                 // 9019
    axis.orient = function(x) {                                                                                        // 9020
      if (!arguments.length) return orient;                                                                            // 9021
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;                                            // 9022
      return axis;                                                                                                     // 9023
    };                                                                                                                 // 9024
    axis.ticks = function() {                                                                                          // 9025
      if (!arguments.length) return tickArguments_;                                                                    // 9026
      tickArguments_ = d3_array(arguments);                                                                            // 9027
      return axis;                                                                                                     // 9028
    };                                                                                                                 // 9029
    axis.tickValues = function(x) {                                                                                    // 9030
      if (!arguments.length) return tickValues;                                                                        // 9031
      tickValues = x;                                                                                                  // 9032
      return axis;                                                                                                     // 9033
    };                                                                                                                 // 9034
    axis.tickFormat = function(x) {                                                                                    // 9035
      if (!arguments.length) return tickFormat_;                                                                       // 9036
      tickFormat_ = x;                                                                                                 // 9037
      return axis;                                                                                                     // 9038
    };                                                                                                                 // 9039
    axis.tickSize = function(x) {                                                                                      // 9040
      var n = arguments.length;                                                                                        // 9041
      if (!n) return innerTickSize;                                                                                    // 9042
      innerTickSize = +x;                                                                                              // 9043
      outerTickSize = +arguments[n - 1];                                                                               // 9044
      return axis;                                                                                                     // 9045
    };                                                                                                                 // 9046
    axis.innerTickSize = function(x) {                                                                                 // 9047
      if (!arguments.length) return innerTickSize;                                                                     // 9048
      innerTickSize = +x;                                                                                              // 9049
      return axis;                                                                                                     // 9050
    };                                                                                                                 // 9051
    axis.outerTickSize = function(x) {                                                                                 // 9052
      if (!arguments.length) return outerTickSize;                                                                     // 9053
      outerTickSize = +x;                                                                                              // 9054
      return axis;                                                                                                     // 9055
    };                                                                                                                 // 9056
    axis.tickPadding = function(x) {                                                                                   // 9057
      if (!arguments.length) return tickPadding;                                                                       // 9058
      tickPadding = +x;                                                                                                // 9059
      return axis;                                                                                                     // 9060
    };                                                                                                                 // 9061
    axis.tickSubdivide = function() {                                                                                  // 9062
      return arguments.length && axis;                                                                                 // 9063
    };                                                                                                                 // 9064
    return axis;                                                                                                       // 9065
  };                                                                                                                   // 9066
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {                                                      // 9067
    top: 1,                                                                                                            // 9068
    right: 1,                                                                                                          // 9069
    bottom: 1,                                                                                                         // 9070
    left: 1                                                                                                            // 9071
  };                                                                                                                   // 9072
  function d3_svg_axisX(selection, x0, x1) {                                                                           // 9073
    selection.attr("transform", function(d) {                                                                          // 9074
      var v0 = x0(d);                                                                                                  // 9075
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";                                                       // 9076
    });                                                                                                                // 9077
  }                                                                                                                    // 9078
  function d3_svg_axisY(selection, y0, y1) {                                                                           // 9079
    selection.attr("transform", function(d) {                                                                          // 9080
      var v0 = y0(d);                                                                                                  // 9081
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";                                                       // 9082
    });                                                                                                                // 9083
  }                                                                                                                    // 9084
  d3.svg.brush = function() {                                                                                          // 9085
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {                                                                                                // 9087
      g.each(function() {                                                                                              // 9088
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);                                                       // 9090
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");     // 9092
        var resize = g.selectAll(".resize").data(resizes, d3_identity);                                                // 9093
        resize.exit().remove();                                                                                        // 9094
        resize.enter().append("g").attr("class", function(d) {                                                         // 9095
          return "resize " + d;                                                                                        // 9096
        }).style("cursor", function(d) {                                                                               // 9097
          return d3_svg_brushCursor[d];                                                                                // 9098
        }).append("rect").attr("x", function(d) {                                                                      // 9099
          return /[ew]$/.test(d) ? -3 : null;                                                                          // 9100
        }).attr("y", function(d) {                                                                                     // 9101
          return /^[ns]/.test(d) ? -3 : null;                                                                          // 9102
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");                                           // 9103
        resize.style("display", brush.empty() ? "none" : null);                                                        // 9104
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;                           // 9105
        if (x) {                                                                                                       // 9106
          range = d3_scaleRange(x);                                                                                    // 9107
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);                                     // 9108
          redrawX(gUpdate);                                                                                            // 9109
        }                                                                                                              // 9110
        if (y) {                                                                                                       // 9111
          range = d3_scaleRange(y);                                                                                    // 9112
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);                                    // 9113
          redrawY(gUpdate);                                                                                            // 9114
        }                                                                                                              // 9115
        redraw(gUpdate);                                                                                               // 9116
      });                                                                                                              // 9117
    }                                                                                                                  // 9118
    brush.event = function(g) {                                                                                        // 9119
      g.each(function() {                                                                                              // 9120
        var event_ = event.of(this, arguments), extent1 = {                                                            // 9121
          x: xExtent,                                                                                                  // 9122
          y: yExtent,                                                                                                  // 9123
          i: xExtentDomain,                                                                                            // 9124
          j: yExtentDomain                                                                                             // 9125
        }, extent0 = this.__chart__ || extent1;                                                                        // 9126
        this.__chart__ = extent1;                                                                                      // 9127
        if (d3_transitionInheritId) {                                                                                  // 9128
          d3.select(this).transition().each("start.brush", function() {                                                // 9129
            xExtentDomain = extent0.i;                                                                                 // 9130
            yExtentDomain = extent0.j;                                                                                 // 9131
            xExtent = extent0.x;                                                                                       // 9132
            yExtent = extent0.y;                                                                                       // 9133
            event_({                                                                                                   // 9134
              type: "brushstart"                                                                                       // 9135
            });                                                                                                        // 9136
          }).tween("brush:brush", function() {                                                                         // 9137
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);            // 9138
            xExtentDomain = yExtentDomain = null;                                                                      // 9139
            return function(t) {                                                                                       // 9140
              xExtent = extent1.x = xi(t);                                                                             // 9141
              yExtent = extent1.y = yi(t);                                                                             // 9142
              event_({                                                                                                 // 9143
                type: "brush",                                                                                         // 9144
                mode: "resize"                                                                                         // 9145
              });                                                                                                      // 9146
            };                                                                                                         // 9147
          }).each("end.brush", function() {                                                                            // 9148
            xExtentDomain = extent1.i;                                                                                 // 9149
            yExtentDomain = extent1.j;                                                                                 // 9150
            event_({                                                                                                   // 9151
              type: "brush",                                                                                           // 9152
              mode: "resize"                                                                                           // 9153
            });                                                                                                        // 9154
            event_({                                                                                                   // 9155
              type: "brushend"                                                                                         // 9156
            });                                                                                                        // 9157
          });                                                                                                          // 9158
        } else {                                                                                                       // 9159
          event_({                                                                                                     // 9160
            type: "brushstart"                                                                                         // 9161
          });                                                                                                          // 9162
          event_({                                                                                                     // 9163
            type: "brush",                                                                                             // 9164
            mode: "resize"                                                                                             // 9165
          });                                                                                                          // 9166
          event_({                                                                                                     // 9167
            type: "brushend"                                                                                           // 9168
          });                                                                                                          // 9169
        }                                                                                                              // 9170
      });                                                                                                              // 9171
    };                                                                                                                 // 9172
    function redraw(g) {                                                                                               // 9173
      g.selectAll(".resize").attr("transform", function(d) {                                                           // 9174
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";                             // 9175
      });                                                                                                              // 9176
    }                                                                                                                  // 9177
    function redrawX(g) {                                                                                              // 9178
      g.select(".extent").attr("x", xExtent[0]);                                                                       // 9179
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);                                   // 9180
    }                                                                                                                  // 9181
    function redrawY(g) {                                                                                              // 9182
      g.select(".extent").attr("y", yExtent[0]);                                                                       // 9183
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);                                  // 9184
    }                                                                                                                  // 9185
    function brushstart() {                                                                                            // 9186
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);                      // 9188
      if (d3.event.changedTouches) {                                                                                   // 9189
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);                                             // 9190
      } else {                                                                                                         // 9191
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);                                              // 9192
      }                                                                                                                // 9193
      g.interrupt().selectAll("*").interrupt();                                                                        // 9194
      if (dragging) {                                                                                                  // 9195
        origin[0] = xExtent[0] - origin[0];                                                                            // 9196
        origin[1] = yExtent[0] - origin[1];                                                                            // 9197
      } else if (resizing) {                                                                                           // 9198
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);                                                      // 9199
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];                                         // 9200
        origin[0] = xExtent[ex];                                                                                       // 9201
        origin[1] = yExtent[ey];                                                                                       // 9202
      } else if (d3.event.altKey) center = origin.slice();                                                             // 9203
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);                                   // 9204
      d3.select("body").style("cursor", eventTarget.style("cursor"));                                                  // 9205
      event_({                                                                                                         // 9206
        type: "brushstart"                                                                                             // 9207
      });                                                                                                              // 9208
      brushmove();                                                                                                     // 9209
      function keydown() {                                                                                             // 9210
        if (d3.event.keyCode == 32) {                                                                                  // 9211
          if (!dragging) {                                                                                             // 9212
            center = null;                                                                                             // 9213
            origin[0] -= xExtent[1];                                                                                   // 9214
            origin[1] -= yExtent[1];                                                                                   // 9215
            dragging = 2;                                                                                              // 9216
          }                                                                                                            // 9217
          d3_eventPreventDefault();                                                                                    // 9218
        }                                                                                                              // 9219
      }                                                                                                                // 9220
      function keyup() {                                                                                               // 9221
        if (d3.event.keyCode == 32 && dragging == 2) {                                                                 // 9222
          origin[0] += xExtent[1];                                                                                     // 9223
          origin[1] += yExtent[1];                                                                                     // 9224
          dragging = 0;                                                                                                // 9225
          d3_eventPreventDefault();                                                                                    // 9226
        }                                                                                                              // 9227
      }                                                                                                                // 9228
      function brushmove() {                                                                                           // 9229
        var point = d3.mouse(target), moved = false;                                                                   // 9230
        if (offset) {                                                                                                  // 9231
          point[0] += offset[0];                                                                                       // 9232
          point[1] += offset[1];                                                                                       // 9233
        }                                                                                                              // 9234
        if (!dragging) {                                                                                               // 9235
          if (d3.event.altKey) {                                                                                       // 9236
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];                    // 9237
            origin[0] = xExtent[+(point[0] < center[0])];                                                              // 9238
            origin[1] = yExtent[+(point[1] < center[1])];                                                              // 9239
          } else center = null;                                                                                        // 9240
        }                                                                                                              // 9241
        if (resizingX && move1(point, x, 0)) {                                                                         // 9242
          redrawX(g);                                                                                                  // 9243
          moved = true;                                                                                                // 9244
        }                                                                                                              // 9245
        if (resizingY && move1(point, y, 1)) {                                                                         // 9246
          redrawY(g);                                                                                                  // 9247
          moved = true;                                                                                                // 9248
        }                                                                                                              // 9249
        if (moved) {                                                                                                   // 9250
          redraw(g);                                                                                                   // 9251
          event_({                                                                                                     // 9252
            type: "brush",                                                                                             // 9253
            mode: dragging ? "move" : "resize"                                                                         // 9254
          });                                                                                                          // 9255
        }                                                                                                              // 9256
      }                                                                                                                // 9257
      function move1(point, scale, i) {                                                                                // 9258
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {                                                                                                // 9260
          r0 -= position;                                                                                              // 9261
          r1 -= size + position;                                                                                       // 9262
        }                                                                                                              // 9263
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];                                 // 9264
        if (dragging) {                                                                                                // 9265
          max = (min += position) + size;                                                                              // 9266
        } else {                                                                                                       // 9267
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));                                      // 9268
          if (position < min) {                                                                                        // 9269
            max = min;                                                                                                 // 9270
            min = position;                                                                                            // 9271
          } else {                                                                                                     // 9272
            max = position;                                                                                            // 9273
          }                                                                                                            // 9274
        }                                                                                                              // 9275
        if (extent[0] != min || extent[1] != max) {                                                                    // 9276
          if (i) yExtentDomain = null; else xExtentDomain = null;                                                      // 9277
          extent[0] = min;                                                                                             // 9278
          extent[1] = max;                                                                                             // 9279
          return true;                                                                                                 // 9280
        }                                                                                                              // 9281
      }                                                                                                                // 9282
      function brushend() {                                                                                            // 9283
        brushmove();                                                                                                   // 9284
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);         // 9285
        d3.select("body").style("cursor", null);                                                                       // 9286
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();                                                                                                 // 9288
        event_({                                                                                                       // 9289
          type: "brushend"                                                                                             // 9290
        });                                                                                                            // 9291
      }                                                                                                                // 9292
    }                                                                                                                  // 9293
    brush.x = function(z) {                                                                                            // 9294
      if (!arguments.length) return x;                                                                                 // 9295
      x = z;                                                                                                           // 9296
      resizes = d3_svg_brushResizes[!x << 1 | !y];                                                                     // 9297
      return brush;                                                                                                    // 9298
    };                                                                                                                 // 9299
    brush.y = function(z) {                                                                                            // 9300
      if (!arguments.length) return y;                                                                                 // 9301
      y = z;                                                                                                           // 9302
      resizes = d3_svg_brushResizes[!x << 1 | !y];                                                                     // 9303
      return brush;                                                                                                    // 9304
    };                                                                                                                 // 9305
    brush.clamp = function(z) {                                                                                        // 9306
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;                      // 9307
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;                // 9308
      return brush;                                                                                                    // 9309
    };                                                                                                                 // 9310
    brush.extent = function(z) {                                                                                       // 9311
      var x0, x1, y0, y1, t;                                                                                           // 9312
      if (!arguments.length) {                                                                                         // 9313
        if (x) {                                                                                                       // 9314
          if (xExtentDomain) {                                                                                         // 9315
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];                                                              // 9316
          } else {                                                                                                     // 9317
            x0 = xExtent[0], x1 = xExtent[1];                                                                          // 9318
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);                                                        // 9319
            if (x1 < x0) t = x0, x0 = x1, x1 = t;                                                                      // 9320
          }                                                                                                            // 9321
        }                                                                                                              // 9322
        if (y) {                                                                                                       // 9323
          if (yExtentDomain) {                                                                                         // 9324
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];                                                              // 9325
          } else {                                                                                                     // 9326
            y0 = yExtent[0], y1 = yExtent[1];                                                                          // 9327
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);                                                        // 9328
            if (y1 < y0) t = y0, y0 = y1, y1 = t;                                                                      // 9329
          }                                                                                                            // 9330
        }                                                                                                              // 9331
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];                                 // 9332
      }                                                                                                                // 9333
      if (x) {                                                                                                         // 9334
        x0 = z[0], x1 = z[1];                                                                                          // 9335
        if (y) x0 = x0[0], x1 = x1[0];                                                                                 // 9336
        xExtentDomain = [ x0, x1 ];                                                                                    // 9337
        if (x.invert) x0 = x(x0), x1 = x(x1);                                                                          // 9338
        if (x1 < x0) t = x0, x0 = x1, x1 = t;                                                                          // 9339
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];                                                // 9340
      }                                                                                                                // 9341
      if (y) {                                                                                                         // 9342
        y0 = z[0], y1 = z[1];                                                                                          // 9343
        if (x) y0 = y0[1], y1 = y1[1];                                                                                 // 9344
        yExtentDomain = [ y0, y1 ];                                                                                    // 9345
        if (y.invert) y0 = y(y0), y1 = y(y1);                                                                          // 9346
        if (y1 < y0) t = y0, y0 = y1, y1 = t;                                                                          // 9347
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];                                                // 9348
      }                                                                                                                // 9349
      return brush;                                                                                                    // 9350
    };                                                                                                                 // 9351
    brush.clear = function() {                                                                                         // 9352
      if (!brush.empty()) {                                                                                            // 9353
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];                                                                        // 9354
        xExtentDomain = yExtentDomain = null;                                                                          // 9355
      }                                                                                                                // 9356
      return brush;                                                                                                    // 9357
    };                                                                                                                 // 9358
    brush.empty = function() {                                                                                         // 9359
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];                                       // 9360
    };                                                                                                                 // 9361
    return d3.rebind(brush, event, "on");                                                                              // 9362
  };                                                                                                                   // 9363
  var d3_svg_brushCursor = {                                                                                           // 9364
    n: "ns-resize",                                                                                                    // 9365
    e: "ew-resize",                                                                                                    // 9366
    s: "ns-resize",                                                                                                    // 9367
    w: "ew-resize",                                                                                                    // 9368
    nw: "nwse-resize",                                                                                                 // 9369
    ne: "nesw-resize",                                                                                                 // 9370
    se: "nwse-resize",                                                                                                 // 9371
    sw: "nesw-resize"                                                                                                  // 9372
  };                                                                                                                   // 9373
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];        // 9374
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;                                                     // 9375
  var d3_time_formatUtc = d3_time_format.utc;                                                                          // 9376
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");                                                  // 9377
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {                                                                             // 9379
    return date.toISOString();                                                                                         // 9380
  }                                                                                                                    // 9381
  d3_time_formatIsoNative.parse = function(string) {                                                                   // 9382
    var date = new Date(string);                                                                                       // 9383
    return isNaN(date) ? null : date;                                                                                  // 9384
  };                                                                                                                   // 9385
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;                                                       // 9386
  d3_time.second = d3_time_interval(function(date) {                                                                   // 9387
    return new d3_date(Math.floor(date / 1e3) * 1e3);                                                                  // 9388
  }, function(date, offset) {                                                                                          // 9389
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);                                                           // 9390
  }, function(date) {                                                                                                  // 9391
    return date.getSeconds();                                                                                          // 9392
  });                                                                                                                  // 9393
  d3_time.seconds = d3_time.second.range;                                                                              // 9394
  d3_time.seconds.utc = d3_time.second.utc.range;                                                                      // 9395
  d3_time.minute = d3_time_interval(function(date) {                                                                   // 9396
    return new d3_date(Math.floor(date / 6e4) * 6e4);                                                                  // 9397
  }, function(date, offset) {                                                                                          // 9398
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);                                                           // 9399
  }, function(date) {                                                                                                  // 9400
    return date.getMinutes();                                                                                          // 9401
  });                                                                                                                  // 9402
  d3_time.minutes = d3_time.minute.range;                                                                              // 9403
  d3_time.minutes.utc = d3_time.minute.utc.range;                                                                      // 9404
  d3_time.hour = d3_time_interval(function(date) {                                                                     // 9405
    var timezone = date.getTimezoneOffset() / 60;                                                                      // 9406
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);                                        // 9407
  }, function(date, offset) {                                                                                          // 9408
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);                                                          // 9409
  }, function(date) {                                                                                                  // 9410
    return date.getHours();                                                                                            // 9411
  });                                                                                                                  // 9412
  d3_time.hours = d3_time.hour.range;                                                                                  // 9413
  d3_time.hours.utc = d3_time.hour.utc.range;                                                                          // 9414
  d3_time.month = d3_time_interval(function(date) {                                                                    // 9415
    date = d3_time.day(date);                                                                                          // 9416
    date.setDate(1);                                                                                                   // 9417
    return date;                                                                                                       // 9418
  }, function(date, offset) {                                                                                          // 9419
    date.setMonth(date.getMonth() + offset);                                                                           // 9420
  }, function(date) {                                                                                                  // 9421
    return date.getMonth();                                                                                            // 9422
  });                                                                                                                  // 9423
  d3_time.months = d3_time.month.range;                                                                                // 9424
  d3_time.months.utc = d3_time.month.utc.range;                                                                        // 9425
  function d3_time_scale(linear, methods, format) {                                                                    // 9426
    function scale(x) {                                                                                                // 9427
      return linear(x);                                                                                                // 9428
    }                                                                                                                  // 9429
    scale.invert = function(x) {                                                                                       // 9430
      return d3_time_scaleDate(linear.invert(x));                                                                      // 9431
    };                                                                                                                 // 9432
    scale.domain = function(x) {                                                                                       // 9433
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);                                            // 9434
      linear.domain(x);                                                                                                // 9435
      return scale;                                                                                                    // 9436
    };                                                                                                                 // 9437
    function tickMethod(extent, count) {                                                                               // 9438
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);              // 9439
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {        // 9440
        return d / 31536e6;                                                                                            // 9441
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }                                                                                                                  // 9443
    scale.nice = function(interval, skip) {                                                                            // 9444
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];                                                              // 9446
      function skipped(date) {                                                                                         // 9447
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;                       // 9448
      }                                                                                                                // 9449
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {                                                           // 9450
        floor: function(date) {                                                                                        // 9451
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);                             // 9452
          return date;                                                                                                 // 9453
        },                                                                                                             // 9454
        ceil: function(date) {                                                                                         // 9455
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);                             // 9456
          return date;                                                                                                 // 9457
        }                                                                                                              // 9458
      } : interval));                                                                                                  // 9459
    };                                                                                                                 // 9460
    scale.ticks = function(interval, skip) {                                                                           // 9461
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval                                                                                                // 9463
      }, skip ];                                                                                                       // 9464
      if (method) interval = method[0], skip = method[1];                                                              // 9465
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);                        // 9466
    };                                                                                                                 // 9467
    scale.tickFormat = function() {                                                                                    // 9468
      return format;                                                                                                   // 9469
    };                                                                                                                 // 9470
    scale.copy = function() {                                                                                          // 9471
      return d3_time_scale(linear.copy(), methods, format);                                                            // 9472
    };                                                                                                                 // 9473
    return d3_scale_linearRebind(scale, linear);                                                                       // 9474
  }                                                                                                                    // 9475
  function d3_time_scaleDate(t) {                                                                                      // 9476
    return new Date(t);                                                                                                // 9477
  }                                                                                                                    // 9478
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {                                         // 9481
    return d.getMilliseconds();                                                                                        // 9482
  } ], [ ":%S", function(d) {                                                                                          // 9483
    return d.getSeconds();                                                                                             // 9484
  } ], [ "%I:%M", function(d) {                                                                                        // 9485
    return d.getMinutes();                                                                                             // 9486
  } ], [ "%I %p", function(d) {                                                                                        // 9487
    return d.getHours();                                                                                               // 9488
  } ], [ "%a %d", function(d) {                                                                                        // 9489
    return d.getDay() && d.getDate() != 1;                                                                             // 9490
  } ], [ "%b %d", function(d) {                                                                                        // 9491
    return d.getDate() != 1;                                                                                           // 9492
  } ], [ "%B", function(d) {                                                                                           // 9493
    return d.getMonth();                                                                                               // 9494
  } ], [ "%Y", d3_true ] ]);                                                                                           // 9495
  var d3_time_scaleMilliseconds = {                                                                                    // 9496
    range: function(start, stop, step) {                                                                               // 9497
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);                             // 9498
    },                                                                                                                 // 9499
    floor: d3_identity,                                                                                                // 9500
    ceil: d3_identity                                                                                                  // 9501
  };                                                                                                                   // 9502
  d3_time_scaleLocalMethods.year = d3_time.year;                                                                       // 9503
  d3_time.scale = function() {                                                                                         // 9504
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);                      // 9505
  };                                                                                                                   // 9506
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {                                            // 9507
    return [ m[0].utc, m[1] ];                                                                                         // 9508
  });                                                                                                                  // 9509
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {                                        // 9510
    return d.getUTCMilliseconds();                                                                                     // 9511
  } ], [ ":%S", function(d) {                                                                                          // 9512
    return d.getUTCSeconds();                                                                                          // 9513
  } ], [ "%I:%M", function(d) {                                                                                        // 9514
    return d.getUTCMinutes();                                                                                          // 9515
  } ], [ "%I %p", function(d) {                                                                                        // 9516
    return d.getUTCHours();                                                                                            // 9517
  } ], [ "%a %d", function(d) {                                                                                        // 9518
    return d.getUTCDay() && d.getUTCDate() != 1;                                                                       // 9519
  } ], [ "%b %d", function(d) {                                                                                        // 9520
    return d.getUTCDate() != 1;                                                                                        // 9521
  } ], [ "%B", function(d) {                                                                                           // 9522
    return d.getUTCMonth();                                                                                            // 9523
  } ], [ "%Y", d3_true ] ]);                                                                                           // 9524
  d3_time_scaleUtcMethods.year = d3_time.year.utc;                                                                     // 9525
  d3_time.scale.utc = function() {                                                                                     // 9526
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);                          // 9527
  };                                                                                                                   // 9528
  d3.text = d3_xhrType(function(request) {                                                                             // 9529
    return request.responseText;                                                                                       // 9530
  });                                                                                                                  // 9531
  d3.json = function(url, callback) {                                                                                  // 9532
    return d3_xhr(url, "application/json", d3_json, callback);                                                         // 9533
  };                                                                                                                   // 9534
  function d3_json(request) {                                                                                          // 9535
    return JSON.parse(request.responseText);                                                                           // 9536
  }                                                                                                                    // 9537
  d3.html = function(url, callback) {                                                                                  // 9538
    return d3_xhr(url, "text/html", d3_html, callback);                                                                // 9539
  };                                                                                                                   // 9540
  function d3_html(request) {                                                                                          // 9541
    var range = d3_document.createRange();                                                                             // 9542
    range.selectNode(d3_document.body);                                                                                // 9543
    return range.createContextualFragment(request.responseText);                                                       // 9544
  }                                                                                                                    // 9545
  d3.xml = d3_xhrType(function(request) {                                                                              // 9546
    return request.responseXML;                                                                                        // 9547
  });                                                                                                                  // 9548
  if (typeof define === "function" && define.amd) define(this.d3 = d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();                                                                                                                   // 9550
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);

///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['d3js:d3'] = {};

})();
