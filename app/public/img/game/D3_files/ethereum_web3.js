//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var require, XMLHttpRequest, Web3, BigNumber;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/dist/web3.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[                                                                                                       // 2
  {                                                                                                                    // 3
    "constant": true,                                                                                                  // 4
    "inputs": [                                                                                                        // 5
      {                                                                                                                // 6
        "name": "_owner",                                                                                              // 7
        "type": "address"                                                                                              // 8
      }                                                                                                                // 9
    ],                                                                                                                 // 10
    "name": "name",                                                                                                    // 11
    "outputs": [                                                                                                       // 12
      {                                                                                                                // 13
        "name": "o_name",                                                                                              // 14
        "type": "bytes32"                                                                                              // 15
      }                                                                                                                // 16
    ],                                                                                                                 // 17
    "type": "function"                                                                                                 // 18
  },                                                                                                                   // 19
  {                                                                                                                    // 20
    "constant": true,                                                                                                  // 21
    "inputs": [                                                                                                        // 22
      {                                                                                                                // 23
        "name": "_name",                                                                                               // 24
        "type": "bytes32"                                                                                              // 25
      }                                                                                                                // 26
    ],                                                                                                                 // 27
    "name": "owner",                                                                                                   // 28
    "outputs": [                                                                                                       // 29
      {                                                                                                                // 30
        "name": "",                                                                                                    // 31
        "type": "address"                                                                                              // 32
      }                                                                                                                // 33
    ],                                                                                                                 // 34
    "type": "function"                                                                                                 // 35
  },                                                                                                                   // 36
  {                                                                                                                    // 37
    "constant": true,                                                                                                  // 38
    "inputs": [                                                                                                        // 39
      {                                                                                                                // 40
        "name": "_name",                                                                                               // 41
        "type": "bytes32"                                                                                              // 42
      }                                                                                                                // 43
    ],                                                                                                                 // 44
    "name": "content",                                                                                                 // 45
    "outputs": [                                                                                                       // 46
      {                                                                                                                // 47
        "name": "",                                                                                                    // 48
        "type": "bytes32"                                                                                              // 49
      }                                                                                                                // 50
    ],                                                                                                                 // 51
    "type": "function"                                                                                                 // 52
  },                                                                                                                   // 53
  {                                                                                                                    // 54
    "constant": true,                                                                                                  // 55
    "inputs": [                                                                                                        // 56
      {                                                                                                                // 57
        "name": "_name",                                                                                               // 58
        "type": "bytes32"                                                                                              // 59
      }                                                                                                                // 60
    ],                                                                                                                 // 61
    "name": "addr",                                                                                                    // 62
    "outputs": [                                                                                                       // 63
      {                                                                                                                // 64
        "name": "",                                                                                                    // 65
        "type": "address"                                                                                              // 66
      }                                                                                                                // 67
    ],                                                                                                                 // 68
    "type": "function"                                                                                                 // 69
  },                                                                                                                   // 70
  {                                                                                                                    // 71
    "constant": false,                                                                                                 // 72
    "inputs": [                                                                                                        // 73
      {                                                                                                                // 74
        "name": "_name",                                                                                               // 75
        "type": "bytes32"                                                                                              // 76
      }                                                                                                                // 77
    ],                                                                                                                 // 78
    "name": "reserve",                                                                                                 // 79
    "outputs": [],                                                                                                     // 80
    "type": "function"                                                                                                 // 81
  },                                                                                                                   // 82
  {                                                                                                                    // 83
    "constant": true,                                                                                                  // 84
    "inputs": [                                                                                                        // 85
      {                                                                                                                // 86
        "name": "_name",                                                                                               // 87
        "type": "bytes32"                                                                                              // 88
      }                                                                                                                // 89
    ],                                                                                                                 // 90
    "name": "subRegistrar",                                                                                            // 91
    "outputs": [                                                                                                       // 92
      {                                                                                                                // 93
        "name": "",                                                                                                    // 94
        "type": "address"                                                                                              // 95
      }                                                                                                                // 96
    ],                                                                                                                 // 97
    "type": "function"                                                                                                 // 98
  },                                                                                                                   // 99
  {                                                                                                                    // 100
    "constant": false,                                                                                                 // 101
    "inputs": [                                                                                                        // 102
      {                                                                                                                // 103
        "name": "_name",                                                                                               // 104
        "type": "bytes32"                                                                                              // 105
      },                                                                                                               // 106
      {                                                                                                                // 107
        "name": "_newOwner",                                                                                           // 108
        "type": "address"                                                                                              // 109
      }                                                                                                                // 110
    ],                                                                                                                 // 111
    "name": "transfer",                                                                                                // 112
    "outputs": [],                                                                                                     // 113
    "type": "function"                                                                                                 // 114
  },                                                                                                                   // 115
  {                                                                                                                    // 116
    "constant": false,                                                                                                 // 117
    "inputs": [                                                                                                        // 118
      {                                                                                                                // 119
        "name": "_name",                                                                                               // 120
        "type": "bytes32"                                                                                              // 121
      },                                                                                                               // 122
      {                                                                                                                // 123
        "name": "_registrar",                                                                                          // 124
        "type": "address"                                                                                              // 125
      }                                                                                                                // 126
    ],                                                                                                                 // 127
    "name": "setSubRegistrar",                                                                                         // 128
    "outputs": [],                                                                                                     // 129
    "type": "function"                                                                                                 // 130
  },                                                                                                                   // 131
  {                                                                                                                    // 132
    "constant": false,                                                                                                 // 133
    "inputs": [],                                                                                                      // 134
    "name": "Registrar",                                                                                               // 135
    "outputs": [],                                                                                                     // 136
    "type": "function"                                                                                                 // 137
  },                                                                                                                   // 138
  {                                                                                                                    // 139
    "constant": false,                                                                                                 // 140
    "inputs": [                                                                                                        // 141
      {                                                                                                                // 142
        "name": "_name",                                                                                               // 143
        "type": "bytes32"                                                                                              // 144
      },                                                                                                               // 145
      {                                                                                                                // 146
        "name": "_a",                                                                                                  // 147
        "type": "address"                                                                                              // 148
      },                                                                                                               // 149
      {                                                                                                                // 150
        "name": "_primary",                                                                                            // 151
        "type": "bool"                                                                                                 // 152
      }                                                                                                                // 153
    ],                                                                                                                 // 154
    "name": "setAddress",                                                                                              // 155
    "outputs": [],                                                                                                     // 156
    "type": "function"                                                                                                 // 157
  },                                                                                                                   // 158
  {                                                                                                                    // 159
    "constant": false,                                                                                                 // 160
    "inputs": [                                                                                                        // 161
      {                                                                                                                // 162
        "name": "_name",                                                                                               // 163
        "type": "bytes32"                                                                                              // 164
      },                                                                                                               // 165
      {                                                                                                                // 166
        "name": "_content",                                                                                            // 167
        "type": "bytes32"                                                                                              // 168
      }                                                                                                                // 169
    ],                                                                                                                 // 170
    "name": "setContent",                                                                                              // 171
    "outputs": [],                                                                                                     // 172
    "type": "function"                                                                                                 // 173
  },                                                                                                                   // 174
  {                                                                                                                    // 175
    "constant": false,                                                                                                 // 176
    "inputs": [                                                                                                        // 177
      {                                                                                                                // 178
        "name": "_name",                                                                                               // 179
        "type": "bytes32"                                                                                              // 180
      }                                                                                                                // 181
    ],                                                                                                                 // 182
    "name": "disown",                                                                                                  // 183
    "outputs": [],                                                                                                     // 184
    "type": "function"                                                                                                 // 185
  },                                                                                                                   // 186
  {                                                                                                                    // 187
    "anonymous": false,                                                                                                // 188
    "inputs": [                                                                                                        // 189
      {                                                                                                                // 190
        "indexed": true,                                                                                               // 191
        "name": "_name",                                                                                               // 192
        "type": "bytes32"                                                                                              // 193
      },                                                                                                               // 194
      {                                                                                                                // 195
        "indexed": false,                                                                                              // 196
        "name": "_winner",                                                                                             // 197
        "type": "address"                                                                                              // 198
      }                                                                                                                // 199
    ],                                                                                                                 // 200
    "name": "AuctionEnded",                                                                                            // 201
    "type": "event"                                                                                                    // 202
  },                                                                                                                   // 203
  {                                                                                                                    // 204
    "anonymous": false,                                                                                                // 205
    "inputs": [                                                                                                        // 206
      {                                                                                                                // 207
        "indexed": true,                                                                                               // 208
        "name": "_name",                                                                                               // 209
        "type": "bytes32"                                                                                              // 210
      },                                                                                                               // 211
      {                                                                                                                // 212
        "indexed": false,                                                                                              // 213
        "name": "_bidder",                                                                                             // 214
        "type": "address"                                                                                              // 215
      },                                                                                                               // 216
      {                                                                                                                // 217
        "indexed": false,                                                                                              // 218
        "name": "_value",                                                                                              // 219
        "type": "uint256"                                                                                              // 220
      }                                                                                                                // 221
    ],                                                                                                                 // 222
    "name": "NewBid",                                                                                                  // 223
    "type": "event"                                                                                                    // 224
  },                                                                                                                   // 225
  {                                                                                                                    // 226
    "anonymous": false,                                                                                                // 227
    "inputs": [                                                                                                        // 228
      {                                                                                                                // 229
        "indexed": true,                                                                                               // 230
        "name": "name",                                                                                                // 231
        "type": "bytes32"                                                                                              // 232
      }                                                                                                                // 233
    ],                                                                                                                 // 234
    "name": "Changed",                                                                                                 // 235
    "type": "event"                                                                                                    // 236
  },                                                                                                                   // 237
  {                                                                                                                    // 238
    "anonymous": false,                                                                                                // 239
    "inputs": [                                                                                                        // 240
      {                                                                                                                // 241
        "indexed": true,                                                                                               // 242
        "name": "name",                                                                                                // 243
        "type": "bytes32"                                                                                              // 244
      },                                                                                                               // 245
      {                                                                                                                // 246
        "indexed": true,                                                                                               // 247
        "name": "addr",                                                                                                // 248
        "type": "address"                                                                                              // 249
      }                                                                                                                // 250
    ],                                                                                                                 // 251
    "name": "PrimaryChanged",                                                                                          // 252
    "type": "event"                                                                                                    // 253
  }                                                                                                                    // 254
]                                                                                                                      // 255
                                                                                                                       // 256
},{}],2:[function(require,module,exports){                                                                             // 257
module.exports=[                                                                                                       // 258
  {                                                                                                                    // 259
    "constant": true,                                                                                                  // 260
    "inputs": [                                                                                                        // 261
      {                                                                                                                // 262
        "name": "_name",                                                                                               // 263
        "type": "bytes32"                                                                                              // 264
      }                                                                                                                // 265
    ],                                                                                                                 // 266
    "name": "owner",                                                                                                   // 267
    "outputs": [                                                                                                       // 268
      {                                                                                                                // 269
        "name": "",                                                                                                    // 270
        "type": "address"                                                                                              // 271
      }                                                                                                                // 272
    ],                                                                                                                 // 273
    "type": "function"                                                                                                 // 274
  },                                                                                                                   // 275
  {                                                                                                                    // 276
    "constant": false,                                                                                                 // 277
    "inputs": [                                                                                                        // 278
      {                                                                                                                // 279
        "name": "_name",                                                                                               // 280
        "type": "bytes32"                                                                                              // 281
      },                                                                                                               // 282
      {                                                                                                                // 283
        "name": "_refund",                                                                                             // 284
        "type": "address"                                                                                              // 285
      }                                                                                                                // 286
    ],                                                                                                                 // 287
    "name": "disown",                                                                                                  // 288
    "outputs": [],                                                                                                     // 289
    "type": "function"                                                                                                 // 290
  },                                                                                                                   // 291
  {                                                                                                                    // 292
    "constant": true,                                                                                                  // 293
    "inputs": [                                                                                                        // 294
      {                                                                                                                // 295
        "name": "_name",                                                                                               // 296
        "type": "bytes32"                                                                                              // 297
      }                                                                                                                // 298
    ],                                                                                                                 // 299
    "name": "addr",                                                                                                    // 300
    "outputs": [                                                                                                       // 301
      {                                                                                                                // 302
        "name": "",                                                                                                    // 303
        "type": "address"                                                                                              // 304
      }                                                                                                                // 305
    ],                                                                                                                 // 306
    "type": "function"                                                                                                 // 307
  },                                                                                                                   // 308
  {                                                                                                                    // 309
    "constant": false,                                                                                                 // 310
    "inputs": [                                                                                                        // 311
      {                                                                                                                // 312
        "name": "_name",                                                                                               // 313
        "type": "bytes32"                                                                                              // 314
      }                                                                                                                // 315
    ],                                                                                                                 // 316
    "name": "reserve",                                                                                                 // 317
    "outputs": [],                                                                                                     // 318
    "type": "function"                                                                                                 // 319
  },                                                                                                                   // 320
  {                                                                                                                    // 321
    "constant": false,                                                                                                 // 322
    "inputs": [                                                                                                        // 323
      {                                                                                                                // 324
        "name": "_name",                                                                                               // 325
        "type": "bytes32"                                                                                              // 326
      },                                                                                                               // 327
      {                                                                                                                // 328
        "name": "_newOwner",                                                                                           // 329
        "type": "address"                                                                                              // 330
      }                                                                                                                // 331
    ],                                                                                                                 // 332
    "name": "transfer",                                                                                                // 333
    "outputs": [],                                                                                                     // 334
    "type": "function"                                                                                                 // 335
  },                                                                                                                   // 336
  {                                                                                                                    // 337
    "constant": false,                                                                                                 // 338
    "inputs": [                                                                                                        // 339
      {                                                                                                                // 340
        "name": "_name",                                                                                               // 341
        "type": "bytes32"                                                                                              // 342
      },                                                                                                               // 343
      {                                                                                                                // 344
        "name": "_a",                                                                                                  // 345
        "type": "address"                                                                                              // 346
      }                                                                                                                // 347
    ],                                                                                                                 // 348
    "name": "setAddr",                                                                                                 // 349
    "outputs": [],                                                                                                     // 350
    "type": "function"                                                                                                 // 351
  },                                                                                                                   // 352
  {                                                                                                                    // 353
    "anonymous": false,                                                                                                // 354
    "inputs": [                                                                                                        // 355
      {                                                                                                                // 356
        "indexed": true,                                                                                               // 357
        "name": "name",                                                                                                // 358
        "type": "bytes32"                                                                                              // 359
      }                                                                                                                // 360
    ],                                                                                                                 // 361
    "name": "Changed",                                                                                                 // 362
    "type": "event"                                                                                                    // 363
  }                                                                                                                    // 364
]                                                                                                                      // 365
                                                                                                                       // 366
},{}],3:[function(require,module,exports){                                                                             // 367
module.exports=[                                                                                                       // 368
  {                                                                                                                    // 369
    "constant": false,                                                                                                 // 370
    "inputs": [                                                                                                        // 371
      {                                                                                                                // 372
        "name": "from",                                                                                                // 373
        "type": "bytes32"                                                                                              // 374
      },                                                                                                               // 375
      {                                                                                                                // 376
        "name": "to",                                                                                                  // 377
        "type": "address"                                                                                              // 378
      },                                                                                                               // 379
      {                                                                                                                // 380
        "name": "value",                                                                                               // 381
        "type": "uint256"                                                                                              // 382
      }                                                                                                                // 383
    ],                                                                                                                 // 384
    "name": "transfer",                                                                                                // 385
    "outputs": [],                                                                                                     // 386
    "type": "function"                                                                                                 // 387
  },                                                                                                                   // 388
  {                                                                                                                    // 389
    "constant": false,                                                                                                 // 390
    "inputs": [                                                                                                        // 391
      {                                                                                                                // 392
        "name": "from",                                                                                                // 393
        "type": "bytes32"                                                                                              // 394
      },                                                                                                               // 395
      {                                                                                                                // 396
        "name": "to",                                                                                                  // 397
        "type": "address"                                                                                              // 398
      },                                                                                                               // 399
      {                                                                                                                // 400
        "name": "indirectId",                                                                                          // 401
        "type": "bytes32"                                                                                              // 402
      },                                                                                                               // 403
      {                                                                                                                // 404
        "name": "value",                                                                                               // 405
        "type": "uint256"                                                                                              // 406
      }                                                                                                                // 407
    ],                                                                                                                 // 408
    "name": "icapTransfer",                                                                                            // 409
    "outputs": [],                                                                                                     // 410
    "type": "function"                                                                                                 // 411
  },                                                                                                                   // 412
  {                                                                                                                    // 413
    "constant": false,                                                                                                 // 414
    "inputs": [                                                                                                        // 415
      {                                                                                                                // 416
        "name": "to",                                                                                                  // 417
        "type": "bytes32"                                                                                              // 418
      }                                                                                                                // 419
    ],                                                                                                                 // 420
    "name": "deposit",                                                                                                 // 421
    "outputs": [],                                                                                                     // 422
    "payable": true,                                                                                                   // 423
    "type": "function"                                                                                                 // 424
  },                                                                                                                   // 425
  {                                                                                                                    // 426
    "anonymous": false,                                                                                                // 427
    "inputs": [                                                                                                        // 428
      {                                                                                                                // 429
        "indexed": true,                                                                                               // 430
        "name": "from",                                                                                                // 431
        "type": "address"                                                                                              // 432
      },                                                                                                               // 433
      {                                                                                                                // 434
        "indexed": false,                                                                                              // 435
        "name": "value",                                                                                               // 436
        "type": "uint256"                                                                                              // 437
      }                                                                                                                // 438
    ],                                                                                                                 // 439
    "name": "AnonymousDeposit",                                                                                        // 440
    "type": "event"                                                                                                    // 441
  },                                                                                                                   // 442
  {                                                                                                                    // 443
    "anonymous": false,                                                                                                // 444
    "inputs": [                                                                                                        // 445
      {                                                                                                                // 446
        "indexed": true,                                                                                               // 447
        "name": "from",                                                                                                // 448
        "type": "address"                                                                                              // 449
      },                                                                                                               // 450
      {                                                                                                                // 451
        "indexed": true,                                                                                               // 452
        "name": "to",                                                                                                  // 453
        "type": "bytes32"                                                                                              // 454
      },                                                                                                               // 455
      {                                                                                                                // 456
        "indexed": false,                                                                                              // 457
        "name": "value",                                                                                               // 458
        "type": "uint256"                                                                                              // 459
      }                                                                                                                // 460
    ],                                                                                                                 // 461
    "name": "Deposit",                                                                                                 // 462
    "type": "event"                                                                                                    // 463
  },                                                                                                                   // 464
  {                                                                                                                    // 465
    "anonymous": false,                                                                                                // 466
    "inputs": [                                                                                                        // 467
      {                                                                                                                // 468
        "indexed": true,                                                                                               // 469
        "name": "from",                                                                                                // 470
        "type": "bytes32"                                                                                              // 471
      },                                                                                                               // 472
      {                                                                                                                // 473
        "indexed": true,                                                                                               // 474
        "name": "to",                                                                                                  // 475
        "type": "address"                                                                                              // 476
      },                                                                                                               // 477
      {                                                                                                                // 478
        "indexed": false,                                                                                              // 479
        "name": "value",                                                                                               // 480
        "type": "uint256"                                                                                              // 481
      }                                                                                                                // 482
    ],                                                                                                                 // 483
    "name": "Transfer",                                                                                                // 484
    "type": "event"                                                                                                    // 485
  },                                                                                                                   // 486
  {                                                                                                                    // 487
    "anonymous": false,                                                                                                // 488
    "inputs": [                                                                                                        // 489
      {                                                                                                                // 490
        "indexed": true,                                                                                               // 491
        "name": "from",                                                                                                // 492
        "type": "bytes32"                                                                                              // 493
      },                                                                                                               // 494
      {                                                                                                                // 495
        "indexed": true,                                                                                               // 496
        "name": "to",                                                                                                  // 497
        "type": "address"                                                                                              // 498
      },                                                                                                               // 499
      {                                                                                                                // 500
        "indexed": false,                                                                                              // 501
        "name": "indirectId",                                                                                          // 502
        "type": "bytes32"                                                                                              // 503
      },                                                                                                               // 504
      {                                                                                                                // 505
        "indexed": false,                                                                                              // 506
        "name": "value",                                                                                               // 507
        "type": "uint256"                                                                                              // 508
      }                                                                                                                // 509
    ],                                                                                                                 // 510
    "name": "IcapTransfer",                                                                                            // 511
    "type": "event"                                                                                                    // 512
  }                                                                                                                    // 513
]                                                                                                                      // 514
                                                                                                                       // 515
},{}],4:[function(require,module,exports){                                                                             // 516
var f = require('./formatters');                                                                                       // 517
var SolidityType = require('./type');                                                                                  // 518
                                                                                                                       // 519
/**                                                                                                                    // 520
 * SolidityTypeAddress is a prootype that represents address type                                                      // 521
 * It matches:                                                                                                         // 522
 * address                                                                                                             // 523
 * address[]                                                                                                           // 524
 * address[4]                                                                                                          // 525
 * address[][]                                                                                                         // 526
 * address[3][]                                                                                                        // 527
 * address[][6][], ...                                                                                                 // 528
 */                                                                                                                    // 529
var SolidityTypeAddress = function () {                                                                                // 530
    this._inputFormatter = f.formatInputInt;                                                                           // 531
    this._outputFormatter = f.formatOutputAddress;                                                                     // 532
};                                                                                                                     // 533
                                                                                                                       // 534
SolidityTypeAddress.prototype = new SolidityType({});                                                                  // 535
SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 536
                                                                                                                       // 537
SolidityTypeAddress.prototype.isType = function (name) {                                                               // 538
    return !!name.match(/address(\[([0-9]*)\])?/);                                                                     // 539
};                                                                                                                     // 540
                                                                                                                       // 541
module.exports = SolidityTypeAddress;                                                                                  // 542
                                                                                                                       // 543
},{"./formatters":9,"./type":14}],5:[function(require,module,exports){                                                 // 544
var f = require('./formatters');                                                                                       // 545
var SolidityType = require('./type');                                                                                  // 546
                                                                                                                       // 547
/**                                                                                                                    // 548
 * SolidityTypeBool is a prootype that represents bool type                                                            // 549
 * It matches:                                                                                                         // 550
 * bool                                                                                                                // 551
 * bool[]                                                                                                              // 552
 * bool[4]                                                                                                             // 553
 * bool[][]                                                                                                            // 554
 * bool[3][]                                                                                                           // 555
 * bool[][6][], ...                                                                                                    // 556
 */                                                                                                                    // 557
var SolidityTypeBool = function () {                                                                                   // 558
    this._inputFormatter = f.formatInputBool;                                                                          // 559
    this._outputFormatter = f.formatOutputBool;                                                                        // 560
};                                                                                                                     // 561
                                                                                                                       // 562
SolidityTypeBool.prototype = new SolidityType({});                                                                     // 563
SolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 564
                                                                                                                       // 565
SolidityTypeBool.prototype.isType = function (name) {                                                                  // 566
    return !!name.match(/^bool(\[([0-9]*)\])*$/);                                                                      // 567
};                                                                                                                     // 568
                                                                                                                       // 569
module.exports = SolidityTypeBool;                                                                                     // 570
                                                                                                                       // 571
},{"./formatters":9,"./type":14}],6:[function(require,module,exports){                                                 // 572
var f = require('./formatters');                                                                                       // 573
var SolidityType = require('./type');                                                                                  // 574
                                                                                                                       // 575
/**                                                                                                                    // 576
 * SolidityTypeBytes is a prototype that represents the bytes type.                                                    // 577
 * It matches:                                                                                                         // 578
 * bytes                                                                                                               // 579
 * bytes[]                                                                                                             // 580
 * bytes[4]                                                                                                            // 581
 * bytes[][]                                                                                                           // 582
 * bytes[3][]                                                                                                          // 583
 * bytes[][6][], ...                                                                                                   // 584
 * bytes32                                                                                                             // 585
 * bytes8[4]                                                                                                           // 586
 * bytes[3][]                                                                                                          // 587
 */                                                                                                                    // 588
var SolidityTypeBytes = function () {                                                                                  // 589
    this._inputFormatter = f.formatInputBytes;                                                                         // 590
    this._outputFormatter = f.formatOutputBytes;                                                                       // 591
};                                                                                                                     // 592
                                                                                                                       // 593
SolidityTypeBytes.prototype = new SolidityType({});                                                                    // 594
SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 595
                                                                                                                       // 596
SolidityTypeBytes.prototype.isType = function (name) {                                                                 // 597
    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);                                                          // 598
};                                                                                                                     // 599
                                                                                                                       // 600
module.exports = SolidityTypeBytes;                                                                                    // 601
                                                                                                                       // 602
},{"./formatters":9,"./type":14}],7:[function(require,module,exports){                                                 // 603
/*                                                                                                                     // 604
    This file is part of web3.js.                                                                                      // 605
                                                                                                                       // 606
    web3.js is free software: you can redistribute it and/or modify                                                    // 607
    it under the terms of the GNU Lesser General Public License as published by                                        // 608
    the Free Software Foundation, either version 3 of the License, or                                                  // 609
    (at your option) any later version.                                                                                // 610
                                                                                                                       // 611
    web3.js is distributed in the hope that it will be useful,                                                         // 612
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 613
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 614
    GNU Lesser General Public License for more details.                                                                // 615
                                                                                                                       // 616
    You should have received a copy of the GNU Lesser General Public License                                           // 617
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 618
*/                                                                                                                     // 619
/**                                                                                                                    // 620
 * @file coder.js                                                                                                      // 621
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 622
 * @date 2015                                                                                                          // 623
 */                                                                                                                    // 624
                                                                                                                       // 625
var f = require('./formatters');                                                                                       // 626
                                                                                                                       // 627
var SolidityTypeAddress = require('./address');                                                                        // 628
var SolidityTypeBool = require('./bool');                                                                              // 629
var SolidityTypeInt = require('./int');                                                                                // 630
var SolidityTypeUInt = require('./uint');                                                                              // 631
var SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 632
var SolidityTypeString = require('./string');                                                                          // 633
var SolidityTypeReal = require('./real');                                                                              // 634
var SolidityTypeUReal = require('./ureal');                                                                            // 635
var SolidityTypeBytes = require('./bytes');                                                                            // 636
                                                                                                                       // 637
var isDynamic = function (solidityType, type) {                                                                        // 638
   return solidityType.isDynamicType(type) ||                                                                          // 639
          solidityType.isDynamicArray(type);                                                                           // 640
};                                                                                                                     // 641
                                                                                                                       // 642
/**                                                                                                                    // 643
 * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 644
 */                                                                                                                    // 645
var SolidityCoder = function (types) {                                                                                 // 646
    this._types = types;                                                                                               // 647
};                                                                                                                     // 648
                                                                                                                       // 649
/**                                                                                                                    // 650
 * This method should be used to transform type to SolidityType                                                        // 651
 *                                                                                                                     // 652
 * @method _requireType                                                                                                // 653
 * @param {String} type                                                                                                // 654
 * @returns {SolidityType}                                                                                             // 655
 * @throws {Error} throws if no matching type is found                                                                 // 656
 */                                                                                                                    // 657
SolidityCoder.prototype._requireType = function (type) {                                                               // 658
    var solidityType = this._types.filter(function (t) {                                                               // 659
        return t.isType(type);                                                                                         // 660
    })[0];                                                                                                             // 661
                                                                                                                       // 662
    if (!solidityType) {                                                                                               // 663
        throw Error('invalid solidity type!: ' + type);                                                                // 664
    }                                                                                                                  // 665
                                                                                                                       // 666
    return solidityType;                                                                                               // 667
};                                                                                                                     // 668
                                                                                                                       // 669
/**                                                                                                                    // 670
 * Should be used to encode plain param                                                                                // 671
 *                                                                                                                     // 672
 * @method encodeParam                                                                                                 // 673
 * @param {String} type                                                                                                // 674
 * @param {Object} plain param                                                                                         // 675
 * @return {String} encoded plain param                                                                                // 676
 */                                                                                                                    // 677
SolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 678
    return this.encodeParams([type], [param]);                                                                         // 679
};                                                                                                                     // 680
                                                                                                                       // 681
/**                                                                                                                    // 682
 * Should be used to encode list of params                                                                             // 683
 *                                                                                                                     // 684
 * @method encodeParams                                                                                                // 685
 * @param {Array} types                                                                                                // 686
 * @param {Array} params                                                                                               // 687
 * @return {String} encoded list of params                                                                             // 688
 */                                                                                                                    // 689
SolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 690
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 691
                                                                                                                       // 692
    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 693
        return solidityType.encode(params[index], types[index]);                                                       // 694
    });                                                                                                                // 695
                                                                                                                       // 696
    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 697
        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 698
        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 699
                                                                                                                       // 700
        return acc + (isDynamic(solidityTypes[index], types[index]) ?                                                  // 701
            32 :                                                                                                       // 702
            roundedStaticPartLength);                                                                                  // 703
    }, 0);                                                                                                             // 704
                                                                                                                       // 705
    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 706
                                                                                                                       // 707
    return result;                                                                                                     // 708
};                                                                                                                     // 709
                                                                                                                       // 710
SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 711
    var result = "";                                                                                                   // 712
    var self = this;                                                                                                   // 713
                                                                                                                       // 714
    types.forEach(function (type, i) {                                                                                 // 715
        if (isDynamic(solidityTypes[i], types[i])) {                                                                   // 716
            result += f.formatInputInt(dynamicOffset).encode();                                                        // 717
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 718
            dynamicOffset += e.length / 2;                                                                             // 719
        } else {                                                                                                       // 720
            // don't add length to dynamicOffset. it's already counted                                                 // 721
            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 722
        }                                                                                                              // 723
                                                                                                                       // 724
        // TODO: figure out nested arrays                                                                              // 725
    });                                                                                                                // 726
                                                                                                                       // 727
    types.forEach(function (type, i) {                                                                                 // 728
        if (isDynamic(solidityTypes[i], types[i])) {                                                                   // 729
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 730
            dynamicOffset += e.length / 2;                                                                             // 731
            result += e;                                                                                               // 732
        }                                                                                                              // 733
    });                                                                                                                // 734
    return result;                                                                                                     // 735
};                                                                                                                     // 736
                                                                                                                       // 737
// TODO: refactor whole encoding!                                                                                      // 738
SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 739
    var self = this;                                                                                                   // 740
    if (solidityType.isDynamicArray(type)) {                                                                           // 741
        return (function () {                                                                                          // 742
            // offset was already set                                                                                  // 743
            var nestedName = solidityType.nestedName(type);                                                            // 744
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 745
            var result = encoded[0];                                                                                   // 746
                                                                                                                       // 747
            (function () {                                                                                             // 748
                var previousLength = 2; // in int                                                                      // 749
                if (solidityType.isDynamicArray(nestedName)) {                                                         // 750
                    for (var i = 1; i < encoded.length; i++) {                                                         // 751
                        previousLength += +(encoded[i - 1])[0] || 0;                                                   // 752
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 754
                }                                                                                                      // 755
            })();                                                                                                      // 756
                                                                                                                       // 757
            // first element is length, skip it                                                                        // 758
            (function () {                                                                                             // 759
                for (var i = 0; i < encoded.length - 1; i++) {                                                         // 760
                    var additionalOffset = result / 2;                                                                 // 761
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);
                }                                                                                                      // 763
            })();                                                                                                      // 764
                                                                                                                       // 765
            return result;                                                                                             // 766
        })();                                                                                                          // 767
                                                                                                                       // 768
    } else if (solidityType.isStaticArray(type)) {                                                                     // 769
        return (function () {                                                                                          // 770
            var nestedName = solidityType.nestedName(type);                                                            // 771
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 772
            var result = "";                                                                                           // 773
                                                                                                                       // 774
                                                                                                                       // 775
            if (solidityType.isDynamicArray(nestedName)) {                                                             // 776
                (function () {                                                                                         // 777
                    var previousLength = 0; // in int                                                                  // 778
                    for (var i = 0; i < encoded.length; i++) {                                                         // 779
                        // calculate length of previous item                                                           // 780
                        previousLength += +(encoded[i - 1] || [])[0] || 0;                                             // 781
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 783
                })();                                                                                                  // 784
            }                                                                                                          // 785
                                                                                                                       // 786
            (function () {                                                                                             // 787
                for (var i = 0; i < encoded.length; i++) {                                                             // 788
                    var additionalOffset = result / 2;                                                                 // 789
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);  // 790
                }                                                                                                      // 791
            })();                                                                                                      // 792
                                                                                                                       // 793
            return result;                                                                                             // 794
        })();                                                                                                          // 795
    }                                                                                                                  // 796
                                                                                                                       // 797
    return encoded;                                                                                                    // 798
};                                                                                                                     // 799
                                                                                                                       // 800
/**                                                                                                                    // 801
 * Should be used to decode bytes to plain param                                                                       // 802
 *                                                                                                                     // 803
 * @method decodeParam                                                                                                 // 804
 * @param {String} type                                                                                                // 805
 * @param {String} bytes                                                                                               // 806
 * @return {Object} plain param                                                                                        // 807
 */                                                                                                                    // 808
SolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 809
    return this.decodeParams([type], bytes)[0];                                                                        // 810
};                                                                                                                     // 811
                                                                                                                       // 812
/**                                                                                                                    // 813
 * Should be used to decode list of params                                                                             // 814
 *                                                                                                                     // 815
 * @method decodeParam                                                                                                 // 816
 * @param {Array} types                                                                                                // 817
 * @param {String} bytes                                                                                               // 818
 * @return {Array} array of plain params                                                                               // 819
 */                                                                                                                    // 820
SolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 821
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 822
    var offsets = this.getOffsets(types, solidityTypes);                                                               // 823
                                                                                                                       // 824
    return solidityTypes.map(function (solidityType, index) {                                                          // 825
        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 826
    });                                                                                                                // 827
};                                                                                                                     // 828
                                                                                                                       // 829
SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 830
    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 831
        return solidityType.staticPartLength(types[index]);                                                            // 832
    });                                                                                                                // 833
                                                                                                                       // 834
    for (var i = 1; i < lengths.length; i++) {                                                                         // 835
         // sum with length of previous element                                                                        // 836
        lengths[i] += lengths[i - 1];                                                                                  // 837
    }                                                                                                                  // 838
                                                                                                                       // 839
    return lengths.map(function (length, index) {                                                                      // 840
        // remove the current length, so the length is sum of previous elements                                        // 841
        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 842
        return length - staticPartLength;                                                                              // 843
    });                                                                                                                // 844
};                                                                                                                     // 845
                                                                                                                       // 846
SolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 847
    var self = this;                                                                                                   // 848
    return types.map(function (type) {                                                                                 // 849
        return self._requireType(type);                                                                                // 850
    });                                                                                                                // 851
};                                                                                                                     // 852
                                                                                                                       // 853
var coder = new SolidityCoder([                                                                                        // 854
    new SolidityTypeAddress(),                                                                                         // 855
    new SolidityTypeBool(),                                                                                            // 856
    new SolidityTypeInt(),                                                                                             // 857
    new SolidityTypeUInt(),                                                                                            // 858
    new SolidityTypeDynamicBytes(),                                                                                    // 859
    new SolidityTypeBytes(),                                                                                           // 860
    new SolidityTypeString(),                                                                                          // 861
    new SolidityTypeReal(),                                                                                            // 862
    new SolidityTypeUReal()                                                                                            // 863
]);                                                                                                                    // 864
                                                                                                                       // 865
module.exports = coder;                                                                                                // 866
                                                                                                                       // 867
},{"./address":4,"./bool":5,"./bytes":6,"./dynamicbytes":8,"./formatters":9,"./int":10,"./real":12,"./string":13,"./uint":15,"./ureal":16}],8:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 869
var SolidityType = require('./type');                                                                                  // 870
                                                                                                                       // 871
var SolidityTypeDynamicBytes = function () {                                                                           // 872
    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 873
    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 874
};                                                                                                                     // 875
                                                                                                                       // 876
SolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 877
SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 878
                                                                                                                       // 879
SolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 880
    return !!name.match(/^bytes(\[([0-9]*)\])*$/);                                                                     // 881
};                                                                                                                     // 882
                                                                                                                       // 883
SolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 884
    return true;                                                                                                       // 885
};                                                                                                                     // 886
                                                                                                                       // 887
module.exports = SolidityTypeDynamicBytes;                                                                             // 888
                                                                                                                       // 889
},{"./formatters":9,"./type":14}],9:[function(require,module,exports){                                                 // 890
/*                                                                                                                     // 891
    This file is part of web3.js.                                                                                      // 892
                                                                                                                       // 893
    web3.js is free software: you can redistribute it and/or modify                                                    // 894
    it under the terms of the GNU Lesser General Public License as published by                                        // 895
    the Free Software Foundation, either version 3 of the License, or                                                  // 896
    (at your option) any later version.                                                                                // 897
                                                                                                                       // 898
    web3.js is distributed in the hope that it will be useful,                                                         // 899
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 900
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 901
    GNU Lesser General Public License for more details.                                                                // 902
                                                                                                                       // 903
    You should have received a copy of the GNU Lesser General Public License                                           // 904
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 905
*/                                                                                                                     // 906
/**                                                                                                                    // 907
 * @file formatters.js                                                                                                 // 908
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 909
 * @date 2015                                                                                                          // 910
 */                                                                                                                    // 911
                                                                                                                       // 912
var BigNumber = require('bignumber.js');                                                                               // 913
var utils = require('../utils/utils');                                                                                 // 914
var c = require('../utils/config');                                                                                    // 915
var SolidityParam = require('./param');                                                                                // 916
                                                                                                                       // 917
                                                                                                                       // 918
/**                                                                                                                    // 919
 * Formats input value to byte representation of int                                                                   // 920
 * If value is negative, return it's two's complement                                                                  // 921
 * If the value is floating point, round it down                                                                       // 922
 *                                                                                                                     // 923
 * @method formatInputInt                                                                                              // 924
 * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 925
 * @returns {SolidityParam}                                                                                            // 926
 */                                                                                                                    // 927
var formatInputInt = function (value) {                                                                                // 928
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 929
    var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);                                        // 930
    return new SolidityParam(result);                                                                                  // 931
};                                                                                                                     // 932
                                                                                                                       // 933
/**                                                                                                                    // 934
 * Formats input bytes                                                                                                 // 935
 *                                                                                                                     // 936
 * @method formatInputBytes                                                                                            // 937
 * @param {String}                                                                                                     // 938
 * @returns {SolidityParam}                                                                                            // 939
 */                                                                                                                    // 940
var formatInputBytes = function (value) {                                                                              // 941
    var result = utils.toHex(value).substr(2);                                                                         // 942
    var l = Math.floor((result.length + 63) / 64);                                                                     // 943
    result = utils.padRight(result, l * 64);                                                                           // 944
    return new SolidityParam(result);                                                                                  // 945
};                                                                                                                     // 946
                                                                                                                       // 947
/**                                                                                                                    // 948
 * Formats input bytes                                                                                                 // 949
 *                                                                                                                     // 950
 * @method formatDynamicInputBytes                                                                                     // 951
 * @param {String}                                                                                                     // 952
 * @returns {SolidityParam}                                                                                            // 953
 */                                                                                                                    // 954
var formatInputDynamicBytes = function (value) {                                                                       // 955
    var result = utils.toHex(value).substr(2);                                                                         // 956
    var length = result.length / 2;                                                                                    // 957
    var l = Math.floor((result.length + 63) / 64);                                                                     // 958
    result = utils.padRight(result, l * 64);                                                                           // 959
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 960
};                                                                                                                     // 961
                                                                                                                       // 962
/**                                                                                                                    // 963
 * Formats input value to byte representation of string                                                                // 964
 *                                                                                                                     // 965
 * @method formatInputString                                                                                           // 966
 * @param {String}                                                                                                     // 967
 * @returns {SolidityParam}                                                                                            // 968
 */                                                                                                                    // 969
var formatInputString = function (value) {                                                                             // 970
    var result = utils.fromUtf8(value).substr(2);                                                                      // 971
    var length = result.length / 2;                                                                                    // 972
    var l = Math.floor((result.length + 63) / 64);                                                                     // 973
    result = utils.padRight(result, l * 64);                                                                           // 974
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 975
};                                                                                                                     // 976
                                                                                                                       // 977
/**                                                                                                                    // 978
 * Formats input value to byte representation of bool                                                                  // 979
 *                                                                                                                     // 980
 * @method formatInputBool                                                                                             // 981
 * @param {Boolean}                                                                                                    // 982
 * @returns {SolidityParam}                                                                                            // 983
 */                                                                                                                    // 984
var formatInputBool = function (value) {                                                                               // 985
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 986
    return new SolidityParam(result);                                                                                  // 987
};                                                                                                                     // 988
                                                                                                                       // 989
/**                                                                                                                    // 990
 * Formats input value to byte representation of real                                                                  // 991
 * Values are multiplied by 2^m and encoded as integers                                                                // 992
 *                                                                                                                     // 993
 * @method formatInputReal                                                                                             // 994
 * @param {String|Number|BigNumber}                                                                                    // 995
 * @returns {SolidityParam}                                                                                            // 996
 */                                                                                                                    // 997
var formatInputReal = function (value) {                                                                               // 998
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 999
};                                                                                                                     // 1000
                                                                                                                       // 1001
/**                                                                                                                    // 1002
 * Check if input value is negative                                                                                    // 1003
 *                                                                                                                     // 1004
 * @method signedIsNegative                                                                                            // 1005
 * @param {String} value is hex format                                                                                 // 1006
 * @returns {Boolean} true if it is negative, otherwise false                                                          // 1007
 */                                                                                                                    // 1008
var signedIsNegative = function (value) {                                                                              // 1009
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 1010
};                                                                                                                     // 1011
                                                                                                                       // 1012
/**                                                                                                                    // 1013
 * Formats right-aligned output bytes to int                                                                           // 1014
 *                                                                                                                     // 1015
 * @method formatOutputInt                                                                                             // 1016
 * @param {SolidityParam} param                                                                                        // 1017
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 1018
 */                                                                                                                    // 1019
var formatOutputInt = function (param) {                                                                               // 1020
    var value = param.staticPart() || "0";                                                                             // 1021
                                                                                                                       // 1022
    // check if it's negative number                                                                                   // 1023
    // it it is, return two's complement                                                                               // 1024
    if (signedIsNegative(value)) {                                                                                     // 1025
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                  // 1027
    return new BigNumber(value, 16);                                                                                   // 1028
};                                                                                                                     // 1029
                                                                                                                       // 1030
/**                                                                                                                    // 1031
 * Formats right-aligned output bytes to uint                                                                          // 1032
 *                                                                                                                     // 1033
 * @method formatOutputUInt                                                                                            // 1034
 * @param {SolidityParam}                                                                                              // 1035
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 1036
 */                                                                                                                    // 1037
var formatOutputUInt = function (param) {                                                                              // 1038
    var value = param.staticPart() || "0";                                                                             // 1039
    return new BigNumber(value, 16);                                                                                   // 1040
};                                                                                                                     // 1041
                                                                                                                       // 1042
/**                                                                                                                    // 1043
 * Formats right-aligned output bytes to real                                                                          // 1044
 *                                                                                                                     // 1045
 * @method formatOutputReal                                                                                            // 1046
 * @param {SolidityParam}                                                                                              // 1047
 * @returns {BigNumber} input bytes formatted to real                                                                  // 1048
 */                                                                                                                    // 1049
var formatOutputReal = function (param) {                                                                              // 1050
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 1051
};                                                                                                                     // 1052
                                                                                                                       // 1053
/**                                                                                                                    // 1054
 * Formats right-aligned output bytes to ureal                                                                         // 1055
 *                                                                                                                     // 1056
 * @method formatOutputUReal                                                                                           // 1057
 * @param {SolidityParam}                                                                                              // 1058
 * @returns {BigNumber} input bytes formatted to ureal                                                                 // 1059
 */                                                                                                                    // 1060
var formatOutputUReal = function (param) {                                                                             // 1061
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 1062
};                                                                                                                     // 1063
                                                                                                                       // 1064
/**                                                                                                                    // 1065
 * Should be used to format output bool                                                                                // 1066
 *                                                                                                                     // 1067
 * @method formatOutputBool                                                                                            // 1068
 * @param {SolidityParam}                                                                                              // 1069
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 1070
 */                                                                                                                    // 1071
var formatOutputBool = function (param) {                                                                              // 1072
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 1073
};                                                                                                                     // 1074
                                                                                                                       // 1075
/**                                                                                                                    // 1076
 * Should be used to format output bytes                                                                               // 1077
 *                                                                                                                     // 1078
 * @method formatOutputBytes                                                                                           // 1079
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1080
 * @param {String} name type name                                                                                      // 1081
 * @returns {String} hex string                                                                                        // 1082
 */                                                                                                                    // 1083
var formatOutputBytes = function (param, name) {                                                                       // 1084
    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 1085
    var size = parseInt(matches[1]);                                                                                   // 1086
    return '0x' + param.staticPart().slice(0, 2 * size);                                                               // 1087
};                                                                                                                     // 1088
                                                                                                                       // 1089
/**                                                                                                                    // 1090
 * Should be used to format output bytes                                                                               // 1091
 *                                                                                                                     // 1092
 * @method formatOutputDynamicBytes                                                                                    // 1093
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1094
 * @returns {String} hex string                                                                                        // 1095
 */                                                                                                                    // 1096
var formatOutputDynamicBytes = function (param) {                                                                      // 1097
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1098
    return '0x' + param.dynamicPart().substr(64, length);                                                              // 1099
};                                                                                                                     // 1100
                                                                                                                       // 1101
/**                                                                                                                    // 1102
 * Should be used to format output string                                                                              // 1103
 *                                                                                                                     // 1104
 * @method formatOutputString                                                                                          // 1105
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1106
 * @returns {String} ascii string                                                                                      // 1107
 */                                                                                                                    // 1108
var formatOutputString = function (param) {                                                                            // 1109
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1110
    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 1111
};                                                                                                                     // 1112
                                                                                                                       // 1113
/**                                                                                                                    // 1114
 * Should be used to format output address                                                                             // 1115
 *                                                                                                                     // 1116
 * @method formatOutputAddress                                                                                         // 1117
 * @param {SolidityParam} right-aligned input bytes                                                                    // 1118
 * @returns {String} address                                                                                           // 1119
 */                                                                                                                    // 1120
var formatOutputAddress = function (param) {                                                                           // 1121
    var value = param.staticPart();                                                                                    // 1122
    return "0x" + value.slice(value.length - 40, value.length);                                                        // 1123
};                                                                                                                     // 1124
                                                                                                                       // 1125
module.exports = {                                                                                                     // 1126
    formatInputInt: formatInputInt,                                                                                    // 1127
    formatInputBytes: formatInputBytes,                                                                                // 1128
    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 1129
    formatInputString: formatInputString,                                                                              // 1130
    formatInputBool: formatInputBool,                                                                                  // 1131
    formatInputReal: formatInputReal,                                                                                  // 1132
    formatOutputInt: formatOutputInt,                                                                                  // 1133
    formatOutputUInt: formatOutputUInt,                                                                                // 1134
    formatOutputReal: formatOutputReal,                                                                                // 1135
    formatOutputUReal: formatOutputUReal,                                                                              // 1136
    formatOutputBool: formatOutputBool,                                                                                // 1137
    formatOutputBytes: formatOutputBytes,                                                                              // 1138
    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 1139
    formatOutputString: formatOutputString,                                                                            // 1140
    formatOutputAddress: formatOutputAddress                                                                           // 1141
};                                                                                                                     // 1142
                                                                                                                       // 1143
},{"../utils/config":18,"../utils/utils":20,"./param":11,"bignumber.js":"bignumber.js"}],10:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 1145
var SolidityType = require('./type');                                                                                  // 1146
                                                                                                                       // 1147
/**                                                                                                                    // 1148
 * SolidityTypeInt is a prootype that represents int type                                                              // 1149
 * It matches:                                                                                                         // 1150
 * int                                                                                                                 // 1151
 * int[]                                                                                                               // 1152
 * int[4]                                                                                                              // 1153
 * int[][]                                                                                                             // 1154
 * int[3][]                                                                                                            // 1155
 * int[][6][], ...                                                                                                     // 1156
 * int32                                                                                                               // 1157
 * int64[]                                                                                                             // 1158
 * int8[4]                                                                                                             // 1159
 * int256[][]                                                                                                          // 1160
 * int[3][]                                                                                                            // 1161
 * int64[][6][], ...                                                                                                   // 1162
 */                                                                                                                    // 1163
var SolidityTypeInt = function () {                                                                                    // 1164
    this._inputFormatter = f.formatInputInt;                                                                           // 1165
    this._outputFormatter = f.formatOutputInt;                                                                         // 1166
};                                                                                                                     // 1167
                                                                                                                       // 1168
SolidityTypeInt.prototype = new SolidityType({});                                                                      // 1169
SolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 1170
                                                                                                                       // 1171
SolidityTypeInt.prototype.isType = function (name) {                                                                   // 1172
    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);                                                              // 1173
};                                                                                                                     // 1174
                                                                                                                       // 1175
module.exports = SolidityTypeInt;                                                                                      // 1176
                                                                                                                       // 1177
},{"./formatters":9,"./type":14}],11:[function(require,module,exports){                                                // 1178
/*                                                                                                                     // 1179
    This file is part of web3.js.                                                                                      // 1180
                                                                                                                       // 1181
    web3.js is free software: you can redistribute it and/or modify                                                    // 1182
    it under the terms of the GNU Lesser General Public License as published by                                        // 1183
    the Free Software Foundation, either version 3 of the License, or                                                  // 1184
    (at your option) any later version.                                                                                // 1185
                                                                                                                       // 1186
    web3.js is distributed in the hope that it will be useful,                                                         // 1187
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1188
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1189
    GNU Lesser General Public License for more details.                                                                // 1190
                                                                                                                       // 1191
    You should have received a copy of the GNU Lesser General Public License                                           // 1192
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1193
*/                                                                                                                     // 1194
/**                                                                                                                    // 1195
 * @file param.js                                                                                                      // 1196
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1197
 * @date 2015                                                                                                          // 1198
 */                                                                                                                    // 1199
                                                                                                                       // 1200
var utils = require('../utils/utils');                                                                                 // 1201
                                                                                                                       // 1202
/**                                                                                                                    // 1203
 * SolidityParam object prototype.                                                                                     // 1204
 * Should be used when encoding, decoding solidity bytes                                                               // 1205
 */                                                                                                                    // 1206
var SolidityParam = function (value, offset) {                                                                         // 1207
    this.value = value || '';                                                                                          // 1208
    this.offset = offset; // offset in bytes                                                                           // 1209
};                                                                                                                     // 1210
                                                                                                                       // 1211
/**                                                                                                                    // 1212
 * This method should be used to get length of params's dynamic part                                                   // 1213
 *                                                                                                                     // 1214
 * @method dynamicPartLength                                                                                           // 1215
 * @returns {Number} length of dynamic part (in bytes)                                                                 // 1216
 */                                                                                                                    // 1217
SolidityParam.prototype.dynamicPartLength = function () {                                                              // 1218
    return this.dynamicPart().length / 2;                                                                              // 1219
};                                                                                                                     // 1220
                                                                                                                       // 1221
/**                                                                                                                    // 1222
 * This method should be used to create copy of solidity param with different offset                                   // 1223
 *                                                                                                                     // 1224
 * @method withOffset                                                                                                  // 1225
 * @param {Number} offset length in bytes                                                                              // 1226
 * @returns {SolidityParam} new solidity param with applied offset                                                     // 1227
 */                                                                                                                    // 1228
SolidityParam.prototype.withOffset = function (offset) {                                                               // 1229
    return new SolidityParam(this.value, offset);                                                                      // 1230
};                                                                                                                     // 1231
                                                                                                                       // 1232
/**                                                                                                                    // 1233
 * This method should be used to combine solidity params together                                                      // 1234
 * eg. when appending an array                                                                                         // 1235
 *                                                                                                                     // 1236
 * @method combine                                                                                                     // 1237
 * @param {SolidityParam} param with which we should combine                                                           // 1238
 * @param {SolidityParam} result of combination                                                                        // 1239
 */                                                                                                                    // 1240
SolidityParam.prototype.combine = function (param) {                                                                   // 1241
    return new SolidityParam(this.value + param.value);                                                                // 1242
};                                                                                                                     // 1243
                                                                                                                       // 1244
/**                                                                                                                    // 1245
 * This method should be called to check if param has dynamic size.                                                    // 1246
 * If it has, it returns true, otherwise false                                                                         // 1247
 *                                                                                                                     // 1248
 * @method isDynamic                                                                                                   // 1249
 * @returns {Boolean}                                                                                                  // 1250
 */                                                                                                                    // 1251
SolidityParam.prototype.isDynamic = function () {                                                                      // 1252
    return this.offset !== undefined;                                                                                  // 1253
};                                                                                                                     // 1254
                                                                                                                       // 1255
/**                                                                                                                    // 1256
 * This method should be called to transform offset to bytes                                                           // 1257
 *                                                                                                                     // 1258
 * @method offsetAsBytes                                                                                               // 1259
 * @returns {String} bytes representation of offset                                                                    // 1260
 */                                                                                                                    // 1261
SolidityParam.prototype.offsetAsBytes = function () {                                                                  // 1262
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 1263
};                                                                                                                     // 1264
                                                                                                                       // 1265
/**                                                                                                                    // 1266
 * This method should be called to get static part of param                                                            // 1267
 *                                                                                                                     // 1268
 * @method staticPart                                                                                                  // 1269
 * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 1270
 */                                                                                                                    // 1271
SolidityParam.prototype.staticPart = function () {                                                                     // 1272
    if (!this.isDynamic()) {                                                                                           // 1273
        return this.value;                                                                                             // 1274
    }                                                                                                                  // 1275
    return this.offsetAsBytes();                                                                                       // 1276
};                                                                                                                     // 1277
                                                                                                                       // 1278
/**                                                                                                                    // 1279
 * This method should be called to get dynamic part of param                                                           // 1280
 *                                                                                                                     // 1281
 * @method dynamicPart                                                                                                 // 1282
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 1283
 */                                                                                                                    // 1284
SolidityParam.prototype.dynamicPart = function () {                                                                    // 1285
    return this.isDynamic() ? this.value : '';                                                                         // 1286
};                                                                                                                     // 1287
                                                                                                                       // 1288
/**                                                                                                                    // 1289
 * This method should be called to encode param                                                                        // 1290
 *                                                                                                                     // 1291
 * @method encode                                                                                                      // 1292
 * @returns {String}                                                                                                   // 1293
 */                                                                                                                    // 1294
SolidityParam.prototype.encode = function () {                                                                         // 1295
    return this.staticPart() + this.dynamicPart();                                                                     // 1296
};                                                                                                                     // 1297
                                                                                                                       // 1298
/**                                                                                                                    // 1299
 * This method should be called to encode array of params                                                              // 1300
 *                                                                                                                     // 1301
 * @method encodeList                                                                                                  // 1302
 * @param {Array[SolidityParam]} params                                                                                // 1303
 * @returns {String}                                                                                                   // 1304
 */                                                                                                                    // 1305
SolidityParam.encodeList = function (params) {                                                                         // 1306
                                                                                                                       // 1307
    // updating offsets                                                                                                // 1308
    var totalOffset = params.length * 32;                                                                              // 1309
    var offsetParams = params.map(function (param) {                                                                   // 1310
        if (!param.isDynamic()) {                                                                                      // 1311
            return param;                                                                                              // 1312
        }                                                                                                              // 1313
        var offset = totalOffset;                                                                                      // 1314
        totalOffset += param.dynamicPartLength();                                                                      // 1315
        return param.withOffset(offset);                                                                               // 1316
    });                                                                                                                // 1317
                                                                                                                       // 1318
    // encode everything!                                                                                              // 1319
    return offsetParams.reduce(function (result, param) {                                                              // 1320
        return result + param.dynamicPart();                                                                           // 1321
    }, offsetParams.reduce(function (result, param) {                                                                  // 1322
        return result + param.staticPart();                                                                            // 1323
    }, ''));                                                                                                           // 1324
};                                                                                                                     // 1325
                                                                                                                       // 1326
                                                                                                                       // 1327
                                                                                                                       // 1328
module.exports = SolidityParam;                                                                                        // 1329
                                                                                                                       // 1330
                                                                                                                       // 1331
},{"../utils/utils":20}],12:[function(require,module,exports){                                                         // 1332
var f = require('./formatters');                                                                                       // 1333
var SolidityType = require('./type');                                                                                  // 1334
                                                                                                                       // 1335
/**                                                                                                                    // 1336
 * SolidityTypeReal is a prootype that represents real type                                                            // 1337
 * It matches:                                                                                                         // 1338
 * real                                                                                                                // 1339
 * real[]                                                                                                              // 1340
 * real[4]                                                                                                             // 1341
 * real[][]                                                                                                            // 1342
 * real[3][]                                                                                                           // 1343
 * real[][6][], ...                                                                                                    // 1344
 * real32                                                                                                              // 1345
 * real64[]                                                                                                            // 1346
 * real8[4]                                                                                                            // 1347
 * real256[][]                                                                                                         // 1348
 * real[3][]                                                                                                           // 1349
 * real64[][6][], ...                                                                                                  // 1350
 */                                                                                                                    // 1351
var SolidityTypeReal = function () {                                                                                   // 1352
    this._inputFormatter = f.formatInputReal;                                                                          // 1353
    this._outputFormatter = f.formatOutputReal;                                                                        // 1354
};                                                                                                                     // 1355
                                                                                                                       // 1356
SolidityTypeReal.prototype = new SolidityType({});                                                                     // 1357
SolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 1358
                                                                                                                       // 1359
SolidityTypeReal.prototype.isType = function (name) {                                                                  // 1360
    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);                                                               // 1361
};                                                                                                                     // 1362
                                                                                                                       // 1363
module.exports = SolidityTypeReal;                                                                                     // 1364
                                                                                                                       // 1365
},{"./formatters":9,"./type":14}],13:[function(require,module,exports){                                                // 1366
var f = require('./formatters');                                                                                       // 1367
var SolidityType = require('./type');                                                                                  // 1368
                                                                                                                       // 1369
var SolidityTypeString = function () {                                                                                 // 1370
    this._inputFormatter = f.formatInputString;                                                                        // 1371
    this._outputFormatter = f.formatOutputString;                                                                      // 1372
};                                                                                                                     // 1373
                                                                                                                       // 1374
SolidityTypeString.prototype = new SolidityType({});                                                                   // 1375
SolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 1376
                                                                                                                       // 1377
SolidityTypeString.prototype.isType = function (name) {                                                                // 1378
    return !!name.match(/^string(\[([0-9]*)\])*$/);                                                                    // 1379
};                                                                                                                     // 1380
                                                                                                                       // 1381
SolidityTypeString.prototype.isDynamicType = function () {                                                             // 1382
    return true;                                                                                                       // 1383
};                                                                                                                     // 1384
                                                                                                                       // 1385
module.exports = SolidityTypeString;                                                                                   // 1386
                                                                                                                       // 1387
},{"./formatters":9,"./type":14}],14:[function(require,module,exports){                                                // 1388
var f = require('./formatters');                                                                                       // 1389
var SolidityParam = require('./param');                                                                                // 1390
                                                                                                                       // 1391
/**                                                                                                                    // 1392
 * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 1393
 */                                                                                                                    // 1394
var SolidityType = function (config) {                                                                                 // 1395
    this._inputFormatter = config.inputFormatter;                                                                      // 1396
    this._outputFormatter = config.outputFormatter;                                                                    // 1397
};                                                                                                                     // 1398
                                                                                                                       // 1399
/**                                                                                                                    // 1400
 * Should be used to determine if this SolidityType do match given name                                                // 1401
 *                                                                                                                     // 1402
 * @method isType                                                                                                      // 1403
 * @param {String} name                                                                                                // 1404
 * @return {Bool} true if type match this SolidityType, otherwise false                                                // 1405
 */                                                                                                                    // 1406
SolidityType.prototype.isType = function (name) {                                                                      // 1407
    throw "this method should be overrwritten for type " + name;                                                       // 1408
};                                                                                                                     // 1409
                                                                                                                       // 1410
/**                                                                                                                    // 1411
 * Should be used to determine what is the length of static part in given type                                         // 1412
 *                                                                                                                     // 1413
 * @method staticPartLength                                                                                            // 1414
 * @param {String} name                                                                                                // 1415
 * @return {Number} length of static part in bytes                                                                     // 1416
 */                                                                                                                    // 1417
SolidityType.prototype.staticPartLength = function (name) {                                                            // 1418
    // If name isn't an array then treat it like a single element array.                                               // 1419
    return (this.nestedTypes(name) || ['[1]'])                                                                         // 1420
        .map(function (type) {                                                                                         // 1421
            // the length of the nested array                                                                          // 1422
            return parseInt(type.slice(1, -1), 10) || 1;                                                               // 1423
        })                                                                                                             // 1424
        .reduce(function (previous, current) {                                                                         // 1425
            return previous * current;                                                                                 // 1426
        // all basic types are 32 bytes long                                                                           // 1427
        }, 32);                                                                                                        // 1428
};                                                                                                                     // 1429
                                                                                                                       // 1430
/**                                                                                                                    // 1431
 * Should be used to determine if type is dynamic array                                                                // 1432
 * eg:                                                                                                                 // 1433
 * "type[]" => true                                                                                                    // 1434
 * "type[4]" => false                                                                                                  // 1435
 *                                                                                                                     // 1436
 * @method isDynamicArray                                                                                              // 1437
 * @param {String} name                                                                                                // 1438
 * @return {Bool} true if the type is dynamic array                                                                    // 1439
 */                                                                                                                    // 1440
SolidityType.prototype.isDynamicArray = function (name) {                                                              // 1441
    var nestedTypes = this.nestedTypes(name);                                                                          // 1442
    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 1443
};                                                                                                                     // 1444
                                                                                                                       // 1445
/**                                                                                                                    // 1446
 * Should be used to determine if type is static array                                                                 // 1447
 * eg:                                                                                                                 // 1448
 * "type[]" => false                                                                                                   // 1449
 * "type[4]" => true                                                                                                   // 1450
 *                                                                                                                     // 1451
 * @method isStaticArray                                                                                               // 1452
 * @param {String} name                                                                                                // 1453
 * @return {Bool} true if the type is static array                                                                     // 1454
 */                                                                                                                    // 1455
SolidityType.prototype.isStaticArray = function (name) {                                                               // 1456
    var nestedTypes = this.nestedTypes(name);                                                                          // 1457
    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 1458
};                                                                                                                     // 1459
                                                                                                                       // 1460
/**                                                                                                                    // 1461
 * Should return length of static array                                                                                // 1462
 * eg.                                                                                                                 // 1463
 * "int[32]" => 32                                                                                                     // 1464
 * "int256[14]" => 14                                                                                                  // 1465
 * "int[2][3]" => 3                                                                                                    // 1466
 * "int" => 1                                                                                                          // 1467
 * "int[1]" => 1                                                                                                       // 1468
 * "int[]" => 1                                                                                                        // 1469
 *                                                                                                                     // 1470
 * @method staticArrayLength                                                                                           // 1471
 * @param {String} name                                                                                                // 1472
 * @return {Number} static array length                                                                                // 1473
 */                                                                                                                    // 1474
SolidityType.prototype.staticArrayLength = function (name) {                                                           // 1475
    var nestedTypes = this.nestedTypes(name);                                                                          // 1476
    if (nestedTypes) {                                                                                                 // 1477
       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 1478
    }                                                                                                                  // 1479
    return 1;                                                                                                          // 1480
};                                                                                                                     // 1481
                                                                                                                       // 1482
/**                                                                                                                    // 1483
 * Should return nested type                                                                                           // 1484
 * eg.                                                                                                                 // 1485
 * "int[32]" => "int"                                                                                                  // 1486
 * "int256[14]" => "int256"                                                                                            // 1487
 * "int[2][3]" => "int[2]"                                                                                             // 1488
 * "int" => "int"                                                                                                      // 1489
 * "int[]" => "int"                                                                                                    // 1490
 *                                                                                                                     // 1491
 * @method nestedName                                                                                                  // 1492
 * @param {String} name                                                                                                // 1493
 * @return {String} nested name                                                                                        // 1494
 */                                                                                                                    // 1495
SolidityType.prototype.nestedName = function (name) {                                                                  // 1496
    // remove last [] in name                                                                                          // 1497
    var nestedTypes = this.nestedTypes(name);                                                                          // 1498
    if (!nestedTypes) {                                                                                                // 1499
        return name;                                                                                                   // 1500
    }                                                                                                                  // 1501
                                                                                                                       // 1502
    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 1503
};                                                                                                                     // 1504
                                                                                                                       // 1505
/**                                                                                                                    // 1506
 * Should return true if type has dynamic size by default                                                              // 1507
 * such types are "string", "bytes"                                                                                    // 1508
 *                                                                                                                     // 1509
 * @method isDynamicType                                                                                               // 1510
 * @param {String} name                                                                                                // 1511
 * @return {Bool} true if is dynamic, otherwise false                                                                  // 1512
 */                                                                                                                    // 1513
SolidityType.prototype.isDynamicType = function () {                                                                   // 1514
    return false;                                                                                                      // 1515
};                                                                                                                     // 1516
                                                                                                                       // 1517
/**                                                                                                                    // 1518
 * Should return array of nested types                                                                                 // 1519
 * eg.                                                                                                                 // 1520
 * "int[2][3][]" => ["[2]", "[3]", "[]"]                                                                               // 1521
 * "int[] => ["[]"]                                                                                                    // 1522
 * "int" => null                                                                                                       // 1523
 *                                                                                                                     // 1524
 * @method nestedTypes                                                                                                 // 1525
 * @param {String} name                                                                                                // 1526
 * @return {Array} array of nested types                                                                               // 1527
 */                                                                                                                    // 1528
SolidityType.prototype.nestedTypes = function (name) {                                                                 // 1529
    // return list of strings eg. "[]", "[3]", "[]", "[2]"                                                             // 1530
    return name.match(/(\[[0-9]*\])/g);                                                                                // 1531
};                                                                                                                     // 1532
                                                                                                                       // 1533
/**                                                                                                                    // 1534
 * Should be used to encode the value                                                                                  // 1535
 *                                                                                                                     // 1536
 * @method encode                                                                                                      // 1537
 * @param {Object} value                                                                                               // 1538
 * @param {String} name                                                                                                // 1539
 * @return {String} encoded value                                                                                      // 1540
 */                                                                                                                    // 1541
SolidityType.prototype.encode = function (value, name) {                                                               // 1542
    var self = this;                                                                                                   // 1543
    if (this.isDynamicArray(name)) {                                                                                   // 1544
                                                                                                                       // 1545
        return (function () {                                                                                          // 1546
            var length = value.length;                          // in int                                              // 1547
            var nestedName = self.nestedName(name);                                                                    // 1548
                                                                                                                       // 1549
            var result = [];                                                                                           // 1550
            result.push(f.formatInputInt(length).encode());                                                            // 1551
                                                                                                                       // 1552
            value.forEach(function (v) {                                                                               // 1553
                result.push(self.encode(v, nestedName));                                                               // 1554
            });                                                                                                        // 1555
                                                                                                                       // 1556
            return result;                                                                                             // 1557
        })();                                                                                                          // 1558
                                                                                                                       // 1559
    } else if (this.isStaticArray(name)) {                                                                             // 1560
                                                                                                                       // 1561
        return (function () {                                                                                          // 1562
            var length = self.staticArrayLength(name);          // in int                                              // 1563
            var nestedName = self.nestedName(name);                                                                    // 1564
                                                                                                                       // 1565
            var result = [];                                                                                           // 1566
            for (var i = 0; i < length; i++) {                                                                         // 1567
                result.push(self.encode(value[i], nestedName));                                                        // 1568
            }                                                                                                          // 1569
                                                                                                                       // 1570
            return result;                                                                                             // 1571
        })();                                                                                                          // 1572
                                                                                                                       // 1573
    }                                                                                                                  // 1574
                                                                                                                       // 1575
    return this._inputFormatter(value, name).encode();                                                                 // 1576
};                                                                                                                     // 1577
                                                                                                                       // 1578
/**                                                                                                                    // 1579
 * Should be used to decode value from bytes                                                                           // 1580
 *                                                                                                                     // 1581
 * @method decode                                                                                                      // 1582
 * @param {String} bytes                                                                                               // 1583
 * @param {Number} offset in bytes                                                                                     // 1584
 * @param {String} name type name                                                                                      // 1585
 * @returns {Object} decoded value                                                                                     // 1586
 */                                                                                                                    // 1587
SolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 1588
    var self = this;                                                                                                   // 1589
                                                                                                                       // 1590
    if (this.isDynamicArray(name)) {                                                                                   // 1591
                                                                                                                       // 1592
        return (function () {                                                                                          // 1593
            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 1594
            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 1595
            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 1596
                                                                                                                       // 1597
            var nestedName = self.nestedName(name);                                                                    // 1598
            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 1599
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1600
            var result = [];                                                                                           // 1601
                                                                                                                       // 1602
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1603
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1604
            }                                                                                                          // 1605
                                                                                                                       // 1606
            return result;                                                                                             // 1607
        })();                                                                                                          // 1608
                                                                                                                       // 1609
    } else if (this.isStaticArray(name)) {                                                                             // 1610
                                                                                                                       // 1611
        return (function () {                                                                                          // 1612
            var length = self.staticArrayLength(name);                      // in int                                  // 1613
            var arrayStart = offset;                                        // in bytes                                // 1614
                                                                                                                       // 1615
            var nestedName = self.nestedName(name);                                                                    // 1616
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 1617
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1618
            var result = [];                                                                                           // 1619
                                                                                                                       // 1620
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1621
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1622
            }                                                                                                          // 1623
                                                                                                                       // 1624
            return result;                                                                                             // 1625
        })();                                                                                                          // 1626
    } else if (this.isDynamicType(name)) {                                                                             // 1627
                                                                                                                       // 1628
        return (function () {                                                                                          // 1629
            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 1630
            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 1631
            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 1632
            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0);              // 1633
            return self._outputFormatter(param, name);                                                                 // 1634
        })();                                                                                                          // 1635
    }                                                                                                                  // 1636
                                                                                                                       // 1637
    var length = this.staticPartLength(name);                                                                          // 1638
    var param = new SolidityParam(bytes.substr(offset * 2, length * 2));                                               // 1639
    return this._outputFormatter(param, name);                                                                         // 1640
};                                                                                                                     // 1641
                                                                                                                       // 1642
module.exports = SolidityType;                                                                                         // 1643
                                                                                                                       // 1644
},{"./formatters":9,"./param":11}],15:[function(require,module,exports){                                               // 1645
var f = require('./formatters');                                                                                       // 1646
var SolidityType = require('./type');                                                                                  // 1647
                                                                                                                       // 1648
/**                                                                                                                    // 1649
 * SolidityTypeUInt is a prootype that represents uint type                                                            // 1650
 * It matches:                                                                                                         // 1651
 * uint                                                                                                                // 1652
 * uint[]                                                                                                              // 1653
 * uint[4]                                                                                                             // 1654
 * uint[][]                                                                                                            // 1655
 * uint[3][]                                                                                                           // 1656
 * uint[][6][], ...                                                                                                    // 1657
 * uint32                                                                                                              // 1658
 * uint64[]                                                                                                            // 1659
 * uint8[4]                                                                                                            // 1660
 * uint256[][]                                                                                                         // 1661
 * uint[3][]                                                                                                           // 1662
 * uint64[][6][], ...                                                                                                  // 1663
 */                                                                                                                    // 1664
var SolidityTypeUInt = function () {                                                                                   // 1665
    this._inputFormatter = f.formatInputInt;                                                                           // 1666
    this._outputFormatter = f.formatOutputUInt;                                                                        // 1667
};                                                                                                                     // 1668
                                                                                                                       // 1669
SolidityTypeUInt.prototype = new SolidityType({});                                                                     // 1670
SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 1671
                                                                                                                       // 1672
SolidityTypeUInt.prototype.isType = function (name) {                                                                  // 1673
    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);                                                             // 1674
};                                                                                                                     // 1675
                                                                                                                       // 1676
module.exports = SolidityTypeUInt;                                                                                     // 1677
                                                                                                                       // 1678
},{"./formatters":9,"./type":14}],16:[function(require,module,exports){                                                // 1679
var f = require('./formatters');                                                                                       // 1680
var SolidityType = require('./type');                                                                                  // 1681
                                                                                                                       // 1682
/**                                                                                                                    // 1683
 * SolidityTypeUReal is a prootype that represents ureal type                                                          // 1684
 * It matches:                                                                                                         // 1685
 * ureal                                                                                                               // 1686
 * ureal[]                                                                                                             // 1687
 * ureal[4]                                                                                                            // 1688
 * ureal[][]                                                                                                           // 1689
 * ureal[3][]                                                                                                          // 1690
 * ureal[][6][], ...                                                                                                   // 1691
 * ureal32                                                                                                             // 1692
 * ureal64[]                                                                                                           // 1693
 * ureal8[4]                                                                                                           // 1694
 * ureal256[][]                                                                                                        // 1695
 * ureal[3][]                                                                                                          // 1696
 * ureal64[][6][], ...                                                                                                 // 1697
 */                                                                                                                    // 1698
var SolidityTypeUReal = function () {                                                                                  // 1699
    this._inputFormatter = f.formatInputReal;                                                                          // 1700
    this._outputFormatter = f.formatOutputUReal;                                                                       // 1701
};                                                                                                                     // 1702
                                                                                                                       // 1703
SolidityTypeUReal.prototype = new SolidityType({});                                                                    // 1704
SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 1705
                                                                                                                       // 1706
SolidityTypeUReal.prototype.isType = function (name) {                                                                 // 1707
    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);                                                            // 1708
};                                                                                                                     // 1709
                                                                                                                       // 1710
module.exports = SolidityTypeUReal;                                                                                    // 1711
                                                                                                                       // 1712
},{"./formatters":9,"./type":14}],17:[function(require,module,exports){                                                // 1713
'use strict';                                                                                                          // 1714
                                                                                                                       // 1715
// go env doesn't have and need XMLHttpRequest                                                                         // 1716
if (typeof XMLHttpRequest === 'undefined') {                                                                           // 1717
    exports.XMLHttpRequest = {};                                                                                       // 1718
} else {                                                                                                               // 1719
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                     // 1720
}                                                                                                                      // 1721
                                                                                                                       // 1722
                                                                                                                       // 1723
},{}],18:[function(require,module,exports){                                                                            // 1724
/*                                                                                                                     // 1725
    This file is part of web3.js.                                                                                      // 1726
                                                                                                                       // 1727
    web3.js is free software: you can redistribute it and/or modify                                                    // 1728
    it under the terms of the GNU Lesser General Public License as published by                                        // 1729
    the Free Software Foundation, either version 3 of the License, or                                                  // 1730
    (at your option) any later version.                                                                                // 1731
                                                                                                                       // 1732
    web3.js is distributed in the hope that it will be useful,                                                         // 1733
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1734
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1735
    GNU Lesser General Public License for more details.                                                                // 1736
                                                                                                                       // 1737
    You should have received a copy of the GNU Lesser General Public License                                           // 1738
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1739
*/                                                                                                                     // 1740
/** @file config.js                                                                                                    // 1741
 * @authors:                                                                                                           // 1742
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 1743
 * @date 2015                                                                                                          // 1744
 */                                                                                                                    // 1745
                                                                                                                       // 1746
/**                                                                                                                    // 1747
 * Utils                                                                                                               // 1748
 *                                                                                                                     // 1749
 * @module utils                                                                                                       // 1750
 */                                                                                                                    // 1751
                                                                                                                       // 1752
/**                                                                                                                    // 1753
 * Utility functions                                                                                                   // 1754
 *                                                                                                                     // 1755
 * @class [utils] config                                                                                               // 1756
 * @constructor                                                                                                        // 1757
 */                                                                                                                    // 1758
                                                                                                                       // 1759
                                                                                                                       // 1760
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 1761
var BigNumber = require('bignumber.js');                                                                               // 1762
                                                                                                                       // 1763
var ETH_UNITS = [                                                                                                      // 1764
    'wei',                                                                                                             // 1765
    'kwei',                                                                                                            // 1766
    'Mwei',                                                                                                            // 1767
    'Gwei',                                                                                                            // 1768
    'szabo',                                                                                                           // 1769
    'finney',                                                                                                          // 1770
    'femtoether',                                                                                                      // 1771
    'picoether',                                                                                                       // 1772
    'nanoether',                                                                                                       // 1773
    'microether',                                                                                                      // 1774
    'milliether',                                                                                                      // 1775
    'nano',                                                                                                            // 1776
    'micro',                                                                                                           // 1777
    'milli',                                                                                                           // 1778
    'ether',                                                                                                           // 1779
    'grand',                                                                                                           // 1780
    'Mether',                                                                                                          // 1781
    'Gether',                                                                                                          // 1782
    'Tether',                                                                                                          // 1783
    'Pether',                                                                                                          // 1784
    'Eether',                                                                                                          // 1785
    'Zether',                                                                                                          // 1786
    'Yether',                                                                                                          // 1787
    'Nether',                                                                                                          // 1788
    'Dether',                                                                                                          // 1789
    'Vether',                                                                                                          // 1790
    'Uether'                                                                                                           // 1791
];                                                                                                                     // 1792
                                                                                                                       // 1793
module.exports = {                                                                                                     // 1794
    ETH_PADDING: 32,                                                                                                   // 1795
    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 1796
    ETH_UNITS: ETH_UNITS,                                                                                              // 1797
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 1798
    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 1799
    defaultBlock: 'latest',                                                                                            // 1800
    defaultAccount: undefined                                                                                          // 1801
};                                                                                                                     // 1802
                                                                                                                       // 1803
                                                                                                                       // 1804
},{"bignumber.js":"bignumber.js"}],19:[function(require,module,exports){                                               // 1805
/*                                                                                                                     // 1806
    This file is part of web3.js.                                                                                      // 1807
                                                                                                                       // 1808
    web3.js is free software: you can redistribute it and/or modify                                                    // 1809
    it under the terms of the GNU Lesser General Public License as published by                                        // 1810
    the Free Software Foundation, either version 3 of the License, or                                                  // 1811
    (at your option) any later version.                                                                                // 1812
                                                                                                                       // 1813
    web3.js is distributed in the hope that it will be useful,                                                         // 1814
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1815
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1816
    GNU Lesser General Public License for more details.                                                                // 1817
                                                                                                                       // 1818
    You should have received a copy of the GNU Lesser General Public License                                           // 1819
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1820
*/                                                                                                                     // 1821
/**                                                                                                                    // 1822
 * @file sha3.js                                                                                                       // 1823
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1824
 * @date 2015                                                                                                          // 1825
 */                                                                                                                    // 1826
                                                                                                                       // 1827
var CryptoJS = require('crypto-js');                                                                                   // 1828
var sha3 = require('crypto-js/sha3');                                                                                  // 1829
                                                                                                                       // 1830
module.exports = function (value, options) {                                                                           // 1831
    if (options && options.encoding === 'hex') {                                                                       // 1832
        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 1833
            value = value.substr(2);                                                                                   // 1834
        }                                                                                                              // 1835
        value = CryptoJS.enc.Hex.parse(value);                                                                         // 1836
    }                                                                                                                  // 1837
                                                                                                                       // 1838
    return sha3(value, {                                                                                               // 1839
        outputLength: 256                                                                                              // 1840
    }).toString();                                                                                                     // 1841
};                                                                                                                     // 1842
                                                                                                                       // 1843
                                                                                                                       // 1844
},{"crypto-js":59,"crypto-js/sha3":80}],20:[function(require,module,exports){                                          // 1845
/*                                                                                                                     // 1846
    This file is part of web3.js.                                                                                      // 1847
                                                                                                                       // 1848
    web3.js is free software: you can redistribute it and/or modify                                                    // 1849
    it under the terms of the GNU Lesser General Public License as published by                                        // 1850
    the Free Software Foundation, either version 3 of the License, or                                                  // 1851
    (at your option) any later version.                                                                                // 1852
                                                                                                                       // 1853
    web3.js is distributed in the hope that it will be useful,                                                         // 1854
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1855
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1856
    GNU Lesser General Public License for more details.                                                                // 1857
                                                                                                                       // 1858
    You should have received a copy of the GNU Lesser General Public License                                           // 1859
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1860
*/                                                                                                                     // 1861
/**                                                                                                                    // 1862
 * @file utils.js                                                                                                      // 1863
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1864
 * @date 2015                                                                                                          // 1865
 */                                                                                                                    // 1866
                                                                                                                       // 1867
/**                                                                                                                    // 1868
 * Utils                                                                                                               // 1869
 *                                                                                                                     // 1870
 * @module utils                                                                                                       // 1871
 */                                                                                                                    // 1872
                                                                                                                       // 1873
/**                                                                                                                    // 1874
 * Utility functions                                                                                                   // 1875
 *                                                                                                                     // 1876
 * @class [utils] utils                                                                                                // 1877
 * @constructor                                                                                                        // 1878
 */                                                                                                                    // 1879
                                                                                                                       // 1880
                                                                                                                       // 1881
var BigNumber = require('bignumber.js');                                                                               // 1882
var sha3 = require('./sha3.js');                                                                                       // 1883
var utf8 = require('utf8');                                                                                            // 1884
                                                                                                                       // 1885
var unitMap = {                                                                                                        // 1886
    'noether':      '0',                                                                                               // 1887
    'wei':          '1',                                                                                               // 1888
    'kwei':         '1000',                                                                                            // 1889
    'Kwei':         '1000',                                                                                            // 1890
    'babbage':      '1000',                                                                                            // 1891
    'femtoether':   '1000',                                                                                            // 1892
    'mwei':         '1000000',                                                                                         // 1893
    'Mwei':         '1000000',                                                                                         // 1894
    'lovelace':     '1000000',                                                                                         // 1895
    'picoether':    '1000000',                                                                                         // 1896
    'gwei':         '1000000000',                                                                                      // 1897
    'Gwei':         '1000000000',                                                                                      // 1898
    'shannon':      '1000000000',                                                                                      // 1899
    'nanoether':    '1000000000',                                                                                      // 1900
    'nano':         '1000000000',                                                                                      // 1901
    'szabo':        '1000000000000',                                                                                   // 1902
    'microether':   '1000000000000',                                                                                   // 1903
    'micro':        '1000000000000',                                                                                   // 1904
    'finney':       '1000000000000000',                                                                                // 1905
    'milliether':    '1000000000000000',                                                                               // 1906
    'milli':         '1000000000000000',                                                                               // 1907
    'ether':        '1000000000000000000',                                                                             // 1908
    'kether':       '1000000000000000000000',                                                                          // 1909
    'grand':        '1000000000000000000000',                                                                          // 1910
    'mether':       '1000000000000000000000000',                                                                       // 1911
    'gether':       '1000000000000000000000000000',                                                                    // 1912
    'tether':       '1000000000000000000000000000000'                                                                  // 1913
};                                                                                                                     // 1914
                                                                                                                       // 1915
/**                                                                                                                    // 1916
 * Should be called to pad string to expected length                                                                   // 1917
 *                                                                                                                     // 1918
 * @method padLeft                                                                                                     // 1919
 * @param {String} string to be padded                                                                                 // 1920
 * @param {Number} characters that result string should have                                                           // 1921
 * @param {String} sign, by default 0                                                                                  // 1922
 * @returns {String} right aligned string                                                                              // 1923
 */                                                                                                                    // 1924
var padLeft = function (string, chars, sign) {                                                                         // 1925
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                      // 1926
};                                                                                                                     // 1927
                                                                                                                       // 1928
/**                                                                                                                    // 1929
 * Should be called to pad string to expected length                                                                   // 1930
 *                                                                                                                     // 1931
 * @method padRight                                                                                                    // 1932
 * @param {String} string to be padded                                                                                 // 1933
 * @param {Number} characters that result string should have                                                           // 1934
 * @param {String} sign, by default 0                                                                                  // 1935
 * @returns {String} right aligned string                                                                              // 1936
 */                                                                                                                    // 1937
var padRight = function (string, chars, sign) {                                                                        // 1938
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));                                    // 1939
};                                                                                                                     // 1940
                                                                                                                       // 1941
/**                                                                                                                    // 1942
 * Should be called to get utf8 from it's hex representation                                                           // 1943
 *                                                                                                                     // 1944
 * @method toUtf8                                                                                                      // 1945
 * @param {String} string in hex                                                                                       // 1946
 * @returns {String} ascii string representation of hex value                                                          // 1947
 */                                                                                                                    // 1948
var toUtf8 = function(hex) {                                                                                           // 1949
// Find termination                                                                                                    // 1950
    var str = "";                                                                                                      // 1951
    var i = 0, l = hex.length;                                                                                         // 1952
    if (hex.substring(0, 2) === '0x') {                                                                                // 1953
        i = 2;                                                                                                         // 1954
    }                                                                                                                  // 1955
    for (; i < l; i+=2) {                                                                                              // 1956
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1957
        if (code === 0)                                                                                                // 1958
            break;                                                                                                     // 1959
        str += String.fromCharCode(code);                                                                              // 1960
    }                                                                                                                  // 1961
                                                                                                                       // 1962
    return utf8.decode(str);                                                                                           // 1963
};                                                                                                                     // 1964
                                                                                                                       // 1965
/**                                                                                                                    // 1966
 * Should be called to get ascii from it's hex representation                                                          // 1967
 *                                                                                                                     // 1968
 * @method toAscii                                                                                                     // 1969
 * @param {String} string in hex                                                                                       // 1970
 * @returns {String} ascii string representation of hex value                                                          // 1971
 */                                                                                                                    // 1972
var toAscii = function(hex) {                                                                                          // 1973
// Find termination                                                                                                    // 1974
    var str = "";                                                                                                      // 1975
    var i = 0, l = hex.length;                                                                                         // 1976
    if (hex.substring(0, 2) === '0x') {                                                                                // 1977
        i = 2;                                                                                                         // 1978
    }                                                                                                                  // 1979
    for (; i < l; i+=2) {                                                                                              // 1980
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1981
        str += String.fromCharCode(code);                                                                              // 1982
    }                                                                                                                  // 1983
                                                                                                                       // 1984
    return str;                                                                                                        // 1985
};                                                                                                                     // 1986
                                                                                                                       // 1987
/**                                                                                                                    // 1988
 * Should be called to get hex representation (prefixed by 0x) of utf8 string                                          // 1989
 *                                                                                                                     // 1990
 * @method fromUtf8                                                                                                    // 1991
 * @param {String} string                                                                                              // 1992
 * @param {Number} optional padding                                                                                    // 1993
 * @returns {String} hex representation of input string                                                                // 1994
 */                                                                                                                    // 1995
var fromUtf8 = function(str) {                                                                                         // 1996
    str = utf8.encode(str);                                                                                            // 1997
    var hex = "";                                                                                                      // 1998
    for(var i = 0; i < str.length; i++) {                                                                              // 1999
        var code = str.charCodeAt(i);                                                                                  // 2000
        if (code === 0)                                                                                                // 2001
            break;                                                                                                     // 2002
        var n = code.toString(16);                                                                                     // 2003
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2004
    }                                                                                                                  // 2005
                                                                                                                       // 2006
    return "0x" + hex;                                                                                                 // 2007
};                                                                                                                     // 2008
                                                                                                                       // 2009
/**                                                                                                                    // 2010
 * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 2011
 *                                                                                                                     // 2012
 * @method fromAscii                                                                                                   // 2013
 * @param {String} string                                                                                              // 2014
 * @param {Number} optional padding                                                                                    // 2015
 * @returns {String} hex representation of input string                                                                // 2016
 */                                                                                                                    // 2017
var fromAscii = function(str) {                                                                                        // 2018
    var hex = "";                                                                                                      // 2019
    for(var i = 0; i < str.length; i++) {                                                                              // 2020
        var code = str.charCodeAt(i);                                                                                  // 2021
        var n = code.toString(16);                                                                                     // 2022
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2023
    }                                                                                                                  // 2024
                                                                                                                       // 2025
    return "0x" + hex;                                                                                                 // 2026
};                                                                                                                     // 2027
                                                                                                                       // 2028
/**                                                                                                                    // 2029
 * Should be used to create full function/event name from json abi                                                     // 2030
 *                                                                                                                     // 2031
 * @method transformToFullName                                                                                         // 2032
 * @param {Object} json-abi                                                                                            // 2033
 * @return {String} full fnction/event name                                                                            // 2034
 */                                                                                                                    // 2035
var transformToFullName = function (json) {                                                                            // 2036
    if (json.name.indexOf('(') !== -1) {                                                                               // 2037
        return json.name;                                                                                              // 2038
    }                                                                                                                  // 2039
                                                                                                                       // 2040
    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 2041
    return json.name + '(' + typeName + ')';                                                                           // 2042
};                                                                                                                     // 2043
                                                                                                                       // 2044
/**                                                                                                                    // 2045
 * Should be called to get display name of contract function                                                           // 2046
 *                                                                                                                     // 2047
 * @method extractDisplayName                                                                                          // 2048
 * @param {String} name of function/event                                                                              // 2049
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 2050
 */                                                                                                                    // 2051
var extractDisplayName = function (name) {                                                                             // 2052
    var length = name.indexOf('(');                                                                                    // 2053
    return length !== -1 ? name.substr(0, length) : name;                                                              // 2054
};                                                                                                                     // 2055
                                                                                                                       // 2056
/// @returns overloaded part of function/event name                                                                    // 2057
var extractTypeName = function (name) {                                                                                // 2058
    /// TODO: make it invulnerable                                                                                     // 2059
    var length = name.indexOf('(');                                                                                    // 2060
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";              // 2061
};                                                                                                                     // 2062
                                                                                                                       // 2063
/**                                                                                                                    // 2064
 * Converts value to it's decimal representation in string                                                             // 2065
 *                                                                                                                     // 2066
 * @method toDecimal                                                                                                   // 2067
 * @param {String|Number|BigNumber}                                                                                    // 2068
 * @return {String}                                                                                                    // 2069
 */                                                                                                                    // 2070
var toDecimal = function (value) {                                                                                     // 2071
    return toBigNumber(value).toNumber();                                                                              // 2072
};                                                                                                                     // 2073
                                                                                                                       // 2074
/**                                                                                                                    // 2075
 * Converts value to it's hex representation                                                                           // 2076
 *                                                                                                                     // 2077
 * @method fromDecimal                                                                                                 // 2078
 * @param {String|Number|BigNumber}                                                                                    // 2079
 * @return {String}                                                                                                    // 2080
 */                                                                                                                    // 2081
var fromDecimal = function (value) {                                                                                   // 2082
    var number = toBigNumber(value);                                                                                   // 2083
    var result = number.toString(16);                                                                                  // 2084
                                                                                                                       // 2085
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 2086
};                                                                                                                     // 2087
                                                                                                                       // 2088
/**                                                                                                                    // 2089
 * Auto converts any given value into it's hex representation.                                                         // 2090
 *                                                                                                                     // 2091
 * And even stringifys objects before.                                                                                 // 2092
 *                                                                                                                     // 2093
 * @method toHex                                                                                                       // 2094
 * @param {String|Number|BigNumber|Object}                                                                             // 2095
 * @return {String}                                                                                                    // 2096
 */                                                                                                                    // 2097
var toHex = function (val) {                                                                                           // 2098
    /*jshint maxcomplexity: 8 */                                                                                       // 2099
                                                                                                                       // 2100
    if (isBoolean(val))                                                                                                // 2101
        return fromDecimal(+val);                                                                                      // 2102
                                                                                                                       // 2103
    if (isBigNumber(val))                                                                                              // 2104
        return fromDecimal(val);                                                                                       // 2105
                                                                                                                       // 2106
    if (isObject(val))                                                                                                 // 2107
        return fromUtf8(JSON.stringify(val));                                                                          // 2108
                                                                                                                       // 2109
    // if its a negative number, pass it through fromDecimal                                                           // 2110
    if (isString(val)) {                                                                                               // 2111
        if (val.indexOf('-0x') === 0)                                                                                  // 2112
            return fromDecimal(val);                                                                                   // 2113
        else if(val.indexOf('0x') === 0)                                                                               // 2114
            return val;                                                                                                // 2115
        else if (!isFinite(val))                                                                                       // 2116
            return fromAscii(val);                                                                                     // 2117
    }                                                                                                                  // 2118
                                                                                                                       // 2119
    return fromDecimal(val);                                                                                           // 2120
};                                                                                                                     // 2121
                                                                                                                       // 2122
/**                                                                                                                    // 2123
 * Returns value of unit in Wei                                                                                        // 2124
 *                                                                                                                     // 2125
 * @method getValueOfUnit                                                                                              // 2126
 * @param {String} unit the unit to convert to, default ether                                                          // 2127
 * @returns {BigNumber} value of the unit (in Wei)                                                                     // 2128
 * @throws error if the unit is not correct:w                                                                          // 2129
 */                                                                                                                    // 2130
var getValueOfUnit = function (unit) {                                                                                 // 2131
    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 2132
    var unitValue = unitMap[unit];                                                                                     // 2133
    if (unitValue === undefined) {                                                                                     // 2134
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                  // 2136
    return new BigNumber(unitValue, 10);                                                                               // 2137
};                                                                                                                     // 2138
                                                                                                                       // 2139
/**                                                                                                                    // 2140
 * Takes a number of wei and converts it to any other ether unit.                                                      // 2141
 *                                                                                                                     // 2142
 * Possible units are:                                                                                                 // 2143
 *   SI Short   SI Full        Effigy       Other                                                                      // 2144
 * - kwei       femtoether     babbage                                                                                 // 2145
 * - mwei       picoether      lovelace                                                                                // 2146
 * - gwei       nanoether      shannon      nano                                                                       // 2147
 * - --         microether     szabo        micro                                                                      // 2148
 * - --         milliether     finney       milli                                                                      // 2149
 * - ether      --             --                                                                                      // 2150
 * - kether                    --           grand                                                                      // 2151
 * - mether                                                                                                            // 2152
 * - gether                                                                                                            // 2153
 * - tether                                                                                                            // 2154
 *                                                                                                                     // 2155
 * @method fromWei                                                                                                     // 2156
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 2157
 * @param {String} unit the unit to convert to, default ether                                                          // 2158
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2159
*/                                                                                                                     // 2160
var fromWei = function(number, unit) {                                                                                 // 2161
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 2162
                                                                                                                       // 2163
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2164
};                                                                                                                     // 2165
                                                                                                                       // 2166
/**                                                                                                                    // 2167
 * Takes a number of a unit and converts it to wei.                                                                    // 2168
 *                                                                                                                     // 2169
 * Possible units are:                                                                                                 // 2170
 *   SI Short   SI Full        Effigy       Other                                                                      // 2171
 * - kwei       femtoether     babbage                                                                                 // 2172
 * - mwei       picoether      lovelace                                                                                // 2173
 * - gwei       nanoether      shannon      nano                                                                       // 2174
 * - --         microether     szabo        micro                                                                      // 2175
 * - --         microether     szabo        micro                                                                      // 2176
 * - --         milliether     finney       milli                                                                      // 2177
 * - ether      --             --                                                                                      // 2178
 * - kether                    --           grand                                                                      // 2179
 * - mether                                                                                                            // 2180
 * - gether                                                                                                            // 2181
 * - tether                                                                                                            // 2182
 *                                                                                                                     // 2183
 * @method toWei                                                                                                       // 2184
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 2185
 * @param {String} unit the unit to convert from, default ether                                                        // 2186
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2187
*/                                                                                                                     // 2188
var toWei = function(number, unit) {                                                                                   // 2189
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 2190
                                                                                                                       // 2191
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2192
};                                                                                                                     // 2193
                                                                                                                       // 2194
/**                                                                                                                    // 2195
 * Takes an input and transforms it into an bignumber                                                                  // 2196
 *                                                                                                                     // 2197
 * @method toBigNumber                                                                                                 // 2198
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 2199
 * @return {BigNumber} BigNumber                                                                                       // 2200
*/                                                                                                                     // 2201
var toBigNumber = function(number) {                                                                                   // 2202
    /*jshint maxcomplexity:5 */                                                                                        // 2203
    number = number || 0;                                                                                              // 2204
    if (isBigNumber(number))                                                                                           // 2205
        return number;                                                                                                 // 2206
                                                                                                                       // 2207
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 2208
        return new BigNumber(number.replace('0x',''), 16);                                                             // 2209
    }                                                                                                                  // 2210
                                                                                                                       // 2211
    return new BigNumber(number.toString(10), 10);                                                                     // 2212
};                                                                                                                     // 2213
                                                                                                                       // 2214
/**                                                                                                                    // 2215
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 2216
 *                                                                                                                     // 2217
 * @method toTwosComplement                                                                                            // 2218
 * @param {Number|String|BigNumber}                                                                                    // 2219
 * @return {BigNumber}                                                                                                 // 2220
 */                                                                                                                    // 2221
var toTwosComplement = function (number) {                                                                             // 2222
    var bigNumber = toBigNumber(number).round();                                                                       // 2223
    if (bigNumber.lessThan(0)) {                                                                                       // 2224
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                  // 2226
    return bigNumber;                                                                                                  // 2227
};                                                                                                                     // 2228
                                                                                                                       // 2229
/**                                                                                                                    // 2230
 * Checks if the given string is strictly an address                                                                   // 2231
 *                                                                                                                     // 2232
 * @method isStrictAddress                                                                                             // 2233
 * @param {String} address the given HEX adress                                                                        // 2234
 * @return {Boolean}                                                                                                   // 2235
*/                                                                                                                     // 2236
var isStrictAddress = function (address) {                                                                             // 2237
    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 2238
};                                                                                                                     // 2239
                                                                                                                       // 2240
/**                                                                                                                    // 2241
 * Checks if the given string is an address                                                                            // 2242
 *                                                                                                                     // 2243
 * @method isAddress                                                                                                   // 2244
 * @param {String} address the given HEX adress                                                                        // 2245
 * @return {Boolean}                                                                                                   // 2246
*/                                                                                                                     // 2247
var isAddress = function (address) {                                                                                   // 2248
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {                                                                       // 2249
        // check if it has the basic requirements of an address                                                        // 2250
        return false;                                                                                                  // 2251
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {                           // 2252
        // If it's all small caps or all all caps, return true                                                         // 2253
        return true;                                                                                                   // 2254
    } else {                                                                                                           // 2255
        // Otherwise check each case                                                                                   // 2256
        return isChecksumAddress(address);                                                                             // 2257
    }                                                                                                                  // 2258
};                                                                                                                     // 2259
                                                                                                                       // 2260
                                                                                                                       // 2261
                                                                                                                       // 2262
/**                                                                                                                    // 2263
 * Checks if the given string is a checksummed address                                                                 // 2264
 *                                                                                                                     // 2265
 * @method isChecksumAddress                                                                                           // 2266
 * @param {String} address the given HEX adress                                                                        // 2267
 * @return {Boolean}                                                                                                   // 2268
*/                                                                                                                     // 2269
var isChecksumAddress = function (address) {                                                                           // 2270
    // Check each case                                                                                                 // 2271
    address = address.replace('0x','');                                                                                // 2272
    var addressHash = sha3(address.toLowerCase());                                                                     // 2273
                                                                                                                       // 2274
    for (var i = 0; i < 40; i++ ) {                                                                                    // 2275
        // the nth letter should be uppercase if the nth digit of casemap is 1                                         // 2276
        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;                                                                                              // 2278
        }                                                                                                              // 2279
    }                                                                                                                  // 2280
    return true;                                                                                                       // 2281
};                                                                                                                     // 2282
                                                                                                                       // 2283
                                                                                                                       // 2284
                                                                                                                       // 2285
/**                                                                                                                    // 2286
 * Makes a checksum address                                                                                            // 2287
 *                                                                                                                     // 2288
 * @method toChecksumAddress                                                                                           // 2289
 * @param {String} address the given HEX adress                                                                        // 2290
 * @return {String}                                                                                                    // 2291
*/                                                                                                                     // 2292
var toChecksumAddress = function (address) {                                                                           // 2293
    if (typeof address === 'undefined') return '';                                                                     // 2294
                                                                                                                       // 2295
    address = address.toLowerCase().replace('0x','');                                                                  // 2296
    var addressHash = sha3(address);                                                                                   // 2297
    var checksumAddress = '0x';                                                                                        // 2298
                                                                                                                       // 2299
    for (var i = 0; i < address.length; i++ ) {                                                                        // 2300
        // If ith character is 9 to f then make it uppercase                                                           // 2301
        if (parseInt(addressHash[i], 16) > 7) {                                                                        // 2302
          checksumAddress += address[i].toUpperCase();                                                                 // 2303
        } else {                                                                                                       // 2304
            checksumAddress += address[i];                                                                             // 2305
        }                                                                                                              // 2306
    }                                                                                                                  // 2307
    return checksumAddress;                                                                                            // 2308
};                                                                                                                     // 2309
                                                                                                                       // 2310
/**                                                                                                                    // 2311
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 2312
 *                                                                                                                     // 2313
 * @method toAddress                                                                                                   // 2314
 * @param {String} address                                                                                             // 2315
 * @return {String} formatted address                                                                                  // 2316
 */                                                                                                                    // 2317
var toAddress = function (address) {                                                                                   // 2318
    if (isStrictAddress(address)) {                                                                                    // 2319
        return address;                                                                                                // 2320
    }                                                                                                                  // 2321
                                                                                                                       // 2322
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 2323
        return '0x' + address;                                                                                         // 2324
    }                                                                                                                  // 2325
                                                                                                                       // 2326
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 2327
};                                                                                                                     // 2328
                                                                                                                       // 2329
/**                                                                                                                    // 2330
 * Returns true if object is BigNumber, otherwise false                                                                // 2331
 *                                                                                                                     // 2332
 * @method isBigNumber                                                                                                 // 2333
 * @param {Object}                                                                                                     // 2334
 * @return {Boolean}                                                                                                   // 2335
 */                                                                                                                    // 2336
var isBigNumber = function (object) {                                                                                  // 2337
    return object instanceof BigNumber ||                                                                              // 2338
        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 2339
};                                                                                                                     // 2340
                                                                                                                       // 2341
/**                                                                                                                    // 2342
 * Returns true if object is string, otherwise false                                                                   // 2343
 *                                                                                                                     // 2344
 * @method isString                                                                                                    // 2345
 * @param {Object}                                                                                                     // 2346
 * @return {Boolean}                                                                                                   // 2347
 */                                                                                                                    // 2348
var isString = function (object) {                                                                                     // 2349
    return typeof object === 'string' ||                                                                               // 2350
        (object && object.constructor && object.constructor.name === 'String');                                        // 2351
};                                                                                                                     // 2352
                                                                                                                       // 2353
/**                                                                                                                    // 2354
 * Returns true if object is function, otherwise false                                                                 // 2355
 *                                                                                                                     // 2356
 * @method isFunction                                                                                                  // 2357
 * @param {Object}                                                                                                     // 2358
 * @return {Boolean}                                                                                                   // 2359
 */                                                                                                                    // 2360
var isFunction = function (object) {                                                                                   // 2361
    return typeof object === 'function';                                                                               // 2362
};                                                                                                                     // 2363
                                                                                                                       // 2364
/**                                                                                                                    // 2365
 * Returns true if object is Objet, otherwise false                                                                    // 2366
 *                                                                                                                     // 2367
 * @method isObject                                                                                                    // 2368
 * @param {Object}                                                                                                     // 2369
 * @return {Boolean}                                                                                                   // 2370
 */                                                                                                                    // 2371
var isObject = function (object) {                                                                                     // 2372
    return typeof object === 'object';                                                                                 // 2373
};                                                                                                                     // 2374
                                                                                                                       // 2375
/**                                                                                                                    // 2376
 * Returns true if object is boolean, otherwise false                                                                  // 2377
 *                                                                                                                     // 2378
 * @method isBoolean                                                                                                   // 2379
 * @param {Object}                                                                                                     // 2380
 * @return {Boolean}                                                                                                   // 2381
 */                                                                                                                    // 2382
var isBoolean = function (object) {                                                                                    // 2383
    return typeof object === 'boolean';                                                                                // 2384
};                                                                                                                     // 2385
                                                                                                                       // 2386
/**                                                                                                                    // 2387
 * Returns true if object is array, otherwise false                                                                    // 2388
 *                                                                                                                     // 2389
 * @method isArray                                                                                                     // 2390
 * @param {Object}                                                                                                     // 2391
 * @return {Boolean}                                                                                                   // 2392
 */                                                                                                                    // 2393
var isArray = function (object) {                                                                                      // 2394
    return object instanceof Array;                                                                                    // 2395
};                                                                                                                     // 2396
                                                                                                                       // 2397
/**                                                                                                                    // 2398
 * Returns true if given string is valid json object                                                                   // 2399
 *                                                                                                                     // 2400
 * @method isJson                                                                                                      // 2401
 * @param {String}                                                                                                     // 2402
 * @return {Boolean}                                                                                                   // 2403
 */                                                                                                                    // 2404
var isJson = function (str) {                                                                                          // 2405
    try {                                                                                                              // 2406
        return !!JSON.parse(str);                                                                                      // 2407
    } catch (e) {                                                                                                      // 2408
        return false;                                                                                                  // 2409
    }                                                                                                                  // 2410
};                                                                                                                     // 2411
                                                                                                                       // 2412
module.exports = {                                                                                                     // 2413
    padLeft: padLeft,                                                                                                  // 2414
    padRight: padRight,                                                                                                // 2415
    toHex: toHex,                                                                                                      // 2416
    toDecimal: toDecimal,                                                                                              // 2417
    fromDecimal: fromDecimal,                                                                                          // 2418
    toUtf8: toUtf8,                                                                                                    // 2419
    toAscii: toAscii,                                                                                                  // 2420
    fromUtf8: fromUtf8,                                                                                                // 2421
    fromAscii: fromAscii,                                                                                              // 2422
    transformToFullName: transformToFullName,                                                                          // 2423
    extractDisplayName: extractDisplayName,                                                                            // 2424
    extractTypeName: extractTypeName,                                                                                  // 2425
    toWei: toWei,                                                                                                      // 2426
    fromWei: fromWei,                                                                                                  // 2427
    toBigNumber: toBigNumber,                                                                                          // 2428
    toTwosComplement: toTwosComplement,                                                                                // 2429
    toAddress: toAddress,                                                                                              // 2430
    isBigNumber: isBigNumber,                                                                                          // 2431
    isStrictAddress: isStrictAddress,                                                                                  // 2432
    isAddress: isAddress,                                                                                              // 2433
    isChecksumAddress: isChecksumAddress,                                                                              // 2434
    toChecksumAddress: toChecksumAddress,                                                                              // 2435
    isFunction: isFunction,                                                                                            // 2436
    isString: isString,                                                                                                // 2437
    isObject: isObject,                                                                                                // 2438
    isBoolean: isBoolean,                                                                                              // 2439
    isArray: isArray,                                                                                                  // 2440
    isJson: isJson                                                                                                     // 2441
};                                                                                                                     // 2442
                                                                                                                       // 2443
},{"./sha3.js":19,"bignumber.js":"bignumber.js","utf8":85}],21:[function(require,module,exports){                      // 2444
module.exports={                                                                                                       // 2445
    "version": "0.18.2"                                                                                                // 2446
}                                                                                                                      // 2447
                                                                                                                       // 2448
},{}],22:[function(require,module,exports){                                                                            // 2449
/*                                                                                                                     // 2450
    This file is part of web3.js.                                                                                      // 2451
                                                                                                                       // 2452
    web3.js is free software: you can redistribute it and/or modify                                                    // 2453
    it under the terms of the GNU Lesser General Public License as published by                                        // 2454
    the Free Software Foundation, either version 3 of the License, or                                                  // 2455
    (at your option) any later version.                                                                                // 2456
                                                                                                                       // 2457
    web3.js is distributed in the hope that it will be useful,                                                         // 2458
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2459
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2460
    GNU Lesser General Public License for more details.                                                                // 2461
                                                                                                                       // 2462
    You should have received a copy of the GNU Lesser General Public License                                           // 2463
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2464
*/                                                                                                                     // 2465
/**                                                                                                                    // 2466
 * @file web3.js                                                                                                       // 2467
 * @authors:                                                                                                           // 2468
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 2469
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 2470
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 2471
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 2472
 *   Gav Wood <g@ethdev.com>                                                                                           // 2473
 * @date 2014                                                                                                          // 2474
 */                                                                                                                    // 2475
                                                                                                                       // 2476
var RequestManager = require('./web3/requestmanager');                                                                 // 2477
var Iban = require('./web3/iban');                                                                                     // 2478
var Eth = require('./web3/methods/eth');                                                                               // 2479
var DB = require('./web3/methods/db');                                                                                 // 2480
var Shh = require('./web3/methods/shh');                                                                               // 2481
var Net = require('./web3/methods/net');                                                                               // 2482
var Personal = require('./web3/methods/personal');                                                                     // 2483
var Swarm = require('./web3/methods/swarm');                                                                           // 2484
var Settings = require('./web3/settings');                                                                             // 2485
var version = require('./version.json');                                                                               // 2486
var utils = require('./utils/utils');                                                                                  // 2487
var sha3 = require('./utils/sha3');                                                                                    // 2488
var extend = require('./web3/extend');                                                                                 // 2489
var Batch = require('./web3/batch');                                                                                   // 2490
var Property = require('./web3/property');                                                                             // 2491
var HttpProvider = require('./web3/httpprovider');                                                                     // 2492
var IpcProvider = require('./web3/ipcprovider');                                                                       // 2493
var BigNumber = require('bignumber.js');                                                                               // 2494
                                                                                                                       // 2495
                                                                                                                       // 2496
                                                                                                                       // 2497
function Web3 (provider) {                                                                                             // 2498
    this._requestManager = new RequestManager(provider);                                                               // 2499
    this.currentProvider = provider;                                                                                   // 2500
    this.eth = new Eth(this);                                                                                          // 2501
    this.db = new DB(this);                                                                                            // 2502
    this.shh = new Shh(this);                                                                                          // 2503
    this.net = new Net(this);                                                                                          // 2504
    this.personal = new Personal(this);                                                                                // 2505
    this.bzz = new Swarm(this);                                                                                        // 2506
    this.settings = new Settings();                                                                                    // 2507
    this.version = {                                                                                                   // 2508
        api: version.version                                                                                           // 2509
    };                                                                                                                 // 2510
    this.providers = {                                                                                                 // 2511
        HttpProvider: HttpProvider,                                                                                    // 2512
        IpcProvider: IpcProvider                                                                                       // 2513
    };                                                                                                                 // 2514
    this._extend = extend(this);                                                                                       // 2515
    this._extend({                                                                                                     // 2516
        properties: properties()                                                                                       // 2517
    });                                                                                                                // 2518
}                                                                                                                      // 2519
                                                                                                                       // 2520
// expose providers on the class                                                                                       // 2521
Web3.providers = {                                                                                                     // 2522
    HttpProvider: HttpProvider,                                                                                        // 2523
    IpcProvider: IpcProvider                                                                                           // 2524
};                                                                                                                     // 2525
                                                                                                                       // 2526
Web3.prototype.setProvider = function (provider) {                                                                     // 2527
    this._requestManager.setProvider(provider);                                                                        // 2528
    this.currentProvider = provider;                                                                                   // 2529
};                                                                                                                     // 2530
                                                                                                                       // 2531
Web3.prototype.reset = function (keepIsSyncing) {                                                                      // 2532
    this._requestManager.reset(keepIsSyncing);                                                                         // 2533
    this.settings = new Settings();                                                                                    // 2534
};                                                                                                                     // 2535
                                                                                                                       // 2536
Web3.prototype.BigNumber = BigNumber;                                                                                  // 2537
Web3.prototype.toHex = utils.toHex;                                                                                    // 2538
Web3.prototype.toAscii = utils.toAscii;                                                                                // 2539
Web3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 2540
Web3.prototype.fromAscii = utils.fromAscii;                                                                            // 2541
Web3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 2542
Web3.prototype.toDecimal = utils.toDecimal;                                                                            // 2543
Web3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 2544
Web3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 2545
Web3.prototype.toWei = utils.toWei;                                                                                    // 2546
Web3.prototype.fromWei = utils.fromWei;                                                                                // 2547
Web3.prototype.isAddress = utils.isAddress;                                                                            // 2548
Web3.prototype.isChecksumAddress = utils.isChecksumAddress;                                                            // 2549
Web3.prototype.toChecksumAddress = utils.toChecksumAddress;                                                            // 2550
Web3.prototype.isIBAN = utils.isIBAN;                                                                                  // 2551
                                                                                                                       // 2552
                                                                                                                       // 2553
Web3.prototype.sha3 = function(string, options) {                                                                      // 2554
    return '0x' + sha3(string, options);                                                                               // 2555
};                                                                                                                     // 2556
                                                                                                                       // 2557
/**                                                                                                                    // 2558
 * Transforms direct icap to address                                                                                   // 2559
 */                                                                                                                    // 2560
Web3.prototype.fromICAP = function (icap) {                                                                            // 2561
    var iban = new Iban(icap);                                                                                         // 2562
    return iban.address();                                                                                             // 2563
};                                                                                                                     // 2564
                                                                                                                       // 2565
var properties = function () {                                                                                         // 2566
    return [                                                                                                           // 2567
        new Property({                                                                                                 // 2568
            name: 'version.node',                                                                                      // 2569
            getter: 'web3_clientVersion'                                                                               // 2570
        }),                                                                                                            // 2571
        new Property({                                                                                                 // 2572
            name: 'version.network',                                                                                   // 2573
            getter: 'net_version',                                                                                     // 2574
            inputFormatter: utils.toDecimal                                                                            // 2575
        }),                                                                                                            // 2576
        new Property({                                                                                                 // 2577
            name: 'version.ethereum',                                                                                  // 2578
            getter: 'eth_protocolVersion',                                                                             // 2579
            inputFormatter: utils.toDecimal                                                                            // 2580
        }),                                                                                                            // 2581
        new Property({                                                                                                 // 2582
            name: 'version.whisper',                                                                                   // 2583
            getter: 'shh_version',                                                                                     // 2584
            inputFormatter: utils.toDecimal                                                                            // 2585
        })                                                                                                             // 2586
    ];                                                                                                                 // 2587
};                                                                                                                     // 2588
                                                                                                                       // 2589
Web3.prototype.isConnected = function(){                                                                               // 2590
    return (this.currentProvider && this.currentProvider.isConnected());                                               // 2591
};                                                                                                                     // 2592
                                                                                                                       // 2593
Web3.prototype.createBatch = function () {                                                                             // 2594
    return new Batch(this);                                                                                            // 2595
};                                                                                                                     // 2596
                                                                                                                       // 2597
module.exports = Web3;                                                                                                 // 2598
                                                                                                                       // 2599
                                                                                                                       // 2600
},{"./utils/sha3":19,"./utils/utils":20,"./version.json":21,"./web3/batch":24,"./web3/extend":28,"./web3/httpprovider":32,"./web3/iban":33,"./web3/ipcprovider":34,"./web3/methods/db":37,"./web3/methods/eth":38,"./web3/methods/net":39,"./web3/methods/personal":40,"./web3/methods/shh":41,"./web3/methods/swarm":42,"./web3/property":45,"./web3/requestmanager":46,"./web3/settings":47,"bignumber.js":"bignumber.js"}],23:[function(require,module,exports){
/*                                                                                                                     // 2602
    This file is part of web3.js.                                                                                      // 2603
                                                                                                                       // 2604
    web3.js is free software: you can redistribute it and/or modify                                                    // 2605
    it under the terms of the GNU Lesser General Public License as published by                                        // 2606
    the Free Software Foundation, either version 3 of the License, or                                                  // 2607
    (at your option) any later version.                                                                                // 2608
                                                                                                                       // 2609
    web3.js is distributed in the hope that it will be useful,                                                         // 2610
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2611
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2612
    GNU Lesser General Public License for more details.                                                                // 2613
                                                                                                                       // 2614
    You should have received a copy of the GNU Lesser General Public License                                           // 2615
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2616
*/                                                                                                                     // 2617
/**                                                                                                                    // 2618
 * @file allevents.js                                                                                                  // 2619
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2620
 * @date 2014                                                                                                          // 2621
 */                                                                                                                    // 2622
                                                                                                                       // 2623
var sha3 = require('../utils/sha3');                                                                                   // 2624
var SolidityEvent = require('./event');                                                                                // 2625
var formatters = require('./formatters');                                                                              // 2626
var utils = require('../utils/utils');                                                                                 // 2627
var Filter = require('./filter');                                                                                      // 2628
var watches = require('./methods/watches');                                                                            // 2629
                                                                                                                       // 2630
var AllSolidityEvents = function (requestManager, json, address) {                                                     // 2631
    this._requestManager = requestManager;                                                                             // 2632
    this._json = json;                                                                                                 // 2633
    this._address = address;                                                                                           // 2634
};                                                                                                                     // 2635
                                                                                                                       // 2636
AllSolidityEvents.prototype.encode = function (options) {                                                              // 2637
    options = options || {};                                                                                           // 2638
    var result = {};                                                                                                   // 2639
                                                                                                                       // 2640
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 2641
        return options[f] !== undefined;                                                                               // 2642
    }).forEach(function (f) {                                                                                          // 2643
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 2644
    });                                                                                                                // 2645
                                                                                                                       // 2646
    result.address = this._address;                                                                                    // 2647
                                                                                                                       // 2648
    return result;                                                                                                     // 2649
};                                                                                                                     // 2650
                                                                                                                       // 2651
AllSolidityEvents.prototype.decode = function (data) {                                                                 // 2652
    data.data = data.data || '';                                                                                       // 2653
    data.topics = data.topics || [];                                                                                   // 2654
                                                                                                                       // 2655
    var eventTopic = data.topics[0].slice(2);                                                                          // 2656
    var match = this._json.filter(function (j) {                                                                       // 2657
        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 2658
    })[0];                                                                                                             // 2659
                                                                                                                       // 2660
    if (!match) { // cannot find matching event?                                                                       // 2661
        console.warn('cannot find event for log');                                                                     // 2662
        return data;                                                                                                   // 2663
    }                                                                                                                  // 2664
                                                                                                                       // 2665
    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 2666
    return event.decode(data);                                                                                         // 2667
};                                                                                                                     // 2668
                                                                                                                       // 2669
AllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 2670
                                                                                                                       // 2671
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 2672
        callback = arguments[arguments.length - 1];                                                                    // 2673
        if(arguments.length === 1)                                                                                     // 2674
            options = null;                                                                                            // 2675
    }                                                                                                                  // 2676
                                                                                                                       // 2677
    var o = this.encode(options);                                                                                      // 2678
    var formatter = this.decode.bind(this);                                                                            // 2679
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 2680
};                                                                                                                     // 2681
                                                                                                                       // 2682
AllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 2683
    var execute = this.execute.bind(this);                                                                             // 2684
    contract.allEvents = execute;                                                                                      // 2685
};                                                                                                                     // 2686
                                                                                                                       // 2687
module.exports = AllSolidityEvents;                                                                                    // 2688
                                                                                                                       // 2689
                                                                                                                       // 2690
},{"../utils/sha3":19,"../utils/utils":20,"./event":27,"./filter":29,"./formatters":30,"./methods/watches":43}],24:[function(require,module,exports){
/*                                                                                                                     // 2692
    This file is part of web3.js.                                                                                      // 2693
                                                                                                                       // 2694
    web3.js is free software: you can redistribute it and/or modify                                                    // 2695
    it under the terms of the GNU Lesser General Public License as published by                                        // 2696
    the Free Software Foundation, either version 3 of the License, or                                                  // 2697
    (at your option) any later version.                                                                                // 2698
                                                                                                                       // 2699
    web3.js is distributed in the hope that it will be useful,                                                         // 2700
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2701
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2702
    GNU Lesser General Public License for more details.                                                                // 2703
                                                                                                                       // 2704
    You should have received a copy of the GNU Lesser General Public License                                           // 2705
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2706
*/                                                                                                                     // 2707
/**                                                                                                                    // 2708
 * @file batch.js                                                                                                      // 2709
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2710
 * @date 2015                                                                                                          // 2711
 */                                                                                                                    // 2712
                                                                                                                       // 2713
var Jsonrpc = require('./jsonrpc');                                                                                    // 2714
var errors = require('./errors');                                                                                      // 2715
                                                                                                                       // 2716
var Batch = function (web3) {                                                                                          // 2717
    this.requestManager = web3._requestManager;                                                                        // 2718
    this.requests = [];                                                                                                // 2719
};                                                                                                                     // 2720
                                                                                                                       // 2721
/**                                                                                                                    // 2722
 * Should be called to add create new request to batch request                                                         // 2723
 *                                                                                                                     // 2724
 * @method add                                                                                                         // 2725
 * @param {Object} jsonrpc requet object                                                                               // 2726
 */                                                                                                                    // 2727
Batch.prototype.add = function (request) {                                                                             // 2728
    this.requests.push(request);                                                                                       // 2729
};                                                                                                                     // 2730
                                                                                                                       // 2731
/**                                                                                                                    // 2732
 * Should be called to execute batch request                                                                           // 2733
 *                                                                                                                     // 2734
 * @method execute                                                                                                     // 2735
 */                                                                                                                    // 2736
Batch.prototype.execute = function () {                                                                                // 2737
    var requests = this.requests;                                                                                      // 2738
    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 2739
        results = results || [];                                                                                       // 2740
        requests.map(function (request, index) {                                                                       // 2741
            return results[index] || {};                                                                               // 2742
        }).forEach(function (result, index) {                                                                          // 2743
            if (requests[index].callback) {                                                                            // 2744
                                                                                                                       // 2745
                if (!Jsonrpc.isValidResponse(result)) {                                                                // 2746
                    return requests[index].callback(errors.InvalidResponse(result));                                   // 2747
                }                                                                                                      // 2748
                                                                                                                       // 2749
                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
            }                                                                                                          // 2751
        });                                                                                                            // 2752
    });                                                                                                                // 2753
};                                                                                                                     // 2754
                                                                                                                       // 2755
module.exports = Batch;                                                                                                // 2756
                                                                                                                       // 2757
                                                                                                                       // 2758
},{"./errors":26,"./jsonrpc":35}],25:[function(require,module,exports){                                                // 2759
/*                                                                                                                     // 2760
    This file is part of web3.js.                                                                                      // 2761
                                                                                                                       // 2762
    web3.js is free software: you can redistribute it and/or modify                                                    // 2763
    it under the terms of the GNU Lesser General Public License as published by                                        // 2764
    the Free Software Foundation, either version 3 of the License, or                                                  // 2765
    (at your option) any later version.                                                                                // 2766
                                                                                                                       // 2767
    web3.js is distributed in the hope that it will be useful,                                                         // 2768
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2769
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2770
    GNU Lesser General Public License for more details.                                                                // 2771
                                                                                                                       // 2772
    You should have received a copy of the GNU Lesser General Public License                                           // 2773
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2774
*/                                                                                                                     // 2775
/**                                                                                                                    // 2776
 * @file contract.js                                                                                                   // 2777
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2778
 * @date 2014                                                                                                          // 2779
 */                                                                                                                    // 2780
                                                                                                                       // 2781
var utils = require('../utils/utils');                                                                                 // 2782
var coder = require('../solidity/coder');                                                                              // 2783
var SolidityEvent = require('./event');                                                                                // 2784
var SolidityFunction = require('./function');                                                                          // 2785
var AllEvents = require('./allevents');                                                                                // 2786
                                                                                                                       // 2787
/**                                                                                                                    // 2788
 * Should be called to encode constructor params                                                                       // 2789
 *                                                                                                                     // 2790
 * @method encodeConstructorParams                                                                                     // 2791
 * @param {Array} abi                                                                                                  // 2792
 * @param {Array} constructor params                                                                                   // 2793
 */                                                                                                                    // 2794
var encodeConstructorParams = function (abi, params) {                                                                 // 2795
    return abi.filter(function (json) {                                                                                // 2796
        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 2797
    }).map(function (json) {                                                                                           // 2798
        return json.inputs.map(function (input) {                                                                      // 2799
            return input.type;                                                                                         // 2800
        });                                                                                                            // 2801
    }).map(function (types) {                                                                                          // 2802
        return coder.encodeParams(types, params);                                                                      // 2803
    })[0] || '';                                                                                                       // 2804
};                                                                                                                     // 2805
                                                                                                                       // 2806
/**                                                                                                                    // 2807
 * Should be called to add functions to contract object                                                                // 2808
 *                                                                                                                     // 2809
 * @method addFunctionsToContract                                                                                      // 2810
 * @param {Contract} contract                                                                                          // 2811
 * @param {Array} abi                                                                                                  // 2812
 */                                                                                                                    // 2813
var addFunctionsToContract = function (contract) {                                                                     // 2814
    contract.abi.filter(function (json) {                                                                              // 2815
        return json.type === 'function';                                                                               // 2816
    }).map(function (json) {                                                                                           // 2817
        return new SolidityFunction(contract._eth, json, contract.address);                                            // 2818
    }).forEach(function (f) {                                                                                          // 2819
        f.attachToContract(contract);                                                                                  // 2820
    });                                                                                                                // 2821
};                                                                                                                     // 2822
                                                                                                                       // 2823
/**                                                                                                                    // 2824
 * Should be called to add events to contract object                                                                   // 2825
 *                                                                                                                     // 2826
 * @method addEventsToContract                                                                                         // 2827
 * @param {Contract} contract                                                                                          // 2828
 * @param {Array} abi                                                                                                  // 2829
 */                                                                                                                    // 2830
var addEventsToContract = function (contract) {                                                                        // 2831
    var events = contract.abi.filter(function (json) {                                                                 // 2832
        return json.type === 'event';                                                                                  // 2833
    });                                                                                                                // 2834
                                                                                                                       // 2835
    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 2836
    All.attachToContract(contract);                                                                                    // 2837
                                                                                                                       // 2838
    events.map(function (json) {                                                                                       // 2839
        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 2840
    }).forEach(function (e) {                                                                                          // 2841
        e.attachToContract(contract);                                                                                  // 2842
    });                                                                                                                // 2843
};                                                                                                                     // 2844
                                                                                                                       // 2845
                                                                                                                       // 2846
/**                                                                                                                    // 2847
 * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 2848
 *                                                                                                                     // 2849
 * @method checkForContractAddress                                                                                     // 2850
 * @param {Object} contract                                                                                            // 2851
 * @param {Function} callback                                                                                          // 2852
 * @returns {Undefined}                                                                                                // 2853
 */                                                                                                                    // 2854
var checkForContractAddress = function(contract, callback){                                                            // 2855
    var count = 0,                                                                                                     // 2856
        callbackFired = false;                                                                                         // 2857
                                                                                                                       // 2858
    // wait for receipt                                                                                                // 2859
    var filter = contract._eth.filter('latest', function(e){                                                           // 2860
        if (!e && !callbackFired) {                                                                                    // 2861
            count++;                                                                                                   // 2862
                                                                                                                       // 2863
            // stop watching after 50 blocks (timeout)                                                                 // 2864
            if (count > 50) {                                                                                          // 2865
                                                                                                                       // 2866
                filter.stopWatching(function() {});                                                                    // 2867
                callbackFired = true;                                                                                  // 2868
                                                                                                                       // 2869
                if (callback)                                                                                          // 2870
                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));                    // 2871
                else                                                                                                   // 2872
                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');                        // 2873
                                                                                                                       // 2874
                                                                                                                       // 2875
            } else {                                                                                                   // 2876
                                                                                                                       // 2877
                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 2878
                    if(receipt && !callbackFired) {                                                                    // 2879
                                                                                                                       // 2880
                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 2881
                            /*jshint maxcomplexity: 6 */                                                               // 2882
                                                                                                                       // 2883
                            if(callbackFired || !code)                                                                 // 2884
                                return;                                                                                // 2885
                                                                                                                       // 2886
                            filter.stopWatching(function() {});                                                        // 2887
                            callbackFired = true;                                                                      // 2888
                                                                                                                       // 2889
                            if(code.length > 3) {                                                                      // 2890
                                                                                                                       // 2891
                                // console.log('Contract code deployed!');                                             // 2892
                                                                                                                       // 2893
                                contract.address = receipt.contractAddress;                                            // 2894
                                                                                                                       // 2895
                                // attach events and methods again after we have                                       // 2896
                                addFunctionsToContract(contract);                                                      // 2897
                                addEventsToContract(contract);                                                         // 2898
                                                                                                                       // 2899
                                // call callback for the second time                                                   // 2900
                                if(callback)                                                                           // 2901
                                    callback(null, contract);                                                          // 2902
                                                                                                                       // 2903
                            } else {                                                                                   // 2904
                                if(callback)                                                                           // 2905
                                    callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                                else                                                                                   // 2907
                                    throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                            }                                                                                          // 2909
                        });                                                                                            // 2910
                    }                                                                                                  // 2911
                });                                                                                                    // 2912
            }                                                                                                          // 2913
        }                                                                                                              // 2914
    });                                                                                                                // 2915
};                                                                                                                     // 2916
                                                                                                                       // 2917
/**                                                                                                                    // 2918
 * Should be called to create new ContractFactory instance                                                             // 2919
 *                                                                                                                     // 2920
 * @method ContractFactory                                                                                             // 2921
 * @param {Array} abi                                                                                                  // 2922
 */                                                                                                                    // 2923
var ContractFactory = function (eth, abi) {                                                                            // 2924
    this.eth = eth;                                                                                                    // 2925
    this.abi = abi;                                                                                                    // 2926
                                                                                                                       // 2927
    /**                                                                                                                // 2928
     * Should be called to create new contract on a blockchain                                                         // 2929
     *                                                                                                                 // 2930
     * @method new                                                                                                     // 2931
     * @param {Any} contract constructor param1 (optional)                                                             // 2932
     * @param {Any} contract constructor param2 (optional)                                                             // 2933
     * @param {Object} contract transaction object (required)                                                          // 2934
     * @param {Function} callback                                                                                      // 2935
     * @returns {Contract} returns contract instance                                                                   // 2936
     */                                                                                                                // 2937
    this.new = function () {                                                                                           // 2938
        /*jshint maxcomplexity: 7 */                                                                                   // 2939
                                                                                                                       // 2940
        var contract = new Contract(this.eth, this.abi);                                                               // 2941
                                                                                                                       // 2942
        // parse arguments                                                                                             // 2943
        var options = {}; // required!                                                                                 // 2944
        var callback;                                                                                                  // 2945
                                                                                                                       // 2946
        var args = Array.prototype.slice.call(arguments);                                                              // 2947
        if (utils.isFunction(args[args.length - 1])) {                                                                 // 2948
            callback = args.pop();                                                                                     // 2949
        }                                                                                                              // 2950
                                                                                                                       // 2951
        var last = args[args.length - 1];                                                                              // 2952
        if (utils.isObject(last) && !utils.isArray(last)) {                                                            // 2953
            options = args.pop();                                                                                      // 2954
        }                                                                                                              // 2955
                                                                                                                       // 2956
        if (options.value > 0) {                                                                                       // 2957
            var constructorAbi = abi.filter(function (json) {                                                          // 2958
                return json.type === 'constructor' && json.inputs.length === args.length;                              // 2959
            })[0] || {};                                                                                               // 2960
                                                                                                                       // 2961
            if (!constructorAbi.payable) {                                                                             // 2962
                throw new Error('Cannot send value to non-payable constructor');                                       // 2963
            }                                                                                                          // 2964
        }                                                                                                              // 2965
                                                                                                                       // 2966
        var bytes = encodeConstructorParams(this.abi, args);                                                           // 2967
        options.data += bytes;                                                                                         // 2968
                                                                                                                       // 2969
        if (callback) {                                                                                                // 2970
                                                                                                                       // 2971
            // wait for the contract address adn check if the code was deployed                                        // 2972
            this.eth.sendTransaction(options, function (err, hash) {                                                   // 2973
                if (err) {                                                                                             // 2974
                    callback(err);                                                                                     // 2975
                } else {                                                                                               // 2976
                    // add the transaction hash                                                                        // 2977
                    contract.transactionHash = hash;                                                                   // 2978
                                                                                                                       // 2979
                    // call callback for the first time                                                                // 2980
                    callback(null, contract);                                                                          // 2981
                                                                                                                       // 2982
                    checkForContractAddress(contract, callback);                                                       // 2983
                }                                                                                                      // 2984
            });                                                                                                        // 2985
        } else {                                                                                                       // 2986
            var hash = this.eth.sendTransaction(options);                                                              // 2987
            // add the transaction hash                                                                                // 2988
            contract.transactionHash = hash;                                                                           // 2989
            checkForContractAddress(contract);                                                                         // 2990
        }                                                                                                              // 2991
                                                                                                                       // 2992
        return contract;                                                                                               // 2993
    };                                                                                                                 // 2994
                                                                                                                       // 2995
    this.new.getData = this.getData.bind(this);                                                                        // 2996
};                                                                                                                     // 2997
                                                                                                                       // 2998
/**                                                                                                                    // 2999
 * Should be called to create new ContractFactory                                                                      // 3000
 *                                                                                                                     // 3001
 * @method contract                                                                                                    // 3002
 * @param {Array} abi                                                                                                  // 3003
 * @returns {ContractFactory} new contract factory                                                                     // 3004
 */                                                                                                                    // 3005
//var contract = function (abi) {                                                                                      // 3006
    //return new ContractFactory(abi);                                                                                 // 3007
//};                                                                                                                   // 3008
                                                                                                                       // 3009
                                                                                                                       // 3010
                                                                                                                       // 3011
/**                                                                                                                    // 3012
 * Should be called to get access to existing contract on a blockchain                                                 // 3013
 *                                                                                                                     // 3014
 * @method at                                                                                                          // 3015
 * @param {Address} contract address (required)                                                                        // 3016
 * @param {Function} callback {optional)                                                                               // 3017
 * @returns {Contract} returns contract if no callback was passed,                                                     // 3018
 * otherwise calls callback function (err, contract)                                                                   // 3019
 */                                                                                                                    // 3020
ContractFactory.prototype.at = function (address, callback) {                                                          // 3021
    var contract = new Contract(this.eth, this.abi, address);                                                          // 3022
                                                                                                                       // 3023
    // this functions are not part of prototype,                                                                       // 3024
    // because we dont want to spoil the interface                                                                     // 3025
    addFunctionsToContract(contract);                                                                                  // 3026
    addEventsToContract(contract);                                                                                     // 3027
                                                                                                                       // 3028
    if (callback) {                                                                                                    // 3029
        callback(null, contract);                                                                                      // 3030
    }                                                                                                                  // 3031
    return contract;                                                                                                   // 3032
};                                                                                                                     // 3033
                                                                                                                       // 3034
/**                                                                                                                    // 3035
 * Gets the data, which is data to deploy plus constructor params                                                      // 3036
 *                                                                                                                     // 3037
 * @method getData                                                                                                     // 3038
 */                                                                                                                    // 3039
ContractFactory.prototype.getData = function () {                                                                      // 3040
    var options = {}; // required!                                                                                     // 3041
    var args = Array.prototype.slice.call(arguments);                                                                  // 3042
                                                                                                                       // 3043
    var last = args[args.length - 1];                                                                                  // 3044
    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 3045
        options = args.pop();                                                                                          // 3046
    }                                                                                                                  // 3047
                                                                                                                       // 3048
    var bytes = encodeConstructorParams(this.abi, args);                                                               // 3049
    options.data += bytes;                                                                                             // 3050
                                                                                                                       // 3051
    return options.data;                                                                                               // 3052
};                                                                                                                     // 3053
                                                                                                                       // 3054
/**                                                                                                                    // 3055
 * Should be called to create new contract instance                                                                    // 3056
 *                                                                                                                     // 3057
 * @method Contract                                                                                                    // 3058
 * @param {Array} abi                                                                                                  // 3059
 * @param {Address} contract address                                                                                   // 3060
 */                                                                                                                    // 3061
var Contract = function (eth, abi, address) {                                                                          // 3062
    this._eth = eth;                                                                                                   // 3063
    this.transactionHash = null;                                                                                       // 3064
    this.address = address;                                                                                            // 3065
    this.abi = abi;                                                                                                    // 3066
};                                                                                                                     // 3067
                                                                                                                       // 3068
module.exports = ContractFactory;                                                                                      // 3069
                                                                                                                       // 3070
},{"../solidity/coder":7,"../utils/utils":20,"./allevents":23,"./event":27,"./function":31}],26:[function(require,module,exports){
/*                                                                                                                     // 3072
    This file is part of web3.js.                                                                                      // 3073
                                                                                                                       // 3074
    web3.js is free software: you can redistribute it and/or modify                                                    // 3075
    it under the terms of the GNU Lesser General Public License as published by                                        // 3076
    the Free Software Foundation, either version 3 of the License, or                                                  // 3077
    (at your option) any later version.                                                                                // 3078
                                                                                                                       // 3079
    web3.js is distributed in the hope that it will be useful,                                                         // 3080
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3081
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3082
    GNU Lesser General Public License for more details.                                                                // 3083
                                                                                                                       // 3084
    You should have received a copy of the GNU Lesser General Public License                                           // 3085
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3086
*/                                                                                                                     // 3087
/**                                                                                                                    // 3088
 * @file errors.js                                                                                                     // 3089
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3090
 * @date 2015                                                                                                          // 3091
 */                                                                                                                    // 3092
                                                                                                                       // 3093
module.exports = {                                                                                                     // 3094
    InvalidNumberOfParams: function () {                                                                               // 3095
        return new Error('Invalid number of input parameters');                                                        // 3096
    },                                                                                                                 // 3097
    InvalidConnection: function (host){                                                                                // 3098
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');                                   // 3099
    },                                                                                                                 // 3100
    InvalidProvider: function () {                                                                                     // 3101
        return new Error('Provider not set or invalid');                                                               // 3102
    },                                                                                                                 // 3103
    InvalidResponse: function (result){                                                                                // 3104
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
        return new Error(message);                                                                                     // 3106
    },                                                                                                                 // 3107
    ConnectionTimeout: function (ms){                                                                                  // 3108
        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');                                      // 3109
    }                                                                                                                  // 3110
};                                                                                                                     // 3111
                                                                                                                       // 3112
},{}],27:[function(require,module,exports){                                                                            // 3113
/*                                                                                                                     // 3114
    This file is part of web3.js.                                                                                      // 3115
                                                                                                                       // 3116
    web3.js is free software: you can redistribute it and/or modify                                                    // 3117
    it under the terms of the GNU Lesser General Public License as published by                                        // 3118
    the Free Software Foundation, either version 3 of the License, or                                                  // 3119
    (at your option) any later version.                                                                                // 3120
                                                                                                                       // 3121
    web3.js is distributed in the hope that it will be useful,                                                         // 3122
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3123
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3124
    GNU Lesser General Public License for more details.                                                                // 3125
                                                                                                                       // 3126
    You should have received a copy of the GNU Lesser General Public License                                           // 3127
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3128
*/                                                                                                                     // 3129
/**                                                                                                                    // 3130
 * @file event.js                                                                                                      // 3131
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3132
 * @date 2014                                                                                                          // 3133
 */                                                                                                                    // 3134
                                                                                                                       // 3135
var utils = require('../utils/utils');                                                                                 // 3136
var coder = require('../solidity/coder');                                                                              // 3137
var formatters = require('./formatters');                                                                              // 3138
var sha3 = require('../utils/sha3');                                                                                   // 3139
var Filter = require('./filter');                                                                                      // 3140
var watches = require('./methods/watches');                                                                            // 3141
                                                                                                                       // 3142
/**                                                                                                                    // 3143
 * This prototype should be used to create event filters                                                               // 3144
 */                                                                                                                    // 3145
var SolidityEvent = function (requestManager, json, address) {                                                         // 3146
    this._requestManager = requestManager;                                                                             // 3147
    this._params = json.inputs;                                                                                        // 3148
    this._name = utils.transformToFullName(json);                                                                      // 3149
    this._address = address;                                                                                           // 3150
    this._anonymous = json.anonymous;                                                                                  // 3151
};                                                                                                                     // 3152
                                                                                                                       // 3153
/**                                                                                                                    // 3154
 * Should be used to get filtered param types                                                                          // 3155
 *                                                                                                                     // 3156
 * @method types                                                                                                       // 3157
 * @param {Bool} decide if returned typed should be indexed                                                            // 3158
 * @return {Array} array of types                                                                                      // 3159
 */                                                                                                                    // 3160
SolidityEvent.prototype.types = function (indexed) {                                                                   // 3161
    return this._params.filter(function (i) {                                                                          // 3162
        return i.indexed === indexed;                                                                                  // 3163
    }).map(function (i) {                                                                                              // 3164
        return i.type;                                                                                                 // 3165
    });                                                                                                                // 3166
};                                                                                                                     // 3167
                                                                                                                       // 3168
/**                                                                                                                    // 3169
 * Should be used to get event display name                                                                            // 3170
 *                                                                                                                     // 3171
 * @method displayName                                                                                                 // 3172
 * @return {String} event display name                                                                                 // 3173
 */                                                                                                                    // 3174
SolidityEvent.prototype.displayName = function () {                                                                    // 3175
    return utils.extractDisplayName(this._name);                                                                       // 3176
};                                                                                                                     // 3177
                                                                                                                       // 3178
/**                                                                                                                    // 3179
 * Should be used to get event type name                                                                               // 3180
 *                                                                                                                     // 3181
 * @method typeName                                                                                                    // 3182
 * @return {String} event type name                                                                                    // 3183
 */                                                                                                                    // 3184
SolidityEvent.prototype.typeName = function () {                                                                       // 3185
    return utils.extractTypeName(this._name);                                                                          // 3186
};                                                                                                                     // 3187
                                                                                                                       // 3188
/**                                                                                                                    // 3189
 * Should be used to get event signature                                                                               // 3190
 *                                                                                                                     // 3191
 * @method signature                                                                                                   // 3192
 * @return {String} event signature                                                                                    // 3193
 */                                                                                                                    // 3194
SolidityEvent.prototype.signature = function () {                                                                      // 3195
    return sha3(this._name);                                                                                           // 3196
};                                                                                                                     // 3197
                                                                                                                       // 3198
/**                                                                                                                    // 3199
 * Should be used to encode indexed params and options to one final object                                             // 3200
 *                                                                                                                     // 3201
 * @method encode                                                                                                      // 3202
 * @param {Object} indexed                                                                                             // 3203
 * @param {Object} options                                                                                             // 3204
 * @return {Object} everything combined together and encoded                                                           // 3205
 */                                                                                                                    // 3206
SolidityEvent.prototype.encode = function (indexed, options) {                                                         // 3207
    indexed = indexed || {};                                                                                           // 3208
    options = options || {};                                                                                           // 3209
    var result = {};                                                                                                   // 3210
                                                                                                                       // 3211
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 3212
        return options[f] !== undefined;                                                                               // 3213
    }).forEach(function (f) {                                                                                          // 3214
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 3215
    });                                                                                                                // 3216
                                                                                                                       // 3217
    result.topics = [];                                                                                                // 3218
                                                                                                                       // 3219
    result.address = this._address;                                                                                    // 3220
    if (!this._anonymous) {                                                                                            // 3221
        result.topics.push('0x' + this.signature());                                                                   // 3222
    }                                                                                                                  // 3223
                                                                                                                       // 3224
    var indexedTopics = this._params.filter(function (i) {                                                             // 3225
        return i.indexed === true;                                                                                     // 3226
    }).map(function (i) {                                                                                              // 3227
        var value = indexed[i.name];                                                                                   // 3228
        if (value === undefined || value === null) {                                                                   // 3229
            return null;                                                                                               // 3230
        }                                                                                                              // 3231
                                                                                                                       // 3232
        if (utils.isArray(value)) {                                                                                    // 3233
            return value.map(function (v) {                                                                            // 3234
                return '0x' + coder.encodeParam(i.type, v);                                                            // 3235
            });                                                                                                        // 3236
        }                                                                                                              // 3237
        return '0x' + coder.encodeParam(i.type, value);                                                                // 3238
    });                                                                                                                // 3239
                                                                                                                       // 3240
    result.topics = result.topics.concat(indexedTopics);                                                               // 3241
                                                                                                                       // 3242
    return result;                                                                                                     // 3243
};                                                                                                                     // 3244
                                                                                                                       // 3245
/**                                                                                                                    // 3246
 * Should be used to decode indexed params and options                                                                 // 3247
 *                                                                                                                     // 3248
 * @method decode                                                                                                      // 3249
 * @param {Object} data                                                                                                // 3250
 * @return {Object} result object with decoded indexed && not indexed params                                           // 3251
 */                                                                                                                    // 3252
SolidityEvent.prototype.decode = function (data) {                                                                     // 3253
                                                                                                                       // 3254
    data.data = data.data || '';                                                                                       // 3255
    data.topics = data.topics || [];                                                                                   // 3256
                                                                                                                       // 3257
    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 3258
    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");                           // 3259
    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 3260
                                                                                                                       // 3261
    var notIndexedData = data.data.slice(2);                                                                           // 3262
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 3263
                                                                                                                       // 3264
    var result = formatters.outputLogFormatter(data);                                                                  // 3265
    result.event = this.displayName();                                                                                 // 3266
    result.address = data.address;                                                                                     // 3267
                                                                                                                       // 3268
    result.args = this._params.reduce(function (acc, current) {                                                        // 3269
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 3270
        return acc;                                                                                                    // 3271
    }, {});                                                                                                            // 3272
                                                                                                                       // 3273
    delete result.data;                                                                                                // 3274
    delete result.topics;                                                                                              // 3275
                                                                                                                       // 3276
    return result;                                                                                                     // 3277
};                                                                                                                     // 3278
                                                                                                                       // 3279
/**                                                                                                                    // 3280
 * Should be used to create new filter object from event                                                               // 3281
 *                                                                                                                     // 3282
 * @method execute                                                                                                     // 3283
 * @param {Object} indexed                                                                                             // 3284
 * @param {Object} options                                                                                             // 3285
 * @return {Object} filter object                                                                                      // 3286
 */                                                                                                                    // 3287
SolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 3288
                                                                                                                       // 3289
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 3290
        callback = arguments[arguments.length - 1];                                                                    // 3291
        if(arguments.length === 2)                                                                                     // 3292
            options = null;                                                                                            // 3293
        if(arguments.length === 1) {                                                                                   // 3294
            options = null;                                                                                            // 3295
            indexed = {};                                                                                              // 3296
        }                                                                                                              // 3297
    }                                                                                                                  // 3298
                                                                                                                       // 3299
    var o = this.encode(indexed, options);                                                                             // 3300
    var formatter = this.decode.bind(this);                                                                            // 3301
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 3302
};                                                                                                                     // 3303
                                                                                                                       // 3304
/**                                                                                                                    // 3305
 * Should be used to attach event to contract object                                                                   // 3306
 *                                                                                                                     // 3307
 * @method attachToContract                                                                                            // 3308
 * @param {Contract}                                                                                                   // 3309
 */                                                                                                                    // 3310
SolidityEvent.prototype.attachToContract = function (contract) {                                                       // 3311
    var execute = this.execute.bind(this);                                                                             // 3312
    var displayName = this.displayName();                                                                              // 3313
    if (!contract[displayName]) {                                                                                      // 3314
        contract[displayName] = execute;                                                                               // 3315
    }                                                                                                                  // 3316
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 3317
};                                                                                                                     // 3318
                                                                                                                       // 3319
module.exports = SolidityEvent;                                                                                        // 3320
                                                                                                                       // 3321
                                                                                                                       // 3322
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./filter":29,"./formatters":30,"./methods/watches":43}],28:[function(require,module,exports){
var formatters = require('./formatters');                                                                              // 3324
var utils = require('./../utils/utils');                                                                               // 3325
var Method = require('./method');                                                                                      // 3326
var Property = require('./property');                                                                                  // 3327
                                                                                                                       // 3328
// TODO: refactor, so the input params are not altered.                                                                // 3329
// it's necessary to make same 'extension' work with multiple providers                                                // 3330
var extend = function (web3) {                                                                                         // 3331
    /* jshint maxcomplexity:5 */                                                                                       // 3332
    var ex = function (extension) {                                                                                    // 3333
                                                                                                                       // 3334
        var extendedObject;                                                                                            // 3335
        if (extension.property) {                                                                                      // 3336
            if (!web3[extension.property]) {                                                                           // 3337
                web3[extension.property] = {};                                                                         // 3338
            }                                                                                                          // 3339
            extendedObject = web3[extension.property];                                                                 // 3340
        } else {                                                                                                       // 3341
            extendedObject = web3;                                                                                     // 3342
        }                                                                                                              // 3343
                                                                                                                       // 3344
        if (extension.methods) {                                                                                       // 3345
            extension.methods.forEach(function (method) {                                                              // 3346
                method.attachToObject(extendedObject);                                                                 // 3347
                method.setRequestManager(web3._requestManager);                                                        // 3348
            });                                                                                                        // 3349
        }                                                                                                              // 3350
                                                                                                                       // 3351
        if (extension.properties) {                                                                                    // 3352
            extension.properties.forEach(function (property) {                                                         // 3353
                property.attachToObject(extendedObject);                                                               // 3354
                property.setRequestManager(web3._requestManager);                                                      // 3355
            });                                                                                                        // 3356
        }                                                                                                              // 3357
    };                                                                                                                 // 3358
                                                                                                                       // 3359
    ex.formatters = formatters;                                                                                        // 3360
    ex.utils = utils;                                                                                                  // 3361
    ex.Method = Method;                                                                                                // 3362
    ex.Property = Property;                                                                                            // 3363
                                                                                                                       // 3364
    return ex;                                                                                                         // 3365
};                                                                                                                     // 3366
                                                                                                                       // 3367
                                                                                                                       // 3368
                                                                                                                       // 3369
module.exports = extend;                                                                                               // 3370
                                                                                                                       // 3371
                                                                                                                       // 3372
},{"./../utils/utils":20,"./formatters":30,"./method":36,"./property":45}],29:[function(require,module,exports){       // 3373
/*                                                                                                                     // 3374
    This file is part of web3.js.                                                                                      // 3375
                                                                                                                       // 3376
    web3.js is free software: you can redistribute it and/or modify                                                    // 3377
    it under the terms of the GNU Lesser General Public License as published by                                        // 3378
    the Free Software Foundation, either version 3 of the License, or                                                  // 3379
    (at your option) any later version.                                                                                // 3380
                                                                                                                       // 3381
    web3.js is distributed in the hope that it will be useful,                                                         // 3382
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3383
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3384
    GNU Lesser General Public License for more details.                                                                // 3385
                                                                                                                       // 3386
    You should have received a copy of the GNU Lesser General Public License                                           // 3387
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3388
*/                                                                                                                     // 3389
/** @file filter.js                                                                                                    // 3390
 * @authors:                                                                                                           // 3391
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 3392
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 3393
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 3394
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 3395
 *   Gav Wood <g@ethdev.com>                                                                                           // 3396
 * @date 2014                                                                                                          // 3397
 */                                                                                                                    // 3398
                                                                                                                       // 3399
var formatters = require('./formatters');                                                                              // 3400
var utils = require('../utils/utils');                                                                                 // 3401
                                                                                                                       // 3402
/**                                                                                                                    // 3403
* Converts a given topic to a hex string, but also allows null values.                                                 // 3404
*                                                                                                                      // 3405
* @param {Mixed} value                                                                                                 // 3406
* @return {String}                                                                                                     // 3407
*/                                                                                                                     // 3408
var toTopic = function(value){                                                                                         // 3409
                                                                                                                       // 3410
    if(value === null || typeof value === 'undefined')                                                                 // 3411
        return null;                                                                                                   // 3412
                                                                                                                       // 3413
    value = String(value);                                                                                             // 3414
                                                                                                                       // 3415
    if(value.indexOf('0x') === 0)                                                                                      // 3416
        return value;                                                                                                  // 3417
    else                                                                                                               // 3418
        return utils.fromUtf8(value);                                                                                  // 3419
};                                                                                                                     // 3420
                                                                                                                       // 3421
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 3422
/// @param should be string or object                                                                                  // 3423
/// @returns options string or object                                                                                  // 3424
var getOptions = function (options) {                                                                                  // 3425
                                                                                                                       // 3426
    if (utils.isString(options)) {                                                                                     // 3427
        return options;                                                                                                // 3428
    }                                                                                                                  // 3429
                                                                                                                       // 3430
    options = options || {};                                                                                           // 3431
                                                                                                                       // 3432
    // make sure topics, get converted to hex                                                                          // 3433
    options.topics = options.topics || [];                                                                             // 3434
    options.topics = options.topics.map(function(topic){                                                               // 3435
        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                           // 3436
    });                                                                                                                // 3437
                                                                                                                       // 3438
    return {                                                                                                           // 3439
        topics: options.topics,                                                                                        // 3440
        from: options.from,                                                                                            // 3441
        to: options.to,                                                                                                // 3442
        address: options.address,                                                                                      // 3443
        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                            // 3444
        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                 // 3445
    };                                                                                                                 // 3446
};                                                                                                                     // 3447
                                                                                                                       // 3448
/**                                                                                                                    // 3449
Adds the callback and sets up the methods, to iterate over the results.                                                // 3450
                                                                                                                       // 3451
@method getLogsAtStart                                                                                                 // 3452
@param {Object} self                                                                                                   // 3453
@param {funciton}                                                                                                      // 3454
*/                                                                                                                     // 3455
var getLogsAtStart = function(self, callback){                                                                         // 3456
    // call getFilterLogs for the first watch callback start                                                           // 3457
    if (!utils.isString(self.options)) {                                                                               // 3458
        self.get(function (err, messages) {                                                                            // 3459
            // don't send all the responses to all the watches again... just to self one                               // 3460
            if (err) {                                                                                                 // 3461
                callback(err);                                                                                         // 3462
            }                                                                                                          // 3463
                                                                                                                       // 3464
            if(utils.isArray(messages)) {                                                                              // 3465
                messages.forEach(function (message) {                                                                  // 3466
                    callback(null, message);                                                                           // 3467
                });                                                                                                    // 3468
            }                                                                                                          // 3469
        });                                                                                                            // 3470
    }                                                                                                                  // 3471
};                                                                                                                     // 3472
                                                                                                                       // 3473
/**                                                                                                                    // 3474
Adds the callback and sets up the methods, to iterate over the results.                                                // 3475
                                                                                                                       // 3476
@method pollFilter                                                                                                     // 3477
@param {Object} self                                                                                                   // 3478
*/                                                                                                                     // 3479
var pollFilter = function(self) {                                                                                      // 3480
                                                                                                                       // 3481
    var onMessage = function (error, messages) {                                                                       // 3482
        if (error) {                                                                                                   // 3483
            return self.callbacks.forEach(function (callback) {                                                        // 3484
                callback(error);                                                                                       // 3485
            });                                                                                                        // 3486
        }                                                                                                              // 3487
                                                                                                                       // 3488
        if(utils.isArray(messages)) {                                                                                  // 3489
            messages.forEach(function (message) {                                                                      // 3490
                message = self.formatter ? self.formatter(message) : message;                                          // 3491
                self.callbacks.forEach(function (callback) {                                                           // 3492
                    callback(null, message);                                                                           // 3493
                });                                                                                                    // 3494
            });                                                                                                        // 3495
        }                                                                                                              // 3496
    };                                                                                                                 // 3497
                                                                                                                       // 3498
    self.requestManager.startPolling({                                                                                 // 3499
        method: self.implementation.poll.call,                                                                         // 3500
        params: [self.filterId],                                                                                       // 3501
    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 3502
                                                                                                                       // 3503
};                                                                                                                     // 3504
                                                                                                                       // 3505
var Filter = function (requestManager, options, methods, formatter, callback, filterCreationErrorCallback) {           // 3506
    var self = this;                                                                                                   // 3507
    var implementation = {};                                                                                           // 3508
    methods.forEach(function (method) {                                                                                // 3509
        method.setRequestManager(requestManager);                                                                      // 3510
        method.attachToObject(implementation);                                                                         // 3511
    });                                                                                                                // 3512
    this.requestManager = requestManager;                                                                              // 3513
    this.options = getOptions(options);                                                                                // 3514
    this.implementation = implementation;                                                                              // 3515
    this.filterId = null;                                                                                              // 3516
    this.callbacks = [];                                                                                               // 3517
    this.getLogsCallbacks = [];                                                                                        // 3518
    this.pollFilters = [];                                                                                             // 3519
    this.formatter = formatter;                                                                                        // 3520
    this.implementation.newFilter(this.options, function(error, id){                                                   // 3521
        if(error) {                                                                                                    // 3522
            self.callbacks.forEach(function(cb){                                                                       // 3523
                cb(error);                                                                                             // 3524
            });                                                                                                        // 3525
            filterCreationErrorCallback(error);                                                                        // 3526
        } else {                                                                                                       // 3527
            self.filterId = id;                                                                                        // 3528
                                                                                                                       // 3529
            // check if there are get pending callbacks as a consequence                                               // 3530
            // of calling get() with filterId unassigned.                                                              // 3531
            self.getLogsCallbacks.forEach(function (cb){                                                               // 3532
                self.get(cb);                                                                                          // 3533
            });                                                                                                        // 3534
            self.getLogsCallbacks = [];                                                                                // 3535
                                                                                                                       // 3536
            // get filter logs for the already existing watch calls                                                    // 3537
            self.callbacks.forEach(function(cb){                                                                       // 3538
                getLogsAtStart(self, cb);                                                                              // 3539
            });                                                                                                        // 3540
            if(self.callbacks.length > 0)                                                                              // 3541
                pollFilter(self);                                                                                      // 3542
                                                                                                                       // 3543
            // start to watch immediately                                                                              // 3544
            if(typeof callback === 'function') {                                                                       // 3545
                return self.watch(callback);                                                                           // 3546
            }                                                                                                          // 3547
        }                                                                                                              // 3548
    });                                                                                                                // 3549
                                                                                                                       // 3550
    return this;                                                                                                       // 3551
};                                                                                                                     // 3552
                                                                                                                       // 3553
Filter.prototype.watch = function (callback) {                                                                         // 3554
    this.callbacks.push(callback);                                                                                     // 3555
                                                                                                                       // 3556
    if(this.filterId) {                                                                                                // 3557
        getLogsAtStart(this, callback);                                                                                // 3558
        pollFilter(this);                                                                                              // 3559
    }                                                                                                                  // 3560
                                                                                                                       // 3561
    return this;                                                                                                       // 3562
};                                                                                                                     // 3563
                                                                                                                       // 3564
Filter.prototype.stopWatching = function (callback) {                                                                  // 3565
    this.requestManager.stopPolling(this.filterId);                                                                    // 3566
    this.callbacks = [];                                                                                               // 3567
    // remove filter async                                                                                             // 3568
    if (callback) {                                                                                                    // 3569
        this.implementation.uninstallFilter(this.filterId, callback);                                                  // 3570
    } else {                                                                                                           // 3571
        return this.implementation.uninstallFilter(this.filterId);                                                     // 3572
    }                                                                                                                  // 3573
};                                                                                                                     // 3574
                                                                                                                       // 3575
Filter.prototype.get = function (callback) {                                                                           // 3576
    var self = this;                                                                                                   // 3577
    if (utils.isFunction(callback)) {                                                                                  // 3578
        if (this.filterId === null) {                                                                                  // 3579
            // If filterId is not set yet, call it back                                                                // 3580
            // when newFilter() assigns it.                                                                            // 3581
            this.getLogsCallbacks.push(callback);                                                                      // 3582
        } else {                                                                                                       // 3583
            this.implementation.getLogs(this.filterId, function(err, res){                                             // 3584
                if (err) {                                                                                             // 3585
                    callback(err);                                                                                     // 3586
                } else {                                                                                               // 3587
                    callback(null, res.map(function (log) {                                                            // 3588
                        return self.formatter ? self.formatter(log) : log;                                             // 3589
                    }));                                                                                               // 3590
                }                                                                                                      // 3591
            });                                                                                                        // 3592
        }                                                                                                              // 3593
    } else {                                                                                                           // 3594
        if (this.filterId === null) {                                                                                  // 3595
            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
        }                                                                                                              // 3597
        var logs = this.implementation.getLogs(this.filterId);                                                         // 3598
        return logs.map(function (log) {                                                                               // 3599
            return self.formatter ? self.formatter(log) : log;                                                         // 3600
        });                                                                                                            // 3601
    }                                                                                                                  // 3602
                                                                                                                       // 3603
    return this;                                                                                                       // 3604
};                                                                                                                     // 3605
                                                                                                                       // 3606
module.exports = Filter;                                                                                               // 3607
                                                                                                                       // 3608
                                                                                                                       // 3609
},{"../utils/utils":20,"./formatters":30}],30:[function(require,module,exports){                                       // 3610
/*                                                                                                                     // 3611
    This file is part of web3.js.                                                                                      // 3612
                                                                                                                       // 3613
    web3.js is free software: you can redistribute it and/or modify                                                    // 3614
    it under the terms of the GNU Lesser General Public License as published by                                        // 3615
    the Free Software Foundation, either version 3 of the License, or                                                  // 3616
    (at your option) any later version.                                                                                // 3617
                                                                                                                       // 3618
    web3.js is distributed in the hope that it will be useful,                                                         // 3619
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3620
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3621
    GNU Lesser General Public License for more details.                                                                // 3622
                                                                                                                       // 3623
    You should have received a copy of the GNU Lesser General Public License                                           // 3624
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3625
*/                                                                                                                     // 3626
/**                                                                                                                    // 3627
 * @file formatters.js                                                                                                 // 3628
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3629
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 3630
 * @date 2015                                                                                                          // 3631
 */                                                                                                                    // 3632
                                                                                                                       // 3633
var utils = require('../utils/utils');                                                                                 // 3634
var config = require('../utils/config');                                                                               // 3635
var Iban = require('./iban');                                                                                          // 3636
                                                                                                                       // 3637
/**                                                                                                                    // 3638
 * Should the format output to a big number                                                                            // 3639
 *                                                                                                                     // 3640
 * @method outputBigNumberFormatter                                                                                    // 3641
 * @param {String|Number|BigNumber}                                                                                    // 3642
 * @returns {BigNumber} object                                                                                         // 3643
 */                                                                                                                    // 3644
var outputBigNumberFormatter = function (number) {                                                                     // 3645
    return utils.toBigNumber(number);                                                                                  // 3646
};                                                                                                                     // 3647
                                                                                                                       // 3648
var isPredefinedBlockNumber = function (blockNumber) {                                                                 // 3649
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 3650
};                                                                                                                     // 3651
                                                                                                                       // 3652
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 3653
    if (blockNumber === undefined) {                                                                                   // 3654
        return config.defaultBlock;                                                                                    // 3655
    }                                                                                                                  // 3656
    return inputBlockNumberFormatter(blockNumber);                                                                     // 3657
};                                                                                                                     // 3658
                                                                                                                       // 3659
var inputBlockNumberFormatter = function (blockNumber) {                                                               // 3660
    if (blockNumber === undefined) {                                                                                   // 3661
        return undefined;                                                                                              // 3662
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 3663
        return blockNumber;                                                                                            // 3664
    }                                                                                                                  // 3665
    return utils.toHex(blockNumber);                                                                                   // 3666
};                                                                                                                     // 3667
                                                                                                                       // 3668
/**                                                                                                                    // 3669
 * Formats the input of a transaction and converts all values to HEX                                                   // 3670
 *                                                                                                                     // 3671
 * @method inputCallFormatter                                                                                          // 3672
 * @param {Object} transaction options                                                                                 // 3673
 * @returns object                                                                                                     // 3674
*/                                                                                                                     // 3675
var inputCallFormatter = function (options){                                                                           // 3676
                                                                                                                       // 3677
    options.from = options.from || config.defaultAccount;                                                              // 3678
                                                                                                                       // 3679
    if (options.from) {                                                                                                // 3680
        options.from = inputAddressFormatter(options.from);                                                            // 3681
    }                                                                                                                  // 3682
                                                                                                                       // 3683
    if (options.to) { // it might be contract creation                                                                 // 3684
        options.to = inputAddressFormatter(options.to);                                                                // 3685
    }                                                                                                                  // 3686
                                                                                                                       // 3687
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3688
        return options[key] !== undefined;                                                                             // 3689
    }).forEach(function(key){                                                                                          // 3690
        options[key] = utils.fromDecimal(options[key]);                                                                // 3691
    });                                                                                                                // 3692
                                                                                                                       // 3693
    return options;                                                                                                    // 3694
};                                                                                                                     // 3695
                                                                                                                       // 3696
/**                                                                                                                    // 3697
 * Formats the input of a transaction and converts all values to HEX                                                   // 3698
 *                                                                                                                     // 3699
 * @method inputTransactionFormatter                                                                                   // 3700
 * @param {Object} transaction options                                                                                 // 3701
 * @returns object                                                                                                     // 3702
*/                                                                                                                     // 3703
var inputTransactionFormatter = function (options){                                                                    // 3704
                                                                                                                       // 3705
    options.from = options.from || config.defaultAccount;                                                              // 3706
    options.from = inputAddressFormatter(options.from);                                                                // 3707
                                                                                                                       // 3708
    if (options.to) { // it might be contract creation                                                                 // 3709
        options.to = inputAddressFormatter(options.to);                                                                // 3710
    }                                                                                                                  // 3711
                                                                                                                       // 3712
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3713
        return options[key] !== undefined;                                                                             // 3714
    }).forEach(function(key){                                                                                          // 3715
        options[key] = utils.fromDecimal(options[key]);                                                                // 3716
    });                                                                                                                // 3717
                                                                                                                       // 3718
    return options;                                                                                                    // 3719
};                                                                                                                     // 3720
                                                                                                                       // 3721
/**                                                                                                                    // 3722
 * Formats the output of a transaction to its proper values                                                            // 3723
 *                                                                                                                     // 3724
 * @method outputTransactionFormatter                                                                                  // 3725
 * @param {Object} tx                                                                                                  // 3726
 * @returns {Object}                                                                                                   // 3727
*/                                                                                                                     // 3728
var outputTransactionFormatter = function (tx){                                                                        // 3729
    if(tx.blockNumber !== null)                                                                                        // 3730
        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 3731
    if(tx.transactionIndex !== null)                                                                                   // 3732
        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 3733
    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 3734
    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 3735
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 3736
    tx.value = utils.toBigNumber(tx.value);                                                                            // 3737
    return tx;                                                                                                         // 3738
};                                                                                                                     // 3739
                                                                                                                       // 3740
/**                                                                                                                    // 3741
 * Formats the output of a transaction receipt to its proper values                                                    // 3742
 *                                                                                                                     // 3743
 * @method outputTransactionReceiptFormatter                                                                           // 3744
 * @param {Object} receipt                                                                                             // 3745
 * @returns {Object}                                                                                                   // 3746
*/                                                                                                                     // 3747
var outputTransactionReceiptFormatter = function (receipt){                                                            // 3748
    if(receipt.blockNumber !== null)                                                                                   // 3749
        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 3750
    if(receipt.transactionIndex !== null)                                                                              // 3751
        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 3752
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 3753
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 3754
                                                                                                                       // 3755
    if(utils.isArray(receipt.logs)) {                                                                                  // 3756
        receipt.logs = receipt.logs.map(function(log){                                                                 // 3757
            return outputLogFormatter(log);                                                                            // 3758
        });                                                                                                            // 3759
    }                                                                                                                  // 3760
                                                                                                                       // 3761
    return receipt;                                                                                                    // 3762
};                                                                                                                     // 3763
                                                                                                                       // 3764
/**                                                                                                                    // 3765
 * Formats the output of a block to its proper values                                                                  // 3766
 *                                                                                                                     // 3767
 * @method outputBlockFormatter                                                                                        // 3768
 * @param {Object} block                                                                                               // 3769
 * @returns {Object}                                                                                                   // 3770
*/                                                                                                                     // 3771
var outputBlockFormatter = function(block) {                                                                           // 3772
                                                                                                                       // 3773
    // transform to number                                                                                             // 3774
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 3775
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 3776
    block.size = utils.toDecimal(block.size);                                                                          // 3777
    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 3778
    if(block.number !== null)                                                                                          // 3779
        block.number = utils.toDecimal(block.number);                                                                  // 3780
                                                                                                                       // 3781
    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 3782
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 3783
                                                                                                                       // 3784
    if (utils.isArray(block.transactions)) {                                                                           // 3785
        block.transactions.forEach(function(item){                                                                     // 3786
            if(!utils.isString(item))                                                                                  // 3787
                return outputTransactionFormatter(item);                                                               // 3788
        });                                                                                                            // 3789
    }                                                                                                                  // 3790
                                                                                                                       // 3791
    return block;                                                                                                      // 3792
};                                                                                                                     // 3793
                                                                                                                       // 3794
/**                                                                                                                    // 3795
 * Formats the output of a log                                                                                         // 3796
 *                                                                                                                     // 3797
 * @method outputLogFormatter                                                                                          // 3798
 * @param {Object} log object                                                                                          // 3799
 * @returns {Object} log                                                                                               // 3800
*/                                                                                                                     // 3801
var outputLogFormatter = function(log) {                                                                               // 3802
    if(log.blockNumber !== null)                                                                                       // 3803
        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 3804
    if(log.transactionIndex !== null)                                                                                  // 3805
        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 3806
    if(log.logIndex !== null)                                                                                          // 3807
        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 3808
                                                                                                                       // 3809
    return log;                                                                                                        // 3810
};                                                                                                                     // 3811
                                                                                                                       // 3812
/**                                                                                                                    // 3813
 * Formats the input of a whisper post and converts all values to HEX                                                  // 3814
 *                                                                                                                     // 3815
 * @method inputPostFormatter                                                                                          // 3816
 * @param {Object} transaction object                                                                                  // 3817
 * @returns {Object}                                                                                                   // 3818
*/                                                                                                                     // 3819
var inputPostFormatter = function(post) {                                                                              // 3820
                                                                                                                       // 3821
    // post.payload = utils.toHex(post.payload);                                                                       // 3822
    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 3823
    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 3824
    post.priority = utils.fromDecimal(post.priority);                                                                  // 3825
                                                                                                                       // 3826
    // fallback                                                                                                        // 3827
    if (!utils.isArray(post.topics)) {                                                                                 // 3828
        post.topics = post.topics ? [post.topics] : [];                                                                // 3829
    }                                                                                                                  // 3830
                                                                                                                       // 3831
    // format the following options                                                                                    // 3832
    post.topics = post.topics.map(function(topic){                                                                     // 3833
        // convert only if not hex                                                                                     // 3834
        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);                                            // 3835
    });                                                                                                                // 3836
                                                                                                                       // 3837
    return post;                                                                                                       // 3838
};                                                                                                                     // 3839
                                                                                                                       // 3840
/**                                                                                                                    // 3841
 * Formats the output of a received post message                                                                       // 3842
 *                                                                                                                     // 3843
 * @method outputPostFormatter                                                                                         // 3844
 * @param {Object}                                                                                                     // 3845
 * @returns {Object}                                                                                                   // 3846
 */                                                                                                                    // 3847
var outputPostFormatter = function(post){                                                                              // 3848
                                                                                                                       // 3849
    post.expiry = utils.toDecimal(post.expiry);                                                                        // 3850
    post.sent = utils.toDecimal(post.sent);                                                                            // 3851
    post.ttl = utils.toDecimal(post.ttl);                                                                              // 3852
    post.workProved = utils.toDecimal(post.workProved);                                                                // 3853
    // post.payloadRaw = post.payload;                                                                                 // 3854
    // post.payload = utils.toAscii(post.payload);                                                                     // 3855
                                                                                                                       // 3856
    // if (utils.isJson(post.payload)) {                                                                               // 3857
    //     post.payload = JSON.parse(post.payload);                                                                    // 3858
    // }                                                                                                               // 3859
                                                                                                                       // 3860
    // format the following options                                                                                    // 3861
    if (!post.topics) {                                                                                                // 3862
        post.topics = [];                                                                                              // 3863
    }                                                                                                                  // 3864
    post.topics = post.topics.map(function(topic){                                                                     // 3865
        return utils.toAscii(topic);                                                                                   // 3866
    });                                                                                                                // 3867
                                                                                                                       // 3868
    return post;                                                                                                       // 3869
};                                                                                                                     // 3870
                                                                                                                       // 3871
var inputAddressFormatter = function (address) {                                                                       // 3872
    var iban = new Iban(address);                                                                                      // 3873
    if (iban.isValid() && iban.isDirect()) {                                                                           // 3874
        return '0x' + iban.address();                                                                                  // 3875
    } else if (utils.isStrictAddress(address)) {                                                                       // 3876
        return address;                                                                                                // 3877
    } else if (utils.isAddress(address)) {                                                                             // 3878
        return '0x' + address;                                                                                         // 3879
    }                                                                                                                  // 3880
    throw new Error('invalid address');                                                                                // 3881
};                                                                                                                     // 3882
                                                                                                                       // 3883
                                                                                                                       // 3884
var outputSyncingFormatter = function(result) {                                                                        // 3885
                                                                                                                       // 3886
    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 3887
    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 3888
    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 3889
    if (result.knownStates) {                                                                                          // 3890
        result.knownStates = utils.toDecimal(result.knownStates);                                                      // 3891
        result.pulledStates = utils.toDecimal(result.pulledStates);                                                    // 3892
    }                                                                                                                  // 3893
                                                                                                                       // 3894
    return result;                                                                                                     // 3895
};                                                                                                                     // 3896
                                                                                                                       // 3897
module.exports = {                                                                                                     // 3898
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 3899
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 3900
    inputCallFormatter: inputCallFormatter,                                                                            // 3901
    inputTransactionFormatter: inputTransactionFormatter,                                                              // 3902
    inputAddressFormatter: inputAddressFormatter,                                                                      // 3903
    inputPostFormatter: inputPostFormatter,                                                                            // 3904
    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 3905
    outputTransactionFormatter: outputTransactionFormatter,                                                            // 3906
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 3907
    outputBlockFormatter: outputBlockFormatter,                                                                        // 3908
    outputLogFormatter: outputLogFormatter,                                                                            // 3909
    outputPostFormatter: outputPostFormatter,                                                                          // 3910
    outputSyncingFormatter: outputSyncingFormatter                                                                     // 3911
};                                                                                                                     // 3912
                                                                                                                       // 3913
                                                                                                                       // 3914
},{"../utils/config":18,"../utils/utils":20,"./iban":33}],31:[function(require,module,exports){                        // 3915
/*                                                                                                                     // 3916
    This file is part of web3.js.                                                                                      // 3917
                                                                                                                       // 3918
    web3.js is free software: you can redistribute it and/or modify                                                    // 3919
    it under the terms of the GNU Lesser General Public License as published by                                        // 3920
    the Free Software Foundation, either version 3 of the License, or                                                  // 3921
    (at your option) any later version.                                                                                // 3922
                                                                                                                       // 3923
    web3.js is distributed in the hope that it will be useful,                                                         // 3924
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3925
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3926
    GNU Lesser General Public License for more details.                                                                // 3927
                                                                                                                       // 3928
    You should have received a copy of the GNU Lesser General Public License                                           // 3929
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3930
*/                                                                                                                     // 3931
/**                                                                                                                    // 3932
 * @file function.js                                                                                                   // 3933
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3934
 * @date 2015                                                                                                          // 3935
 */                                                                                                                    // 3936
                                                                                                                       // 3937
var coder = require('../solidity/coder');                                                                              // 3938
var utils = require('../utils/utils');                                                                                 // 3939
var formatters = require('./formatters');                                                                              // 3940
var sha3 = require('../utils/sha3');                                                                                   // 3941
                                                                                                                       // 3942
/**                                                                                                                    // 3943
 * This prototype should be used to call/sendTransaction to solidity functions                                         // 3944
 */                                                                                                                    // 3945
var SolidityFunction = function (eth, json, address) {                                                                 // 3946
    this._eth = eth;                                                                                                   // 3947
    this._inputTypes = json.inputs.map(function (i) {                                                                  // 3948
        return i.type;                                                                                                 // 3949
    });                                                                                                                // 3950
    this._outputTypes = json.outputs.map(function (i) {                                                                // 3951
        return i.type;                                                                                                 // 3952
    });                                                                                                                // 3953
    this._constant = json.constant;                                                                                    // 3954
    this._payable = json.payable;                                                                                      // 3955
    this._name = utils.transformToFullName(json);                                                                      // 3956
    this._address = address;                                                                                           // 3957
};                                                                                                                     // 3958
                                                                                                                       // 3959
SolidityFunction.prototype.extractCallback = function (args) {                                                         // 3960
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 3961
        return args.pop(); // modify the args array!                                                                   // 3962
    }                                                                                                                  // 3963
};                                                                                                                     // 3964
                                                                                                                       // 3965
SolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 3966
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 3967
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 3968
    }                                                                                                                  // 3969
};                                                                                                                     // 3970
                                                                                                                       // 3971
/**                                                                                                                    // 3972
 * Should be used to create payload from arguments                                                                     // 3973
 *                                                                                                                     // 3974
 * @method toPayload                                                                                                   // 3975
 * @param {Array} solidity function params                                                                             // 3976
 * @param {Object} optional payload options                                                                            // 3977
 */                                                                                                                    // 3978
SolidityFunction.prototype.toPayload = function (args) {                                                               // 3979
    var options = {};                                                                                                  // 3980
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 3981
        options = args[args.length - 1];                                                                               // 3982
    }                                                                                                                  // 3983
    options.to = this._address;                                                                                        // 3984
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 3985
    return options;                                                                                                    // 3986
};                                                                                                                     // 3987
                                                                                                                       // 3988
/**                                                                                                                    // 3989
 * Should be used to get function signature                                                                            // 3990
 *                                                                                                                     // 3991
 * @method signature                                                                                                   // 3992
 * @return {String} function signature                                                                                 // 3993
 */                                                                                                                    // 3994
SolidityFunction.prototype.signature = function () {                                                                   // 3995
    return sha3(this._name).slice(0, 8);                                                                               // 3996
};                                                                                                                     // 3997
                                                                                                                       // 3998
                                                                                                                       // 3999
SolidityFunction.prototype.unpackOutput = function (output) {                                                          // 4000
    if (!output) {                                                                                                     // 4001
        return;                                                                                                        // 4002
    }                                                                                                                  // 4003
                                                                                                                       // 4004
    output = output.length >= 2 ? output.slice(2) : output;                                                            // 4005
    var result = coder.decodeParams(this._outputTypes, output);                                                        // 4006
    return result.length === 1 ? result[0] : result;                                                                   // 4007
};                                                                                                                     // 4008
                                                                                                                       // 4009
/**                                                                                                                    // 4010
 * Calls a contract function.                                                                                          // 4011
 *                                                                                                                     // 4012
 * @method call                                                                                                        // 4013
 * @param {...Object} Contract function arguments                                                                      // 4014
 * @param {function} If the last argument is a function, the contract function                                         // 4015
 *   call will be asynchronous, and the callback will be passed the                                                    // 4016
 *   error and result.                                                                                                 // 4017
 * @return {String} output bytes                                                                                       // 4018
 */                                                                                                                    // 4019
SolidityFunction.prototype.call = function () {                                                                        // 4020
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 4021
    var callback = this.extractCallback(args);                                                                         // 4022
    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 4023
    var payload = this.toPayload(args);                                                                                // 4024
                                                                                                                       // 4025
                                                                                                                       // 4026
    if (!callback) {                                                                                                   // 4027
        var output = this._eth.call(payload, defaultBlock);                                                            // 4028
        return this.unpackOutput(output);                                                                              // 4029
    }                                                                                                                  // 4030
                                                                                                                       // 4031
    var self = this;                                                                                                   // 4032
    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 4033
        if (error) return callback(error, null);                                                                       // 4034
                                                                                                                       // 4035
        var unpacked = null;                                                                                           // 4036
        try {                                                                                                          // 4037
            unpacked = self.unpackOutput(output);                                                                      // 4038
        }                                                                                                              // 4039
        catch (e) {                                                                                                    // 4040
            error = e;                                                                                                 // 4041
        }                                                                                                              // 4042
                                                                                                                       // 4043
        callback(error, unpacked);                                                                                     // 4044
    });                                                                                                                // 4045
};                                                                                                                     // 4046
                                                                                                                       // 4047
/**                                                                                                                    // 4048
 * Should be used to sendTransaction to solidity function                                                              // 4049
 *                                                                                                                     // 4050
 * @method sendTransaction                                                                                             // 4051
 */                                                                                                                    // 4052
SolidityFunction.prototype.sendTransaction = function () {                                                             // 4053
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 4054
    var callback = this.extractCallback(args);                                                                         // 4055
    var payload = this.toPayload(args);                                                                                // 4056
                                                                                                                       // 4057
    if (payload.value > 0 && !this._payable) {                                                                         // 4058
        throw new Error('Cannot send value to non-payable function');                                                  // 4059
    }                                                                                                                  // 4060
                                                                                                                       // 4061
    if (!callback) {                                                                                                   // 4062
        return this._eth.sendTransaction(payload);                                                                     // 4063
    }                                                                                                                  // 4064
                                                                                                                       // 4065
    this._eth.sendTransaction(payload, callback);                                                                      // 4066
};                                                                                                                     // 4067
                                                                                                                       // 4068
/**                                                                                                                    // 4069
 * Should be used to estimateGas of solidity function                                                                  // 4070
 *                                                                                                                     // 4071
 * @method estimateGas                                                                                                 // 4072
 */                                                                                                                    // 4073
SolidityFunction.prototype.estimateGas = function () {                                                                 // 4074
    var args = Array.prototype.slice.call(arguments);                                                                  // 4075
    var callback = this.extractCallback(args);                                                                         // 4076
    var payload = this.toPayload(args);                                                                                // 4077
                                                                                                                       // 4078
    if (!callback) {                                                                                                   // 4079
        return this._eth.estimateGas(payload);                                                                         // 4080
    }                                                                                                                  // 4081
                                                                                                                       // 4082
    this._eth.estimateGas(payload, callback);                                                                          // 4083
};                                                                                                                     // 4084
                                                                                                                       // 4085
/**                                                                                                                    // 4086
 * Return the encoded data of the call                                                                                 // 4087
 *                                                                                                                     // 4088
 * @method getData                                                                                                     // 4089
 * @return {String} the encoded data                                                                                   // 4090
 */                                                                                                                    // 4091
SolidityFunction.prototype.getData = function () {                                                                     // 4092
    var args = Array.prototype.slice.call(arguments);                                                                  // 4093
    var payload = this.toPayload(args);                                                                                // 4094
                                                                                                                       // 4095
    return payload.data;                                                                                               // 4096
};                                                                                                                     // 4097
                                                                                                                       // 4098
/**                                                                                                                    // 4099
 * Should be used to get function display name                                                                         // 4100
 *                                                                                                                     // 4101
 * @method displayName                                                                                                 // 4102
 * @return {String} display name of the function                                                                       // 4103
 */                                                                                                                    // 4104
SolidityFunction.prototype.displayName = function () {                                                                 // 4105
    return utils.extractDisplayName(this._name);                                                                       // 4106
};                                                                                                                     // 4107
                                                                                                                       // 4108
/**                                                                                                                    // 4109
 * Should be used to get function type name                                                                            // 4110
 *                                                                                                                     // 4111
 * @method typeName                                                                                                    // 4112
 * @return {String} type name of the function                                                                          // 4113
 */                                                                                                                    // 4114
SolidityFunction.prototype.typeName = function () {                                                                    // 4115
    return utils.extractTypeName(this._name);                                                                          // 4116
};                                                                                                                     // 4117
                                                                                                                       // 4118
/**                                                                                                                    // 4119
 * Should be called to get rpc requests from solidity function                                                         // 4120
 *                                                                                                                     // 4121
 * @method request                                                                                                     // 4122
 * @returns {Object}                                                                                                   // 4123
 */                                                                                                                    // 4124
SolidityFunction.prototype.request = function () {                                                                     // 4125
    var args = Array.prototype.slice.call(arguments);                                                                  // 4126
    var callback = this.extractCallback(args);                                                                         // 4127
    var payload = this.toPayload(args);                                                                                // 4128
    var format = this.unpackOutput.bind(this);                                                                         // 4129
                                                                                                                       // 4130
    return {                                                                                                           // 4131
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 4132
        callback: callback,                                                                                            // 4133
        params: [payload],                                                                                             // 4134
        format: format                                                                                                 // 4135
    };                                                                                                                 // 4136
};                                                                                                                     // 4137
                                                                                                                       // 4138
/**                                                                                                                    // 4139
 * Should be called to execute function                                                                                // 4140
 *                                                                                                                     // 4141
 * @method execute                                                                                                     // 4142
 */                                                                                                                    // 4143
SolidityFunction.prototype.execute = function () {                                                                     // 4144
    var transaction = !this._constant;                                                                                 // 4145
                                                                                                                       // 4146
    // send transaction                                                                                                // 4147
    if (transaction) {                                                                                                 // 4148
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 4149
    }                                                                                                                  // 4150
                                                                                                                       // 4151
    // call                                                                                                            // 4152
    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 4153
};                                                                                                                     // 4154
                                                                                                                       // 4155
/**                                                                                                                    // 4156
 * Should be called to attach function to contract                                                                     // 4157
 *                                                                                                                     // 4158
 * @method attachToContract                                                                                            // 4159
 * @param {Contract}                                                                                                   // 4160
 */                                                                                                                    // 4161
SolidityFunction.prototype.attachToContract = function (contract) {                                                    // 4162
    var execute = this.execute.bind(this);                                                                             // 4163
    execute.request = this.request.bind(this);                                                                         // 4164
    execute.call = this.call.bind(this);                                                                               // 4165
    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 4166
    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 4167
    execute.getData = this.getData.bind(this);                                                                         // 4168
    var displayName = this.displayName();                                                                              // 4169
    if (!contract[displayName]) {                                                                                      // 4170
        contract[displayName] = execute;                                                                               // 4171
    }                                                                                                                  // 4172
    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 4173
};                                                                                                                     // 4174
                                                                                                                       // 4175
module.exports = SolidityFunction;                                                                                     // 4176
                                                                                                                       // 4177
                                                                                                                       // 4178
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./formatters":30}],32:[function(require,module,exports){
/*                                                                                                                     // 4180
    This file is part of web3.js.                                                                                      // 4181
                                                                                                                       // 4182
    web3.js is free software: you can redistribute it and/or modify                                                    // 4183
    it under the terms of the GNU Lesser General Public License as published by                                        // 4184
    the Free Software Foundation, either version 3 of the License, or                                                  // 4185
    (at your option) any later version.                                                                                // 4186
                                                                                                                       // 4187
    web3.js is distributed in the hope that it will be useful,                                                         // 4188
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4189
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4190
    GNU Lesser General Public License for more details.                                                                // 4191
                                                                                                                       // 4192
    You should have received a copy of the GNU Lesser General Public License                                           // 4193
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4194
*/                                                                                                                     // 4195
/** @file httpprovider.js                                                                                              // 4196
 * @authors:                                                                                                           // 4197
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4198
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 4199
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4200
 * @date 2015                                                                                                          // 4201
 */                                                                                                                    // 4202
                                                                                                                       // 4203
                                                                                                                       // 4204
var errors = require('./errors');                                                                                      // 4205
                                                                                                                       // 4206
// workaround to use httpprovider in different envs                                                                    // 4207
                                                                                                                       // 4208
// browser                                                                                                             // 4209
if (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                          // 4210
    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                     // 4211
// node                                                                                                                // 4212
} else {                                                                                                               // 4213
    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                  // 4214
}                                                                                                                      // 4215
                                                                                                                       // 4216
var XHR2 = require('xhr2'); // jshint ignore: line                                                                     // 4217
                                                                                                                       // 4218
/**                                                                                                                    // 4219
 * HttpProvider should be used to send rpc calls over http                                                             // 4220
 */                                                                                                                    // 4221
var HttpProvider = function (host, timeout) {                                                                          // 4222
    this.host = host || 'http://localhost:8545';                                                                       // 4223
    this.timeout = timeout || 0;                                                                                       // 4224
};                                                                                                                     // 4225
                                                                                                                       // 4226
/**                                                                                                                    // 4227
 * Should be called to prepare new XMLHttpRequest                                                                      // 4228
 *                                                                                                                     // 4229
 * @method prepareRequest                                                                                              // 4230
 * @param {Boolean} true if request should be async                                                                    // 4231
 * @return {XMLHttpRequest} object                                                                                     // 4232
 */                                                                                                                    // 4233
HttpProvider.prototype.prepareRequest = function (async) {                                                             // 4234
    var request;                                                                                                       // 4235
                                                                                                                       // 4236
    if (async) {                                                                                                       // 4237
      request = new XHR2();                                                                                            // 4238
      request.timeout = this.timeout;                                                                                  // 4239
    }else {                                                                                                            // 4240
      request = new XMLHttpRequest();                                                                                  // 4241
    }                                                                                                                  // 4242
                                                                                                                       // 4243
    request.open('POST', this.host, async);                                                                            // 4244
    request.setRequestHeader('Content-Type','application/json');                                                       // 4245
    return request;                                                                                                    // 4246
};                                                                                                                     // 4247
                                                                                                                       // 4248
/**                                                                                                                    // 4249
 * Should be called to make sync request                                                                               // 4250
 *                                                                                                                     // 4251
 * @method send                                                                                                        // 4252
 * @param {Object} payload                                                                                             // 4253
 * @return {Object} result                                                                                             // 4254
 */                                                                                                                    // 4255
HttpProvider.prototype.send = function (payload) {                                                                     // 4256
    var request = this.prepareRequest(false);                                                                          // 4257
                                                                                                                       // 4258
    try {                                                                                                              // 4259
        request.send(JSON.stringify(payload));                                                                         // 4260
    } catch(error) {                                                                                                   // 4261
        throw errors.InvalidConnection(this.host);                                                                     // 4262
    }                                                                                                                  // 4263
                                                                                                                       // 4264
    var result = request.responseText;                                                                                 // 4265
                                                                                                                       // 4266
    try {                                                                                                              // 4267
        result = JSON.parse(result);                                                                                   // 4268
    } catch(e) {                                                                                                       // 4269
        throw errors.InvalidResponse(request.responseText);                                                            // 4270
    }                                                                                                                  // 4271
                                                                                                                       // 4272
    return result;                                                                                                     // 4273
};                                                                                                                     // 4274
                                                                                                                       // 4275
/**                                                                                                                    // 4276
 * Should be used to make async request                                                                                // 4277
 *                                                                                                                     // 4278
 * @method sendAsync                                                                                                   // 4279
 * @param {Object} payload                                                                                             // 4280
 * @param {Function} callback triggered on end with (err, result)                                                      // 4281
 */                                                                                                                    // 4282
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 4283
    var request = this.prepareRequest(true);                                                                           // 4284
                                                                                                                       // 4285
    request.onreadystatechange = function() {                                                                          // 4286
        if (request.readyState === 4 && request.timeout !== 1) {                                                       // 4287
            var result = request.responseText;                                                                         // 4288
            var error = null;                                                                                          // 4289
                                                                                                                       // 4290
            try {                                                                                                      // 4291
                result = JSON.parse(result);                                                                           // 4292
            } catch(e) {                                                                                               // 4293
                error = errors.InvalidResponse(request.responseText);                                                  // 4294
            }                                                                                                          // 4295
                                                                                                                       // 4296
            callback(error, result);                                                                                   // 4297
        }                                                                                                              // 4298
    };                                                                                                                 // 4299
                                                                                                                       // 4300
    request.ontimeout = function() {                                                                                   // 4301
      callback(errors.ConnectionTimeout(this.timeout));                                                                // 4302
    };                                                                                                                 // 4303
                                                                                                                       // 4304
    try {                                                                                                              // 4305
        request.send(JSON.stringify(payload));                                                                         // 4306
    } catch(error) {                                                                                                   // 4307
        callback(errors.InvalidConnection(this.host));                                                                 // 4308
    }                                                                                                                  // 4309
};                                                                                                                     // 4310
                                                                                                                       // 4311
/**                                                                                                                    // 4312
 * Synchronously tries to make Http request                                                                            // 4313
 *                                                                                                                     // 4314
 * @method isConnected                                                                                                 // 4315
 * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 4316
 */                                                                                                                    // 4317
HttpProvider.prototype.isConnected = function() {                                                                      // 4318
    try {                                                                                                              // 4319
        this.send({                                                                                                    // 4320
            id: 9999999999,                                                                                            // 4321
            jsonrpc: '2.0',                                                                                            // 4322
            method: 'net_listening',                                                                                   // 4323
            params: []                                                                                                 // 4324
        });                                                                                                            // 4325
        return true;                                                                                                   // 4326
    } catch(e) {                                                                                                       // 4327
        return false;                                                                                                  // 4328
    }                                                                                                                  // 4329
};                                                                                                                     // 4330
                                                                                                                       // 4331
module.exports = HttpProvider;                                                                                         // 4332
                                                                                                                       // 4333
},{"./errors":26,"xhr2":86,"xmlhttprequest":17}],33:[function(require,module,exports){                                 // 4334
/*                                                                                                                     // 4335
    This file is part of web3.js.                                                                                      // 4336
                                                                                                                       // 4337
    web3.js is free software: you can redistribute it and/or modify                                                    // 4338
    it under the terms of the GNU Lesser General Public License as published by                                        // 4339
    the Free Software Foundation, either version 3 of the License, or                                                  // 4340
    (at your option) any later version.                                                                                // 4341
                                                                                                                       // 4342
    web3.js is distributed in the hope that it will be useful,                                                         // 4343
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4344
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4345
    GNU Lesser General Public License for more details.                                                                // 4346
                                                                                                                       // 4347
    You should have received a copy of the GNU Lesser General Public License                                           // 4348
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4349
*/                                                                                                                     // 4350
/**                                                                                                                    // 4351
 * @file iban.js                                                                                                       // 4352
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4353
 * @date 2015                                                                                                          // 4354
 */                                                                                                                    // 4355
                                                                                                                       // 4356
var BigNumber = require('bignumber.js');                                                                               // 4357
                                                                                                                       // 4358
var padLeft = function (string, bytes) {                                                                               // 4359
    var result = string;                                                                                               // 4360
    while (result.length < bytes * 2) {                                                                                // 4361
        result = '0' + result;                                                                                         // 4362
    }                                                                                                                  // 4363
    return result;                                                                                                     // 4364
};                                                                                                                     // 4365
                                                                                                                       // 4366
/**                                                                                                                    // 4367
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 4368
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 4369
 *                                                                                                                     // 4370
 * @method iso13616Prepare                                                                                             // 4371
 * @param {String} iban the IBAN                                                                                       // 4372
 * @returns {String} the prepared IBAN                                                                                 // 4373
 */                                                                                                                    // 4374
var iso13616Prepare = function (iban) {                                                                                // 4375
    var A = 'A'.charCodeAt(0);                                                                                         // 4376
    var Z = 'Z'.charCodeAt(0);                                                                                         // 4377
                                                                                                                       // 4378
    iban = iban.toUpperCase();                                                                                         // 4379
    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 4380
                                                                                                                       // 4381
    return iban.split('').map(function(n){                                                                             // 4382
        var code = n.charCodeAt(0);                                                                                    // 4383
        if (code >= A && code <= Z){                                                                                   // 4384
            // A = 10, B = 11, ... Z = 35                                                                              // 4385
            return code - A + 10;                                                                                      // 4386
        } else {                                                                                                       // 4387
            return n;                                                                                                  // 4388
        }                                                                                                              // 4389
    }).join('');                                                                                                       // 4390
};                                                                                                                     // 4391
                                                                                                                       // 4392
/**                                                                                                                    // 4393
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 4394
 *                                                                                                                     // 4395
 * @method mod9710                                                                                                     // 4396
 * @param {String} iban                                                                                                // 4397
 * @returns {Number}                                                                                                   // 4398
 */                                                                                                                    // 4399
var mod9710 = function (iban) {                                                                                        // 4400
    var remainder = iban,                                                                                              // 4401
        block;                                                                                                         // 4402
                                                                                                                       // 4403
    while (remainder.length > 2){                                                                                      // 4404
        block = remainder.slice(0, 9);                                                                                 // 4405
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 4406
    }                                                                                                                  // 4407
                                                                                                                       // 4408
    return parseInt(remainder, 10) % 97;                                                                               // 4409
};                                                                                                                     // 4410
                                                                                                                       // 4411
/**                                                                                                                    // 4412
 * This prototype should be used to create iban object from iban correct string                                        // 4413
 *                                                                                                                     // 4414
 * @param {String} iban                                                                                                // 4415
 */                                                                                                                    // 4416
var Iban = function (iban) {                                                                                           // 4417
    this._iban = iban;                                                                                                 // 4418
};                                                                                                                     // 4419
                                                                                                                       // 4420
/**                                                                                                                    // 4421
 * This method should be used to create iban object from ethereum address                                              // 4422
 *                                                                                                                     // 4423
 * @method fromAddress                                                                                                 // 4424
 * @param {String} address                                                                                             // 4425
 * @return {Iban} the IBAN object                                                                                      // 4426
 */                                                                                                                    // 4427
Iban.fromAddress = function (address) {                                                                                // 4428
    var asBn = new BigNumber(address, 16);                                                                             // 4429
    var base36 = asBn.toString(36);                                                                                    // 4430
    var padded = padLeft(base36, 15);                                                                                  // 4431
    return Iban.fromBban(padded.toUpperCase());                                                                        // 4432
};                                                                                                                     // 4433
                                                                                                                       // 4434
/**                                                                                                                    // 4435
 * Convert the passed BBAN to an IBAN for this country specification.                                                  // 4436
 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
 *                                                                                                                     // 4439
 * @method fromBban                                                                                                    // 4440
 * @param {String} bban the BBAN to convert to IBAN                                                                    // 4441
 * @returns {Iban} the IBAN object                                                                                     // 4442
 */                                                                                                                    // 4443
Iban.fromBban = function (bban) {                                                                                      // 4444
    var countryCode = 'XE';                                                                                            // 4445
                                                                                                                       // 4446
    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 4447
    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 4448
                                                                                                                       // 4449
    return new Iban(countryCode + checkDigit + bban);                                                                  // 4450
};                                                                                                                     // 4451
                                                                                                                       // 4452
/**                                                                                                                    // 4453
 * Should be used to create IBAN object for given institution and identifier                                           // 4454
 *                                                                                                                     // 4455
 * @method createIndirect                                                                                              // 4456
 * @param {Object} options, required options are "institution" and "identifier"                                        // 4457
 * @return {Iban} the IBAN object                                                                                      // 4458
 */                                                                                                                    // 4459
Iban.createIndirect = function (options) {                                                                             // 4460
    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 4461
};                                                                                                                     // 4462
                                                                                                                       // 4463
/**                                                                                                                    // 4464
 * Thos method should be used to check if given string is valid iban object                                            // 4465
 *                                                                                                                     // 4466
 * @method isValid                                                                                                     // 4467
 * @param {String} iban string                                                                                         // 4468
 * @return {Boolean} true if it is valid IBAN                                                                          // 4469
 */                                                                                                                    // 4470
Iban.isValid = function (iban) {                                                                                       // 4471
    var i = new Iban(iban);                                                                                            // 4472
    return i.isValid();                                                                                                // 4473
};                                                                                                                     // 4474
                                                                                                                       // 4475
/**                                                                                                                    // 4476
 * Should be called to check if iban is correct                                                                        // 4477
 *                                                                                                                     // 4478
 * @method isValid                                                                                                     // 4479
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4480
 */                                                                                                                    // 4481
Iban.prototype.isValid = function () {                                                                                 // 4482
    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 4483
        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 4484
};                                                                                                                     // 4485
                                                                                                                       // 4486
/**                                                                                                                    // 4487
 * Should be called to check if iban number is direct                                                                  // 4488
 *                                                                                                                     // 4489
 * @method isDirect                                                                                                    // 4490
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4491
 */                                                                                                                    // 4492
Iban.prototype.isDirect = function () {                                                                                // 4493
    return this._iban.length === 34 || this._iban.length === 35;                                                       // 4494
};                                                                                                                     // 4495
                                                                                                                       // 4496
/**                                                                                                                    // 4497
 * Should be called to check if iban number if indirect                                                                // 4498
 *                                                                                                                     // 4499
 * @method isIndirect                                                                                                  // 4500
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4501
 */                                                                                                                    // 4502
Iban.prototype.isIndirect = function () {                                                                              // 4503
    return this._iban.length === 20;                                                                                   // 4504
};                                                                                                                     // 4505
                                                                                                                       // 4506
/**                                                                                                                    // 4507
 * Should be called to get iban checksum                                                                               // 4508
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 4509
 *                                                                                                                     // 4510
 * @method checksum                                                                                                    // 4511
 * @returns {String} checksum                                                                                          // 4512
 */                                                                                                                    // 4513
Iban.prototype.checksum = function () {                                                                                // 4514
    return this._iban.substr(2, 2);                                                                                    // 4515
};                                                                                                                     // 4516
                                                                                                                       // 4517
/**                                                                                                                    // 4518
 * Should be called to get institution identifier                                                                      // 4519
 * eg. XREG                                                                                                            // 4520
 *                                                                                                                     // 4521
 * @method institution                                                                                                 // 4522
 * @returns {String} institution identifier                                                                            // 4523
 */                                                                                                                    // 4524
Iban.prototype.institution = function () {                                                                             // 4525
    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 4526
};                                                                                                                     // 4527
                                                                                                                       // 4528
/**                                                                                                                    // 4529
 * Should be called to get client identifier within institution                                                        // 4530
 * eg. GAVOFYORK                                                                                                       // 4531
 *                                                                                                                     // 4532
 * @method client                                                                                                      // 4533
 * @returns {String} client identifier                                                                                 // 4534
 */                                                                                                                    // 4535
Iban.prototype.client = function () {                                                                                  // 4536
    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 4537
};                                                                                                                     // 4538
                                                                                                                       // 4539
/**                                                                                                                    // 4540
 * Should be called to get client direct address                                                                       // 4541
 *                                                                                                                     // 4542
 * @method address                                                                                                     // 4543
 * @returns {String} client direct address                                                                             // 4544
 */                                                                                                                    // 4545
Iban.prototype.address = function () {                                                                                 // 4546
    if (this.isDirect()) {                                                                                             // 4547
        var base36 = this._iban.substr(4);                                                                             // 4548
        var asBn = new BigNumber(base36, 36);                                                                          // 4549
        return padLeft(asBn.toString(16), 20);                                                                         // 4550
    }                                                                                                                  // 4551
                                                                                                                       // 4552
    return '';                                                                                                         // 4553
};                                                                                                                     // 4554
                                                                                                                       // 4555
Iban.prototype.toString = function () {                                                                                // 4556
    return this._iban;                                                                                                 // 4557
};                                                                                                                     // 4558
                                                                                                                       // 4559
module.exports = Iban;                                                                                                 // 4560
                                                                                                                       // 4561
                                                                                                                       // 4562
},{"bignumber.js":"bignumber.js"}],34:[function(require,module,exports){                                               // 4563
/*                                                                                                                     // 4564
    This file is part of web3.js.                                                                                      // 4565
                                                                                                                       // 4566
    web3.js is free software: you can redistribute it and/or modify                                                    // 4567
    it under the terms of the GNU Lesser General Public License as published by                                        // 4568
    the Free Software Foundation, either version 3 of the License, or                                                  // 4569
    (at your option) any later version.                                                                                // 4570
                                                                                                                       // 4571
    web3.js is distributed in the hope that it will be useful,                                                         // 4572
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4573
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4574
    GNU Lesser General Public License for more details.                                                                // 4575
                                                                                                                       // 4576
    You should have received a copy of the GNU Lesser General Public License                                           // 4577
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4578
*/                                                                                                                     // 4579
/** @file ipcprovider.js                                                                                               // 4580
 * @authors:                                                                                                           // 4581
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4582
 * @date 2015                                                                                                          // 4583
 */                                                                                                                    // 4584
                                                                                                                       // 4585
"use strict";                                                                                                          // 4586
                                                                                                                       // 4587
var utils = require('../utils/utils');                                                                                 // 4588
var errors = require('./errors');                                                                                      // 4589
                                                                                                                       // 4590
                                                                                                                       // 4591
var IpcProvider = function (path, net) {                                                                               // 4592
    var _this = this;                                                                                                  // 4593
    this.responseCallbacks = {};                                                                                       // 4594
    this.path = path;                                                                                                  // 4595
                                                                                                                       // 4596
    this.connection = net.connect({path: this.path});                                                                  // 4597
                                                                                                                       // 4598
    this.connection.on('error', function(e){                                                                           // 4599
        console.error('IPC Connection Error', e);                                                                      // 4600
        _this._timeout();                                                                                              // 4601
    });                                                                                                                // 4602
                                                                                                                       // 4603
    this.connection.on('end', function(){                                                                              // 4604
        _this._timeout();                                                                                              // 4605
    });                                                                                                                // 4606
                                                                                                                       // 4607
                                                                                                                       // 4608
    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 4609
    this.connection.on('data', function(data) {                                                                        // 4610
        /*jshint maxcomplexity: 6 */                                                                                   // 4611
                                                                                                                       // 4612
        _this._parseResponse(data.toString()).forEach(function(result){                                                // 4613
                                                                                                                       // 4614
            var id = null;                                                                                             // 4615
                                                                                                                       // 4616
            // get the id which matches the returned id                                                                // 4617
            if(utils.isArray(result)) {                                                                                // 4618
                result.forEach(function(load){                                                                         // 4619
                    if(_this.responseCallbacks[load.id])                                                               // 4620
                        id = load.id;                                                                                  // 4621
                });                                                                                                    // 4622
            } else {                                                                                                   // 4623
                id = result.id;                                                                                        // 4624
            }                                                                                                          // 4625
                                                                                                                       // 4626
            // fire the callback                                                                                       // 4627
            if(_this.responseCallbacks[id]) {                                                                          // 4628
                _this.responseCallbacks[id](null, result);                                                             // 4629
                delete _this.responseCallbacks[id];                                                                    // 4630
            }                                                                                                          // 4631
        });                                                                                                            // 4632
    });                                                                                                                // 4633
};                                                                                                                     // 4634
                                                                                                                       // 4635
/**                                                                                                                    // 4636
Will parse the response and make an array out of it.                                                                   // 4637
                                                                                                                       // 4638
@method _parseResponse                                                                                                 // 4639
@param {String} data                                                                                                   // 4640
*/                                                                                                                     // 4641
IpcProvider.prototype._parseResponse = function(data) {                                                                // 4642
    var _this = this,                                                                                                  // 4643
        returnValues = [];                                                                                             // 4644
                                                                                                                       // 4645
    // DE-CHUNKER                                                                                                      // 4646
    var dechunkedData = data                                                                                           // 4647
        .replace(/\}[\n\r]?\{/g,'}|--|{') // }{                                                                        // 4648
        .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{                                                                // 4649
        .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{                                                                    // 4650
        .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{                                                                    // 4651
        .split('|--|');                                                                                                // 4652
                                                                                                                       // 4653
    dechunkedData.forEach(function(data){                                                                              // 4654
                                                                                                                       // 4655
        // prepend the last chunk                                                                                      // 4656
        if(_this.lastChunk)                                                                                            // 4657
            data = _this.lastChunk + data;                                                                             // 4658
                                                                                                                       // 4659
        var result = null;                                                                                             // 4660
                                                                                                                       // 4661
        try {                                                                                                          // 4662
            result = JSON.parse(data);                                                                                 // 4663
                                                                                                                       // 4664
        } catch(e) {                                                                                                   // 4665
                                                                                                                       // 4666
            _this.lastChunk = data;                                                                                    // 4667
                                                                                                                       // 4668
            // start timeout to cancel all requests                                                                    // 4669
            clearTimeout(_this.lastChunkTimeout);                                                                      // 4670
            _this.lastChunkTimeout = setTimeout(function(){                                                            // 4671
                _this._timeout();                                                                                      // 4672
                throw errors.InvalidResponse(data);                                                                    // 4673
            }, 1000 * 15);                                                                                             // 4674
                                                                                                                       // 4675
            return;                                                                                                    // 4676
        }                                                                                                              // 4677
                                                                                                                       // 4678
        // cancel timeout and set chunk to null                                                                        // 4679
        clearTimeout(_this.lastChunkTimeout);                                                                          // 4680
        _this.lastChunk = null;                                                                                        // 4681
                                                                                                                       // 4682
        if(result)                                                                                                     // 4683
            returnValues.push(result);                                                                                 // 4684
    });                                                                                                                // 4685
                                                                                                                       // 4686
    return returnValues;                                                                                               // 4687
};                                                                                                                     // 4688
                                                                                                                       // 4689
                                                                                                                       // 4690
/**                                                                                                                    // 4691
Get the adds a callback to the responseCallbacks object,                                                               // 4692
which will be called if a response matching the response Id will arrive.                                               // 4693
                                                                                                                       // 4694
@method _addResponseCallback                                                                                           // 4695
*/                                                                                                                     // 4696
IpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 4697
    var id = payload.id || payload[0].id;                                                                              // 4698
    var method = payload.method || payload[0].method;                                                                  // 4699
                                                                                                                       // 4700
    this.responseCallbacks[id] = callback;                                                                             // 4701
    this.responseCallbacks[id].method = method;                                                                        // 4702
};                                                                                                                     // 4703
                                                                                                                       // 4704
/**                                                                                                                    // 4705
Timeout all requests when the end/error event is fired                                                                 // 4706
                                                                                                                       // 4707
@method _timeout                                                                                                       // 4708
*/                                                                                                                     // 4709
IpcProvider.prototype._timeout = function() {                                                                          // 4710
    for(var key in this.responseCallbacks) {                                                                           // 4711
        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 4712
            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 4713
            delete this.responseCallbacks[key];                                                                        // 4714
        }                                                                                                              // 4715
    }                                                                                                                  // 4716
};                                                                                                                     // 4717
                                                                                                                       // 4718
                                                                                                                       // 4719
/**                                                                                                                    // 4720
Check if the current connection is still valid.                                                                        // 4721
                                                                                                                       // 4722
@method isConnected                                                                                                    // 4723
*/                                                                                                                     // 4724
IpcProvider.prototype.isConnected = function() {                                                                       // 4725
    var _this = this;                                                                                                  // 4726
                                                                                                                       // 4727
    // try reconnect, when connection is gone                                                                          // 4728
    if(!_this.connection.writable)                                                                                     // 4729
        _this.connection.connect({path: _this.path});                                                                  // 4730
                                                                                                                       // 4731
    return !!this.connection.writable;                                                                                 // 4732
};                                                                                                                     // 4733
                                                                                                                       // 4734
IpcProvider.prototype.send = function (payload) {                                                                      // 4735
                                                                                                                       // 4736
    if(this.connection.writeSync) {                                                                                    // 4737
        var result;                                                                                                    // 4738
                                                                                                                       // 4739
        // try reconnect, when connection is gone                                                                      // 4740
        if(!this.connection.writable)                                                                                  // 4741
            this.connection.connect({path: this.path});                                                                // 4742
                                                                                                                       // 4743
        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 4744
                                                                                                                       // 4745
        try {                                                                                                          // 4746
            result = JSON.parse(data);                                                                                 // 4747
        } catch(e) {                                                                                                   // 4748
            throw errors.InvalidResponse(data);                                                                        // 4749
        }                                                                                                              // 4750
                                                                                                                       // 4751
        return result;                                                                                                 // 4752
                                                                                                                       // 4753
    } else {                                                                                                           // 4754
        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
    }                                                                                                                  // 4756
};                                                                                                                     // 4757
                                                                                                                       // 4758
IpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 4759
    // try reconnect, when connection is gone                                                                          // 4760
    if(!this.connection.writable)                                                                                      // 4761
        this.connection.connect({path: this.path});                                                                    // 4762
                                                                                                                       // 4763
                                                                                                                       // 4764
    this.connection.write(JSON.stringify(payload));                                                                    // 4765
    this._addResponseCallback(payload, callback);                                                                      // 4766
};                                                                                                                     // 4767
                                                                                                                       // 4768
module.exports = IpcProvider;                                                                                          // 4769
                                                                                                                       // 4770
                                                                                                                       // 4771
},{"../utils/utils":20,"./errors":26}],35:[function(require,module,exports){                                           // 4772
/*                                                                                                                     // 4773
    This file is part of web3.js.                                                                                      // 4774
                                                                                                                       // 4775
    web3.js is free software: you can redistribute it and/or modify                                                    // 4776
    it under the terms of the GNU Lesser General Public License as published by                                        // 4777
    the Free Software Foundation, either version 3 of the License, or                                                  // 4778
    (at your option) any later version.                                                                                // 4779
                                                                                                                       // 4780
    web3.js is distributed in the hope that it will be useful,                                                         // 4781
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4782
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4783
    GNU Lesser General Public License for more details.                                                                // 4784
                                                                                                                       // 4785
    You should have received a copy of the GNU Lesser General Public License                                           // 4786
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4787
*/                                                                                                                     // 4788
/** @file jsonrpc.js                                                                                                   // 4789
 * @authors:                                                                                                           // 4790
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4791
 *   Aaron Kumavis <aaron@kumavis.me>                                                                                  // 4792
 * @date 2015                                                                                                          // 4793
 */                                                                                                                    // 4794
                                                                                                                       // 4795
// Initialize Jsonrpc as a simple object with utility functions.                                                       // 4796
var Jsonrpc = {                                                                                                        // 4797
    messageId: 0                                                                                                       // 4798
};                                                                                                                     // 4799
                                                                                                                       // 4800
/**                                                                                                                    // 4801
 * Should be called to valid json create payload object                                                                // 4802
 *                                                                                                                     // 4803
 * @method toPayload                                                                                                   // 4804
 * @param {Function} method of jsonrpc call, required                                                                  // 4805
 * @param {Array} params, an array of method params, optional                                                          // 4806
 * @returns {Object} valid jsonrpc payload object                                                                      // 4807
 */                                                                                                                    // 4808
Jsonrpc.toPayload = function (method, params) {                                                                        // 4809
    if (!method)                                                                                                       // 4810
        console.error('jsonrpc method should be specified!');                                                          // 4811
                                                                                                                       // 4812
    // advance message ID                                                                                              // 4813
    Jsonrpc.messageId++;                                                                                               // 4814
                                                                                                                       // 4815
    return {                                                                                                           // 4816
        jsonrpc: '2.0',                                                                                                // 4817
        id: Jsonrpc.messageId,                                                                                         // 4818
        method: method,                                                                                                // 4819
        params: params || []                                                                                           // 4820
    };                                                                                                                 // 4821
};                                                                                                                     // 4822
                                                                                                                       // 4823
/**                                                                                                                    // 4824
 * Should be called to check if jsonrpc response is valid                                                              // 4825
 *                                                                                                                     // 4826
 * @method isValidResponse                                                                                             // 4827
 * @param {Object}                                                                                                     // 4828
 * @returns {Boolean} true if response is valid, otherwise false                                                       // 4829
 */                                                                                                                    // 4830
Jsonrpc.isValidResponse = function (response) {                                                                        // 4831
    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);          // 4832
                                                                                                                       // 4833
    function validateSingleMessage(message){                                                                           // 4834
      return !!message &&                                                                                              // 4835
        !message.error &&                                                                                              // 4836
        message.jsonrpc === '2.0' &&                                                                                   // 4837
        typeof message.id === 'number' &&                                                                              // 4838
        message.result !== undefined; // only undefined is not valid json object                                       // 4839
    }                                                                                                                  // 4840
};                                                                                                                     // 4841
                                                                                                                       // 4842
/**                                                                                                                    // 4843
 * Should be called to create batch payload object                                                                     // 4844
 *                                                                                                                     // 4845
 * @method toBatchPayload                                                                                              // 4846
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 4847
 * @returns {Array} batch payload                                                                                      // 4848
 */                                                                                                                    // 4849
Jsonrpc.toBatchPayload = function (messages) {                                                                         // 4850
    return messages.map(function (message) {                                                                           // 4851
        return Jsonrpc.toPayload(message.method, message.params);                                                      // 4852
    });                                                                                                                // 4853
};                                                                                                                     // 4854
                                                                                                                       // 4855
module.exports = Jsonrpc;                                                                                              // 4856
                                                                                                                       // 4857
                                                                                                                       // 4858
},{}],36:[function(require,module,exports){                                                                            // 4859
/*                                                                                                                     // 4860
    This file is part of web3.js.                                                                                      // 4861
                                                                                                                       // 4862
    web3.js is free software: you can redistribute it and/or modify                                                    // 4863
    it under the terms of the GNU Lesser General Public License as published by                                        // 4864
    the Free Software Foundation, either version 3 of the License, or                                                  // 4865
    (at your option) any later version.                                                                                // 4866
                                                                                                                       // 4867
    web3.js is distributed in the hope that it will be useful,                                                         // 4868
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4869
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4870
    GNU Lesser General Public License for more details.                                                                // 4871
                                                                                                                       // 4872
    You should have received a copy of the GNU Lesser General Public License                                           // 4873
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4874
*/                                                                                                                     // 4875
/**                                                                                                                    // 4876
 * @file method.js                                                                                                     // 4877
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4878
 * @date 2015                                                                                                          // 4879
 */                                                                                                                    // 4880
                                                                                                                       // 4881
var utils = require('../utils/utils');                                                                                 // 4882
var errors = require('./errors');                                                                                      // 4883
                                                                                                                       // 4884
var Method = function (options) {                                                                                      // 4885
    this.name = options.name;                                                                                          // 4886
    this.call = options.call;                                                                                          // 4887
    this.params = options.params || 0;                                                                                 // 4888
    this.inputFormatter = options.inputFormatter;                                                                      // 4889
    this.outputFormatter = options.outputFormatter;                                                                    // 4890
    this.requestManager = null;                                                                                        // 4891
};                                                                                                                     // 4892
                                                                                                                       // 4893
Method.prototype.setRequestManager = function (rm) {                                                                   // 4894
    this.requestManager = rm;                                                                                          // 4895
};                                                                                                                     // 4896
                                                                                                                       // 4897
/**                                                                                                                    // 4898
 * Should be used to determine name of the jsonrpc method based on arguments                                           // 4899
 *                                                                                                                     // 4900
 * @method getCall                                                                                                     // 4901
 * @param {Array} arguments                                                                                            // 4902
 * @return {String} name of jsonrpc method                                                                             // 4903
 */                                                                                                                    // 4904
Method.prototype.getCall = function (args) {                                                                           // 4905
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 4906
};                                                                                                                     // 4907
                                                                                                                       // 4908
/**                                                                                                                    // 4909
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 4910
 *                                                                                                                     // 4911
 * @method extractCallback                                                                                             // 4912
 * @param {Array} arguments                                                                                            // 4913
 * @return {Function|Null} callback, if exists                                                                         // 4914
 */                                                                                                                    // 4915
Method.prototype.extractCallback = function (args) {                                                                   // 4916
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 4917
        return args.pop(); // modify the args array!                                                                   // 4918
    }                                                                                                                  // 4919
};                                                                                                                     // 4920
                                                                                                                       // 4921
/**                                                                                                                    // 4922
 * Should be called to check if the number of arguments is correct                                                     // 4923
 *                                                                                                                     // 4924
 * @method validateArgs                                                                                                // 4925
 * @param {Array} arguments                                                                                            // 4926
 * @throws {Error} if it is not                                                                                        // 4927
 */                                                                                                                    // 4928
Method.prototype.validateArgs = function (args) {                                                                      // 4929
    if (args.length !== this.params) {                                                                                 // 4930
        throw errors.InvalidNumberOfParams();                                                                          // 4931
    }                                                                                                                  // 4932
};                                                                                                                     // 4933
                                                                                                                       // 4934
/**                                                                                                                    // 4935
 * Should be called to format input args of method                                                                     // 4936
 *                                                                                                                     // 4937
 * @method formatInput                                                                                                 // 4938
 * @param {Array}                                                                                                      // 4939
 * @return {Array}                                                                                                     // 4940
 */                                                                                                                    // 4941
Method.prototype.formatInput = function (args) {                                                                       // 4942
    if (!this.inputFormatter) {                                                                                        // 4943
        return args;                                                                                                   // 4944
    }                                                                                                                  // 4945
                                                                                                                       // 4946
    return this.inputFormatter.map(function (formatter, index) {                                                       // 4947
        return formatter ? formatter(args[index]) : args[index];                                                       // 4948
    });                                                                                                                // 4949
};                                                                                                                     // 4950
                                                                                                                       // 4951
/**                                                                                                                    // 4952
 * Should be called to format output(result) of method                                                                 // 4953
 *                                                                                                                     // 4954
 * @method formatOutput                                                                                                // 4955
 * @param {Object}                                                                                                     // 4956
 * @return {Object}                                                                                                    // 4957
 */                                                                                                                    // 4958
Method.prototype.formatOutput = function (result) {                                                                    // 4959
    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 4960
};                                                                                                                     // 4961
                                                                                                                       // 4962
/**                                                                                                                    // 4963
 * Should create payload from given input args                                                                         // 4964
 *                                                                                                                     // 4965
 * @method toPayload                                                                                                   // 4966
 * @param {Array} args                                                                                                 // 4967
 * @return {Object}                                                                                                    // 4968
 */                                                                                                                    // 4969
Method.prototype.toPayload = function (args) {                                                                         // 4970
    var call = this.getCall(args);                                                                                     // 4971
    var callback = this.extractCallback(args);                                                                         // 4972
    var params = this.formatInput(args);                                                                               // 4973
    this.validateArgs(params);                                                                                         // 4974
                                                                                                                       // 4975
    return {                                                                                                           // 4976
        method: call,                                                                                                  // 4977
        params: params,                                                                                                // 4978
        callback: callback                                                                                             // 4979
    };                                                                                                                 // 4980
};                                                                                                                     // 4981
                                                                                                                       // 4982
Method.prototype.attachToObject = function (obj) {                                                                     // 4983
    var func = this.buildCall();                                                                                       // 4984
    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 4985
    var name = this.name.split('.');                                                                                   // 4986
    if (name.length > 1) {                                                                                             // 4987
        obj[name[0]] = obj[name[0]] || {};                                                                             // 4988
        obj[name[0]][name[1]] = func;                                                                                  // 4989
    } else {                                                                                                           // 4990
        obj[name[0]] = func;                                                                                           // 4991
    }                                                                                                                  // 4992
};                                                                                                                     // 4993
                                                                                                                       // 4994
Method.prototype.buildCall = function() {                                                                              // 4995
    var method = this;                                                                                                 // 4996
    var send = function () {                                                                                           // 4997
        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 4998
        if (payload.callback) {                                                                                        // 4999
            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 5000
                payload.callback(err, method.formatOutput(result));                                                    // 5001
            });                                                                                                        // 5002
        }                                                                                                              // 5003
        return method.formatOutput(method.requestManager.send(payload));                                               // 5004
    };                                                                                                                 // 5005
    send.request = this.request.bind(this);                                                                            // 5006
    return send;                                                                                                       // 5007
};                                                                                                                     // 5008
                                                                                                                       // 5009
/**                                                                                                                    // 5010
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 5011
 *                                                                                                                     // 5012
 * @method request                                                                                                     // 5013
 * @param {...} params                                                                                                 // 5014
 * @return {Object} jsonrpc request                                                                                    // 5015
 */                                                                                                                    // 5016
Method.prototype.request = function () {                                                                               // 5017
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 5018
    payload.format = this.formatOutput.bind(this);                                                                     // 5019
    return payload;                                                                                                    // 5020
};                                                                                                                     // 5021
                                                                                                                       // 5022
module.exports = Method;                                                                                               // 5023
                                                                                                                       // 5024
                                                                                                                       // 5025
},{"../utils/utils":20,"./errors":26}],37:[function(require,module,exports){                                           // 5026
/*                                                                                                                     // 5027
    This file is part of web3.js.                                                                                      // 5028
                                                                                                                       // 5029
    web3.js is free software: you can redistribute it and/or modify                                                    // 5030
    it under the terms of the GNU Lesser General Public License as published by                                        // 5031
    the Free Software Foundation, either version 3 of the License, or                                                  // 5032
    (at your option) any later version.                                                                                // 5033
                                                                                                                       // 5034
    web3.js is distributed in the hope that it will be useful,                                                         // 5035
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5036
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5037
    GNU Lesser General Public License for more details.                                                                // 5038
                                                                                                                       // 5039
    You should have received a copy of the GNU Lesser General Public License                                           // 5040
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5041
*/                                                                                                                     // 5042
/** @file db.js                                                                                                        // 5043
 * @authors:                                                                                                           // 5044
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5045
 * @date 2015                                                                                                          // 5046
 */                                                                                                                    // 5047
                                                                                                                       // 5048
var Method = require('../method');                                                                                     // 5049
                                                                                                                       // 5050
var DB = function (web3) {                                                                                             // 5051
    this._requestManager = web3._requestManager;                                                                       // 5052
                                                                                                                       // 5053
    var self = this;                                                                                                   // 5054
                                                                                                                       // 5055
    methods().forEach(function(method) {                                                                               // 5056
        method.attachToObject(self);                                                                                   // 5057
        method.setRequestManager(web3._requestManager);                                                                // 5058
    });                                                                                                                // 5059
};                                                                                                                     // 5060
                                                                                                                       // 5061
var methods = function () {                                                                                            // 5062
    var putString = new Method({                                                                                       // 5063
        name: 'putString',                                                                                             // 5064
        call: 'db_putString',                                                                                          // 5065
        params: 3                                                                                                      // 5066
    });                                                                                                                // 5067
                                                                                                                       // 5068
    var getString = new Method({                                                                                       // 5069
        name: 'getString',                                                                                             // 5070
        call: 'db_getString',                                                                                          // 5071
        params: 2                                                                                                      // 5072
    });                                                                                                                // 5073
                                                                                                                       // 5074
    var putHex = new Method({                                                                                          // 5075
        name: 'putHex',                                                                                                // 5076
        call: 'db_putHex',                                                                                             // 5077
        params: 3                                                                                                      // 5078
    });                                                                                                                // 5079
                                                                                                                       // 5080
    var getHex = new Method({                                                                                          // 5081
        name: 'getHex',                                                                                                // 5082
        call: 'db_getHex',                                                                                             // 5083
        params: 2                                                                                                      // 5084
    });                                                                                                                // 5085
                                                                                                                       // 5086
    return [                                                                                                           // 5087
        putString, getString, putHex, getHex                                                                           // 5088
    ];                                                                                                                 // 5089
};                                                                                                                     // 5090
                                                                                                                       // 5091
module.exports = DB;                                                                                                   // 5092
                                                                                                                       // 5093
},{"../method":36}],38:[function(require,module,exports){                                                              // 5094
/*                                                                                                                     // 5095
    This file is part of web3.js.                                                                                      // 5096
                                                                                                                       // 5097
    web3.js is free software: you can redistribute it and/or modify                                                    // 5098
    it under the terms of the GNU Lesser General Public License as published by                                        // 5099
    the Free Software Foundation, either version 3 of the License, or                                                  // 5100
    (at your option) any later version.                                                                                // 5101
                                                                                                                       // 5102
    web3.js is distributed in the hope that it will be useful,                                                         // 5103
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5104
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5105
    GNU Lesser General Public License for more details.                                                                // 5106
                                                                                                                       // 5107
    You should have received a copy of the GNU Lesser General Public License                                           // 5108
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5109
*/                                                                                                                     // 5110
/**                                                                                                                    // 5111
 * @file eth.js                                                                                                        // 5112
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5113
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5114
 * @date 2015                                                                                                          // 5115
 */                                                                                                                    // 5116
                                                                                                                       // 5117
"use strict";                                                                                                          // 5118
                                                                                                                       // 5119
var formatters = require('../formatters');                                                                             // 5120
var utils = require('../../utils/utils');                                                                              // 5121
var Method = require('../method');                                                                                     // 5122
var Property = require('../property');                                                                                 // 5123
var c = require('../../utils/config');                                                                                 // 5124
var Contract = require('../contract');                                                                                 // 5125
var watches = require('./watches');                                                                                    // 5126
var Filter = require('../filter');                                                                                     // 5127
var IsSyncing = require('../syncing');                                                                                 // 5128
var namereg = require('../namereg');                                                                                   // 5129
var Iban = require('../iban');                                                                                         // 5130
var transfer = require('../transfer');                                                                                 // 5131
                                                                                                                       // 5132
var blockCall = function (args) {                                                                                      // 5133
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";   // 5134
};                                                                                                                     // 5135
                                                                                                                       // 5136
var transactionFromBlockCall = function (args) {                                                                       // 5137
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                     // 5139
                                                                                                                       // 5140
var uncleCall = function (args) {                                                                                      // 5141
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                     // 5143
                                                                                                                       // 5144
var getBlockTransactionCountCall = function (args) {                                                                   // 5145
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                     // 5147
                                                                                                                       // 5148
var uncleCountCall = function (args) {                                                                                 // 5149
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                     // 5151
                                                                                                                       // 5152
function Eth(web3) {                                                                                                   // 5153
    this._requestManager = web3._requestManager;                                                                       // 5154
                                                                                                                       // 5155
    var self = this;                                                                                                   // 5156
                                                                                                                       // 5157
    methods().forEach(function(method) {                                                                               // 5158
        method.attachToObject(self);                                                                                   // 5159
        method.setRequestManager(self._requestManager);                                                                // 5160
    });                                                                                                                // 5161
                                                                                                                       // 5162
    properties().forEach(function(p) {                                                                                 // 5163
        p.attachToObject(self);                                                                                        // 5164
        p.setRequestManager(self._requestManager);                                                                     // 5165
    });                                                                                                                // 5166
                                                                                                                       // 5167
                                                                                                                       // 5168
    this.iban = Iban;                                                                                                  // 5169
    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 5170
}                                                                                                                      // 5171
                                                                                                                       // 5172
Object.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 5173
    get: function () {                                                                                                 // 5174
        return c.defaultBlock;                                                                                         // 5175
    },                                                                                                                 // 5176
    set: function (val) {                                                                                              // 5177
        c.defaultBlock = val;                                                                                          // 5178
        return val;                                                                                                    // 5179
    }                                                                                                                  // 5180
});                                                                                                                    // 5181
                                                                                                                       // 5182
Object.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 5183
    get: function () {                                                                                                 // 5184
        return c.defaultAccount;                                                                                       // 5185
    },                                                                                                                 // 5186
    set: function (val) {                                                                                              // 5187
        c.defaultAccount = val;                                                                                        // 5188
        return val;                                                                                                    // 5189
    }                                                                                                                  // 5190
});                                                                                                                    // 5191
                                                                                                                       // 5192
var methods = function () {                                                                                            // 5193
    var getBalance = new Method({                                                                                      // 5194
        name: 'getBalance',                                                                                            // 5195
        call: 'eth_getBalance',                                                                                        // 5196
        params: 2,                                                                                                     // 5197
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 5198
        outputFormatter: formatters.outputBigNumberFormatter                                                           // 5199
    });                                                                                                                // 5200
                                                                                                                       // 5201
    var getStorageAt = new Method({                                                                                    // 5202
        name: 'getStorageAt',                                                                                          // 5203
        call: 'eth_getStorageAt',                                                                                      // 5204
        params: 3,                                                                                                     // 5205
        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 5206
    });                                                                                                                // 5207
                                                                                                                       // 5208
    var getCode = new Method({                                                                                         // 5209
        name: 'getCode',                                                                                               // 5210
        call: 'eth_getCode',                                                                                           // 5211
        params: 2,                                                                                                     // 5212
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 5213
    });                                                                                                                // 5214
                                                                                                                       // 5215
    var getBlock = new Method({                                                                                        // 5216
        name: 'getBlock',                                                                                              // 5217
        call: blockCall,                                                                                               // 5218
        params: 2,                                                                                                     // 5219
        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 5220
        outputFormatter: formatters.outputBlockFormatter                                                               // 5221
    });                                                                                                                // 5222
                                                                                                                       // 5223
    var getUncle = new Method({                                                                                        // 5224
        name: 'getUncle',                                                                                              // 5225
        call: uncleCall,                                                                                               // 5226
        params: 2,                                                                                                     // 5227
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5228
        outputFormatter: formatters.outputBlockFormatter,                                                              // 5229
                                                                                                                       // 5230
    });                                                                                                                // 5231
                                                                                                                       // 5232
    var getCompilers = new Method({                                                                                    // 5233
        name: 'getCompilers',                                                                                          // 5234
        call: 'eth_getCompilers',                                                                                      // 5235
        params: 0                                                                                                      // 5236
    });                                                                                                                // 5237
                                                                                                                       // 5238
    var getBlockTransactionCount = new Method({                                                                        // 5239
        name: 'getBlockTransactionCount',                                                                              // 5240
        call: getBlockTransactionCountCall,                                                                            // 5241
        params: 1,                                                                                                     // 5242
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5243
        outputFormatter: utils.toDecimal                                                                               // 5244
    });                                                                                                                // 5245
                                                                                                                       // 5246
    var getBlockUncleCount = new Method({                                                                              // 5247
        name: 'getBlockUncleCount',                                                                                    // 5248
        call: uncleCountCall,                                                                                          // 5249
        params: 1,                                                                                                     // 5250
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5251
        outputFormatter: utils.toDecimal                                                                               // 5252
    });                                                                                                                // 5253
                                                                                                                       // 5254
    var getTransaction = new Method({                                                                                  // 5255
        name: 'getTransaction',                                                                                        // 5256
        call: 'eth_getTransactionByHash',                                                                              // 5257
        params: 1,                                                                                                     // 5258
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5259
    });                                                                                                                // 5260
                                                                                                                       // 5261
    var getTransactionFromBlock = new Method({                                                                         // 5262
        name: 'getTransactionFromBlock',                                                                               // 5263
        call: transactionFromBlockCall,                                                                                // 5264
        params: 2,                                                                                                     // 5265
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5266
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5267
    });                                                                                                                // 5268
                                                                                                                       // 5269
    var getTransactionReceipt = new Method({                                                                           // 5270
        name: 'getTransactionReceipt',                                                                                 // 5271
        call: 'eth_getTransactionReceipt',                                                                             // 5272
        params: 1,                                                                                                     // 5273
        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 5274
    });                                                                                                                // 5275
                                                                                                                       // 5276
    var getTransactionCount = new Method({                                                                             // 5277
        name: 'getTransactionCount',                                                                                   // 5278
        call: 'eth_getTransactionCount',                                                                               // 5279
        params: 2,                                                                                                     // 5280
        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 5281
        outputFormatter: utils.toDecimal                                                                               // 5282
    });                                                                                                                // 5283
                                                                                                                       // 5284
    var sendRawTransaction = new Method({                                                                              // 5285
        name: 'sendRawTransaction',                                                                                    // 5286
        call: 'eth_sendRawTransaction',                                                                                // 5287
        params: 1,                                                                                                     // 5288
        inputFormatter: [null]                                                                                         // 5289
    });                                                                                                                // 5290
                                                                                                                       // 5291
    var sendTransaction = new Method({                                                                                 // 5292
        name: 'sendTransaction',                                                                                       // 5293
        call: 'eth_sendTransaction',                                                                                   // 5294
        params: 1,                                                                                                     // 5295
        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5296
    });                                                                                                                // 5297
                                                                                                                       // 5298
    var sign = new Method({                                                                                            // 5299
        name: 'sign',                                                                                                  // 5300
        call: 'eth_sign',                                                                                              // 5301
        params: 2,                                                                                                     // 5302
        inputFormatter: [formatters.inputAddressFormatter, null]                                                       // 5303
    });                                                                                                                // 5304
                                                                                                                       // 5305
    var call = new Method({                                                                                            // 5306
        name: 'call',                                                                                                  // 5307
        call: 'eth_call',                                                                                              // 5308
        params: 2,                                                                                                     // 5309
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 5310
    });                                                                                                                // 5311
                                                                                                                       // 5312
    var estimateGas = new Method({                                                                                     // 5313
        name: 'estimateGas',                                                                                           // 5314
        call: 'eth_estimateGas',                                                                                       // 5315
        params: 1,                                                                                                     // 5316
        inputFormatter: [formatters.inputCallFormatter],                                                               // 5317
        outputFormatter: utils.toDecimal                                                                               // 5318
    });                                                                                                                // 5319
                                                                                                                       // 5320
    var compileSolidity = new Method({                                                                                 // 5321
        name: 'compile.solidity',                                                                                      // 5322
        call: 'eth_compileSolidity',                                                                                   // 5323
        params: 1                                                                                                      // 5324
    });                                                                                                                // 5325
                                                                                                                       // 5326
    var compileLLL = new Method({                                                                                      // 5327
        name: 'compile.lll',                                                                                           // 5328
        call: 'eth_compileLLL',                                                                                        // 5329
        params: 1                                                                                                      // 5330
    });                                                                                                                // 5331
                                                                                                                       // 5332
    var compileSerpent = new Method({                                                                                  // 5333
        name: 'compile.serpent',                                                                                       // 5334
        call: 'eth_compileSerpent',                                                                                    // 5335
        params: 1                                                                                                      // 5336
    });                                                                                                                // 5337
                                                                                                                       // 5338
    var submitWork = new Method({                                                                                      // 5339
        name: 'submitWork',                                                                                            // 5340
        call: 'eth_submitWork',                                                                                        // 5341
        params: 3                                                                                                      // 5342
    });                                                                                                                // 5343
                                                                                                                       // 5344
    var getWork = new Method({                                                                                         // 5345
        name: 'getWork',                                                                                               // 5346
        call: 'eth_getWork',                                                                                           // 5347
        params: 0                                                                                                      // 5348
    });                                                                                                                // 5349
                                                                                                                       // 5350
    return [                                                                                                           // 5351
        getBalance,                                                                                                    // 5352
        getStorageAt,                                                                                                  // 5353
        getCode,                                                                                                       // 5354
        getBlock,                                                                                                      // 5355
        getUncle,                                                                                                      // 5356
        getCompilers,                                                                                                  // 5357
        getBlockTransactionCount,                                                                                      // 5358
        getBlockUncleCount,                                                                                            // 5359
        getTransaction,                                                                                                // 5360
        getTransactionFromBlock,                                                                                       // 5361
        getTransactionReceipt,                                                                                         // 5362
        getTransactionCount,                                                                                           // 5363
        call,                                                                                                          // 5364
        estimateGas,                                                                                                   // 5365
        sendRawTransaction,                                                                                            // 5366
        sendTransaction,                                                                                               // 5367
        sign,                                                                                                          // 5368
        compileSolidity,                                                                                               // 5369
        compileLLL,                                                                                                    // 5370
        compileSerpent,                                                                                                // 5371
        submitWork,                                                                                                    // 5372
        getWork                                                                                                        // 5373
    ];                                                                                                                 // 5374
};                                                                                                                     // 5375
                                                                                                                       // 5376
                                                                                                                       // 5377
var properties = function () {                                                                                         // 5378
    return [                                                                                                           // 5379
        new Property({                                                                                                 // 5380
            name: 'coinbase',                                                                                          // 5381
            getter: 'eth_coinbase'                                                                                     // 5382
        }),                                                                                                            // 5383
        new Property({                                                                                                 // 5384
            name: 'mining',                                                                                            // 5385
            getter: 'eth_mining'                                                                                       // 5386
        }),                                                                                                            // 5387
        new Property({                                                                                                 // 5388
            name: 'hashrate',                                                                                          // 5389
            getter: 'eth_hashrate',                                                                                    // 5390
            outputFormatter: utils.toDecimal                                                                           // 5391
        }),                                                                                                            // 5392
        new Property({                                                                                                 // 5393
            name: 'syncing',                                                                                           // 5394
            getter: 'eth_syncing',                                                                                     // 5395
            outputFormatter: formatters.outputSyncingFormatter                                                         // 5396
        }),                                                                                                            // 5397
        new Property({                                                                                                 // 5398
            name: 'gasPrice',                                                                                          // 5399
            getter: 'eth_gasPrice',                                                                                    // 5400
            outputFormatter: formatters.outputBigNumberFormatter                                                       // 5401
        }),                                                                                                            // 5402
        new Property({                                                                                                 // 5403
            name: 'accounts',                                                                                          // 5404
            getter: 'eth_accounts'                                                                                     // 5405
        }),                                                                                                            // 5406
        new Property({                                                                                                 // 5407
            name: 'blockNumber',                                                                                       // 5408
            getter: 'eth_blockNumber',                                                                                 // 5409
            outputFormatter: utils.toDecimal                                                                           // 5410
        }),                                                                                                            // 5411
        new Property({                                                                                                 // 5412
            name: 'protocolVersion',                                                                                   // 5413
            getter: 'eth_protocolVersion'                                                                              // 5414
        })                                                                                                             // 5415
    ];                                                                                                                 // 5416
};                                                                                                                     // 5417
                                                                                                                       // 5418
Eth.prototype.contract = function (abi) {                                                                              // 5419
    var factory = new Contract(this, abi);                                                                             // 5420
    return factory;                                                                                                    // 5421
};                                                                                                                     // 5422
                                                                                                                       // 5423
Eth.prototype.filter = function (fil, callback) {                                                                      // 5424
    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);              // 5425
};                                                                                                                     // 5426
                                                                                                                       // 5427
Eth.prototype.namereg = function () {                                                                                  // 5428
    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 5429
};                                                                                                                     // 5430
                                                                                                                       // 5431
Eth.prototype.icapNamereg = function () {                                                                              // 5432
    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 5433
};                                                                                                                     // 5434
                                                                                                                       // 5435
Eth.prototype.isSyncing = function (callback) {                                                                        // 5436
    return new IsSyncing(this._requestManager, callback);                                                              // 5437
};                                                                                                                     // 5438
                                                                                                                       // 5439
module.exports = Eth;                                                                                                  // 5440
                                                                                                                       // 5441
                                                                                                                       // 5442
},{"../../utils/config":18,"../../utils/utils":20,"../contract":25,"../filter":29,"../formatters":30,"../iban":33,"../method":36,"../namereg":44,"../property":45,"../syncing":48,"../transfer":49,"./watches":43}],39:[function(require,module,exports){
/*                                                                                                                     // 5444
    This file is part of web3.js.                                                                                      // 5445
                                                                                                                       // 5446
    web3.js is free software: you can redistribute it and/or modify                                                    // 5447
    it under the terms of the GNU Lesser General Public License as published by                                        // 5448
    the Free Software Foundation, either version 3 of the License, or                                                  // 5449
    (at your option) any later version.                                                                                // 5450
                                                                                                                       // 5451
    web3.js is distributed in the hope that it will be useful,                                                         // 5452
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5453
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5454
    GNU Lesser General Public License for more details.                                                                // 5455
                                                                                                                       // 5456
    You should have received a copy of the GNU Lesser General Public License                                           // 5457
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5458
*/                                                                                                                     // 5459
/** @file eth.js                                                                                                       // 5460
 * @authors:                                                                                                           // 5461
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5462
 * @date 2015                                                                                                          // 5463
 */                                                                                                                    // 5464
                                                                                                                       // 5465
var utils = require('../../utils/utils');                                                                              // 5466
var Property = require('../property');                                                                                 // 5467
                                                                                                                       // 5468
var Net = function (web3) {                                                                                            // 5469
    this._requestManager = web3._requestManager;                                                                       // 5470
                                                                                                                       // 5471
    var self = this;                                                                                                   // 5472
                                                                                                                       // 5473
    properties().forEach(function(p) {                                                                                 // 5474
        p.attachToObject(self);                                                                                        // 5475
        p.setRequestManager(web3._requestManager);                                                                     // 5476
    });                                                                                                                // 5477
};                                                                                                                     // 5478
                                                                                                                       // 5479
/// @returns an array of objects describing web3.eth api properties                                                    // 5480
var properties = function () {                                                                                         // 5481
    return [                                                                                                           // 5482
        new Property({                                                                                                 // 5483
            name: 'listening',                                                                                         // 5484
            getter: 'net_listening'                                                                                    // 5485
        }),                                                                                                            // 5486
        new Property({                                                                                                 // 5487
            name: 'peerCount',                                                                                         // 5488
            getter: 'net_peerCount',                                                                                   // 5489
            outputFormatter: utils.toDecimal                                                                           // 5490
        })                                                                                                             // 5491
    ];                                                                                                                 // 5492
};                                                                                                                     // 5493
                                                                                                                       // 5494
module.exports = Net;                                                                                                  // 5495
                                                                                                                       // 5496
},{"../../utils/utils":20,"../property":45}],40:[function(require,module,exports){                                     // 5497
/*                                                                                                                     // 5498
    This file is part of web3.js.                                                                                      // 5499
                                                                                                                       // 5500
    web3.js is free software: you can redistribute it and/or modify                                                    // 5501
    it under the terms of the GNU Lesser General Public License as published by                                        // 5502
    the Free Software Foundation, either version 3 of the License, or                                                  // 5503
    (at your option) any later version.                                                                                // 5504
                                                                                                                       // 5505
    web3.js is distributed in the hope that it will be useful,                                                         // 5506
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5507
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5508
    GNU Lesser General Public License for more details.                                                                // 5509
                                                                                                                       // 5510
    You should have received a copy of the GNU Lesser General Public License                                           // 5511
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5512
*/                                                                                                                     // 5513
/**                                                                                                                    // 5514
 * @file eth.js                                                                                                        // 5515
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5516
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5517
 * @date 2015                                                                                                          // 5518
 */                                                                                                                    // 5519
                                                                                                                       // 5520
"use strict";                                                                                                          // 5521
                                                                                                                       // 5522
var Method = require('../method');                                                                                     // 5523
var Property = require('../property');                                                                                 // 5524
var formatters = require('../formatters');                                                                             // 5525
                                                                                                                       // 5526
function Personal(web3) {                                                                                              // 5527
    this._requestManager = web3._requestManager;                                                                       // 5528
                                                                                                                       // 5529
    var self = this;                                                                                                   // 5530
                                                                                                                       // 5531
    methods().forEach(function(method) {                                                                               // 5532
        method.attachToObject(self);                                                                                   // 5533
        method.setRequestManager(self._requestManager);                                                                // 5534
    });                                                                                                                // 5535
                                                                                                                       // 5536
    properties().forEach(function(p) {                                                                                 // 5537
        p.attachToObject(self);                                                                                        // 5538
        p.setRequestManager(self._requestManager);                                                                     // 5539
    });                                                                                                                // 5540
}                                                                                                                      // 5541
                                                                                                                       // 5542
var methods = function () {                                                                                            // 5543
    var newAccount = new Method({                                                                                      // 5544
        name: 'newAccount',                                                                                            // 5545
        call: 'personal_newAccount',                                                                                   // 5546
        params: 1,                                                                                                     // 5547
        inputFormatter: [null]                                                                                         // 5548
    });                                                                                                                // 5549
                                                                                                                       // 5550
    var unlockAccount = new Method({                                                                                   // 5551
        name: 'unlockAccount',                                                                                         // 5552
        call: 'personal_unlockAccount',                                                                                // 5553
        params: 3,                                                                                                     // 5554
        inputFormatter: [formatters.inputAddressFormatter, null, null]                                                 // 5555
    });                                                                                                                // 5556
                                                                                                                       // 5557
    var sendTransaction = new Method({                                                                                 // 5558
        name: 'sendTransaction',                                                                                       // 5559
        call: 'personal_sendTransaction',                                                                              // 5560
        params: 2,                                                                                                     // 5561
        inputFormatter: [formatters.inputTransactionFormatter, null]                                                   // 5562
    });                                                                                                                // 5563
                                                                                                                       // 5564
    var lockAccount = new Method({                                                                                     // 5565
        name: 'lockAccount',                                                                                           // 5566
        call: 'personal_lockAccount',                                                                                  // 5567
        params: 1,                                                                                                     // 5568
        inputFormatter: [formatters.inputAddressFormatter]                                                             // 5569
    });                                                                                                                // 5570
                                                                                                                       // 5571
    return [                                                                                                           // 5572
        newAccount,                                                                                                    // 5573
        unlockAccount,                                                                                                 // 5574
        sendTransaction,                                                                                               // 5575
        lockAccount                                                                                                    // 5576
    ];                                                                                                                 // 5577
};                                                                                                                     // 5578
                                                                                                                       // 5579
var properties = function () {                                                                                         // 5580
    return [                                                                                                           // 5581
        new Property({                                                                                                 // 5582
            name: 'listAccounts',                                                                                      // 5583
            getter: 'personal_listAccounts'                                                                            // 5584
        })                                                                                                             // 5585
    ];                                                                                                                 // 5586
};                                                                                                                     // 5587
                                                                                                                       // 5588
                                                                                                                       // 5589
module.exports = Personal;                                                                                             // 5590
                                                                                                                       // 5591
},{"../formatters":30,"../method":36,"../property":45}],41:[function(require,module,exports){                          // 5592
/*                                                                                                                     // 5593
    This file is part of web3.js.                                                                                      // 5594
                                                                                                                       // 5595
    web3.js is free software: you can redistribute it and/or modify                                                    // 5596
    it under the terms of the GNU Lesser General Public License as published by                                        // 5597
    the Free Software Foundation, either version 3 of the License, or                                                  // 5598
    (at your option) any later version.                                                                                // 5599
                                                                                                                       // 5600
    web3.js is distributed in the hope that it will be useful,                                                         // 5601
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5602
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5603
    GNU Lesser General Public License for more details.                                                                // 5604
                                                                                                                       // 5605
    You should have received a copy of the GNU Lesser General Public License                                           // 5606
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5607
*/                                                                                                                     // 5608
/** @file shh.js                                                                                                       // 5609
 * @authors:                                                                                                           // 5610
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5611
 * @date 2015                                                                                                          // 5612
 */                                                                                                                    // 5613
                                                                                                                       // 5614
var Method = require('../method');                                                                                     // 5615
var formatters = require('../formatters');                                                                             // 5616
var Filter = require('../filter');                                                                                     // 5617
var watches = require('./watches');                                                                                    // 5618
                                                                                                                       // 5619
var Shh = function (web3) {                                                                                            // 5620
    this._requestManager = web3._requestManager;                                                                       // 5621
                                                                                                                       // 5622
    var self = this;                                                                                                   // 5623
                                                                                                                       // 5624
    methods().forEach(function(method) {                                                                               // 5625
        method.attachToObject(self);                                                                                   // 5626
        method.setRequestManager(self._requestManager);                                                                // 5627
    });                                                                                                                // 5628
};                                                                                                                     // 5629
                                                                                                                       // 5630
Shh.prototype.filter = function (fil, callback) {                                                                      // 5631
    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);             // 5632
};                                                                                                                     // 5633
                                                                                                                       // 5634
var methods = function () {                                                                                            // 5635
                                                                                                                       // 5636
    var post = new Method({                                                                                            // 5637
        name: 'post',                                                                                                  // 5638
        call: 'shh_post',                                                                                              // 5639
        params: 1,                                                                                                     // 5640
        inputFormatter: [formatters.inputPostFormatter]                                                                // 5641
    });                                                                                                                // 5642
                                                                                                                       // 5643
    var newIdentity = new Method({                                                                                     // 5644
        name: 'newIdentity',                                                                                           // 5645
        call: 'shh_newIdentity',                                                                                       // 5646
        params: 0                                                                                                      // 5647
    });                                                                                                                // 5648
                                                                                                                       // 5649
    var hasIdentity = new Method({                                                                                     // 5650
        name: 'hasIdentity',                                                                                           // 5651
        call: 'shh_hasIdentity',                                                                                       // 5652
        params: 1                                                                                                      // 5653
    });                                                                                                                // 5654
                                                                                                                       // 5655
    var newGroup = new Method({                                                                                        // 5656
        name: 'newGroup',                                                                                              // 5657
        call: 'shh_newGroup',                                                                                          // 5658
        params: 0                                                                                                      // 5659
    });                                                                                                                // 5660
                                                                                                                       // 5661
    var addToGroup = new Method({                                                                                      // 5662
        name: 'addToGroup',                                                                                            // 5663
        call: 'shh_addToGroup',                                                                                        // 5664
        params: 0                                                                                                      // 5665
    });                                                                                                                // 5666
                                                                                                                       // 5667
    return [                                                                                                           // 5668
        post,                                                                                                          // 5669
        newIdentity,                                                                                                   // 5670
        hasIdentity,                                                                                                   // 5671
        newGroup,                                                                                                      // 5672
        addToGroup                                                                                                     // 5673
    ];                                                                                                                 // 5674
};                                                                                                                     // 5675
                                                                                                                       // 5676
module.exports = Shh;                                                                                                  // 5677
                                                                                                                       // 5678
                                                                                                                       // 5679
},{"../filter":29,"../formatters":30,"../method":36,"./watches":43}],42:[function(require,module,exports){             // 5680
/*                                                                                                                     // 5681
    This file is part of web3.js.                                                                                      // 5682
                                                                                                                       // 5683
    web3.js is free software: you can redistribute it and/or modify                                                    // 5684
    it under the terms of the GNU Lesser General Public License as published by                                        // 5685
    the Free Software Foundation, either version 3 of the License, or                                                  // 5686
    (at your option) any later version.                                                                                // 5687
                                                                                                                       // 5688
    web3.js is distributed in the hope that it will be useful,                                                         // 5689
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5690
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5691
    GNU Lesser General Public License for more details.                                                                // 5692
                                                                                                                       // 5693
    You should have received a copy of the GNU Lesser General Public License                                           // 5694
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5695
*/                                                                                                                     // 5696
/**                                                                                                                    // 5697
 * @file bzz.js                                                                                                        // 5698
 * @author Alex Beregszaszi <alex@rtfs.hu>                                                                             // 5699
 * @date 2016                                                                                                          // 5700
 *                                                                                                                     // 5701
 * Reference: https://github.com/ethereum/go-ethereum/blob/swarm/internal/web3ext/web3ext.go#L33                       // 5702
 */                                                                                                                    // 5703
                                                                                                                       // 5704
"use strict";                                                                                                          // 5705
                                                                                                                       // 5706
var Method = require('../method');                                                                                     // 5707
var Property = require('../property');                                                                                 // 5708
                                                                                                                       // 5709
function Swarm(web3) {                                                                                                 // 5710
    this._requestManager = web3._requestManager;                                                                       // 5711
                                                                                                                       // 5712
    var self = this;                                                                                                   // 5713
                                                                                                                       // 5714
    methods().forEach(function(method) {                                                                               // 5715
        method.attachToObject(self);                                                                                   // 5716
        method.setRequestManager(self._requestManager);                                                                // 5717
    });                                                                                                                // 5718
                                                                                                                       // 5719
    properties().forEach(function(p) {                                                                                 // 5720
        p.attachToObject(self);                                                                                        // 5721
        p.setRequestManager(self._requestManager);                                                                     // 5722
    });                                                                                                                // 5723
}                                                                                                                      // 5724
                                                                                                                       // 5725
var methods = function () {                                                                                            // 5726
    var blockNetworkRead = new Method({                                                                                // 5727
        name: 'blockNetworkRead',                                                                                      // 5728
        call: 'bzz_blockNetworkRead',                                                                                  // 5729
        params: 1,                                                                                                     // 5730
        inputFormatter: [null]                                                                                         // 5731
    });                                                                                                                // 5732
                                                                                                                       // 5733
    var syncEnabled = new Method({                                                                                     // 5734
        name: 'syncEnabled',                                                                                           // 5735
        call: 'bzz_syncEnabled',                                                                                       // 5736
        params: 1,                                                                                                     // 5737
        inputFormatter: [null]                                                                                         // 5738
    });                                                                                                                // 5739
                                                                                                                       // 5740
    var swapEnabled = new Method({                                                                                     // 5741
        name: 'swapEnabled',                                                                                           // 5742
        call: 'bzz_swapEnabled',                                                                                       // 5743
        params: 1,                                                                                                     // 5744
        inputFormatter: [null]                                                                                         // 5745
    });                                                                                                                // 5746
                                                                                                                       // 5747
    var download = new Method({                                                                                        // 5748
        name: 'download',                                                                                              // 5749
        call: 'bzz_download',                                                                                          // 5750
        params: 2,                                                                                                     // 5751
        inputFormatter: [null, null]                                                                                   // 5752
    });                                                                                                                // 5753
                                                                                                                       // 5754
    var upload = new Method({                                                                                          // 5755
        name: 'upload',                                                                                                // 5756
        call: 'bzz_upload',                                                                                            // 5757
        params: 2,                                                                                                     // 5758
        inputFormatter: [null, null]                                                                                   // 5759
    });                                                                                                                // 5760
                                                                                                                       // 5761
    var retrieve = new Method({                                                                                        // 5762
        name: 'retrieve',                                                                                              // 5763
        call: 'bzz_retrieve',                                                                                          // 5764
        params: 1,                                                                                                     // 5765
        inputFormatter: [null]                                                                                         // 5766
    });                                                                                                                // 5767
                                                                                                                       // 5768
    var store = new Method({                                                                                           // 5769
        name: 'store',                                                                                                 // 5770
        call: 'bzz_store',                                                                                             // 5771
        params: 2,                                                                                                     // 5772
        inputFormatter: [null, null]                                                                                   // 5773
    });                                                                                                                // 5774
                                                                                                                       // 5775
    var get = new Method({                                                                                             // 5776
        name: 'get',                                                                                                   // 5777
        call: 'bzz_get',                                                                                               // 5778
        params: 1,                                                                                                     // 5779
        inputFormatter: [null]                                                                                         // 5780
    });                                                                                                                // 5781
                                                                                                                       // 5782
    var put = new Method({                                                                                             // 5783
        name: 'put',                                                                                                   // 5784
        call: 'bzz_put',                                                                                               // 5785
        params: 2,                                                                                                     // 5786
        inputFormatter: [null, null]                                                                                   // 5787
    });                                                                                                                // 5788
                                                                                                                       // 5789
    var modify = new Method({                                                                                          // 5790
        name: 'modify',                                                                                                // 5791
        call: 'bzz_modify',                                                                                            // 5792
        params: 4,                                                                                                     // 5793
        inputFormatter: [null, null, null, null]                                                                       // 5794
    });                                                                                                                // 5795
                                                                                                                       // 5796
    return [                                                                                                           // 5797
        blockNetworkRead,                                                                                              // 5798
        syncEnabled,                                                                                                   // 5799
        swapEnabled,                                                                                                   // 5800
        download,                                                                                                      // 5801
        upload,                                                                                                        // 5802
        retrieve,                                                                                                      // 5803
        store,                                                                                                         // 5804
        get,                                                                                                           // 5805
        put,                                                                                                           // 5806
        modify                                                                                                         // 5807
    ];                                                                                                                 // 5808
};                                                                                                                     // 5809
                                                                                                                       // 5810
var properties = function () {                                                                                         // 5811
    return [                                                                                                           // 5812
        new Property({                                                                                                 // 5813
            name: 'hive',                                                                                              // 5814
            getter: 'bzz_hive'                                                                                         // 5815
        }),                                                                                                            // 5816
        new Property({                                                                                                 // 5817
            name: 'info',                                                                                              // 5818
            getter: 'bzz_info'                                                                                         // 5819
        })                                                                                                             // 5820
    ];                                                                                                                 // 5821
};                                                                                                                     // 5822
                                                                                                                       // 5823
                                                                                                                       // 5824
module.exports = Swarm;                                                                                                // 5825
                                                                                                                       // 5826
},{"../method":36,"../property":45}],43:[function(require,module,exports){                                             // 5827
/*                                                                                                                     // 5828
    This file is part of web3.js.                                                                                      // 5829
                                                                                                                       // 5830
    web3.js is free software: you can redistribute it and/or modify                                                    // 5831
    it under the terms of the GNU Lesser General Public License as published by                                        // 5832
    the Free Software Foundation, either version 3 of the License, or                                                  // 5833
    (at your option) any later version.                                                                                // 5834
                                                                                                                       // 5835
    web3.js is distributed in the hope that it will be useful,                                                         // 5836
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5837
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5838
    GNU Lesser General Public License for more details.                                                                // 5839
                                                                                                                       // 5840
    You should have received a copy of the GNU Lesser General Public License                                           // 5841
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5842
*/                                                                                                                     // 5843
/** @file watches.js                                                                                                   // 5844
 * @authors:                                                                                                           // 5845
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5846
 * @date 2015                                                                                                          // 5847
 */                                                                                                                    // 5848
                                                                                                                       // 5849
var Method = require('../method');                                                                                     // 5850
                                                                                                                       // 5851
/// @returns an array of objects describing web3.eth.filter api methods                                                // 5852
var eth = function () {                                                                                                // 5853
    var newFilterCall = function (args) {                                                                              // 5854
        var type = args[0];                                                                                            // 5855
                                                                                                                       // 5856
        switch(type) {                                                                                                 // 5857
            case 'latest':                                                                                             // 5858
                args.shift();                                                                                          // 5859
                this.params = 0;                                                                                       // 5860
                return 'eth_newBlockFilter';                                                                           // 5861
            case 'pending':                                                                                            // 5862
                args.shift();                                                                                          // 5863
                this.params = 0;                                                                                       // 5864
                return 'eth_newPendingTransactionFilter';                                                              // 5865
            default:                                                                                                   // 5866
                return 'eth_newFilter';                                                                                // 5867
        }                                                                                                              // 5868
    };                                                                                                                 // 5869
                                                                                                                       // 5870
    var newFilter = new Method({                                                                                       // 5871
        name: 'newFilter',                                                                                             // 5872
        call: newFilterCall,                                                                                           // 5873
        params: 1                                                                                                      // 5874
    });                                                                                                                // 5875
                                                                                                                       // 5876
    var uninstallFilter = new Method({                                                                                 // 5877
        name: 'uninstallFilter',                                                                                       // 5878
        call: 'eth_uninstallFilter',                                                                                   // 5879
        params: 1                                                                                                      // 5880
    });                                                                                                                // 5881
                                                                                                                       // 5882
    var getLogs = new Method({                                                                                         // 5883
        name: 'getLogs',                                                                                               // 5884
        call: 'eth_getFilterLogs',                                                                                     // 5885
        params: 1                                                                                                      // 5886
    });                                                                                                                // 5887
                                                                                                                       // 5888
    var poll = new Method({                                                                                            // 5889
        name: 'poll',                                                                                                  // 5890
        call: 'eth_getFilterChanges',                                                                                  // 5891
        params: 1                                                                                                      // 5892
    });                                                                                                                // 5893
                                                                                                                       // 5894
    return [                                                                                                           // 5895
        newFilter,                                                                                                     // 5896
        uninstallFilter,                                                                                               // 5897
        getLogs,                                                                                                       // 5898
        poll                                                                                                           // 5899
    ];                                                                                                                 // 5900
};                                                                                                                     // 5901
                                                                                                                       // 5902
/// @returns an array of objects describing web3.shh.watch api methods                                                 // 5903
var shh = function () {                                                                                                // 5904
    var newFilter = new Method({                                                                                       // 5905
        name: 'newFilter',                                                                                             // 5906
        call: 'shh_newFilter',                                                                                         // 5907
        params: 1                                                                                                      // 5908
    });                                                                                                                // 5909
                                                                                                                       // 5910
    var uninstallFilter = new Method({                                                                                 // 5911
        name: 'uninstallFilter',                                                                                       // 5912
        call: 'shh_uninstallFilter',                                                                                   // 5913
        params: 1                                                                                                      // 5914
    });                                                                                                                // 5915
                                                                                                                       // 5916
    var getLogs = new Method({                                                                                         // 5917
        name: 'getLogs',                                                                                               // 5918
        call: 'shh_getMessages',                                                                                       // 5919
        params: 1                                                                                                      // 5920
    });                                                                                                                // 5921
                                                                                                                       // 5922
    var poll = new Method({                                                                                            // 5923
        name: 'poll',                                                                                                  // 5924
        call: 'shh_getFilterChanges',                                                                                  // 5925
        params: 1                                                                                                      // 5926
    });                                                                                                                // 5927
                                                                                                                       // 5928
    return [                                                                                                           // 5929
        newFilter,                                                                                                     // 5930
        uninstallFilter,                                                                                               // 5931
        getLogs,                                                                                                       // 5932
        poll                                                                                                           // 5933
    ];                                                                                                                 // 5934
};                                                                                                                     // 5935
                                                                                                                       // 5936
module.exports = {                                                                                                     // 5937
    eth: eth,                                                                                                          // 5938
    shh: shh                                                                                                           // 5939
};                                                                                                                     // 5940
                                                                                                                       // 5941
                                                                                                                       // 5942
},{"../method":36}],44:[function(require,module,exports){                                                              // 5943
/*                                                                                                                     // 5944
    This file is part of web3.js.                                                                                      // 5945
                                                                                                                       // 5946
    web3.js is free software: you can redistribute it and/or modify                                                    // 5947
    it under the terms of the GNU Lesser General Public License as published by                                        // 5948
    the Free Software Foundation, either version 3 of the License, or                                                  // 5949
    (at your option) any later version.                                                                                // 5950
                                                                                                                       // 5951
    web3.js is distributed in the hope that it will be useful,                                                         // 5952
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5953
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5954
    GNU Lesser General Public License for more details.                                                                // 5955
                                                                                                                       // 5956
    You should have received a copy of the GNU Lesser General Public License                                           // 5957
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5958
*/                                                                                                                     // 5959
/**                                                                                                                    // 5960
 * @file namereg.js                                                                                                    // 5961
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5962
 * @date 2015                                                                                                          // 5963
 */                                                                                                                    // 5964
                                                                                                                       // 5965
var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 5966
var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 5967
                                                                                                                       // 5968
var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 5969
var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 5970
                                                                                                                       // 5971
module.exports = {                                                                                                     // 5972
    global: {                                                                                                          // 5973
        abi: globalRegistrarAbi,                                                                                       // 5974
        address: globalNameregAddress                                                                                  // 5975
    },                                                                                                                 // 5976
    icap: {                                                                                                            // 5977
        abi: icapRegistrarAbi,                                                                                         // 5978
        address: icapNameregAddress                                                                                    // 5979
    }                                                                                                                  // 5980
};                                                                                                                     // 5981
                                                                                                                       // 5982
                                                                                                                       // 5983
},{"../contracts/GlobalRegistrar.json":1,"../contracts/ICAPRegistrar.json":2}],45:[function(require,module,exports){   // 5984
/*                                                                                                                     // 5985
    This file is part of web3.js.                                                                                      // 5986
                                                                                                                       // 5987
    web3.js is free software: you can redistribute it and/or modify                                                    // 5988
    it under the terms of the GNU Lesser General Public License as published by                                        // 5989
    the Free Software Foundation, either version 3 of the License, or                                                  // 5990
    (at your option) any later version.                                                                                // 5991
                                                                                                                       // 5992
    web3.js is distributed in the hope that it will be useful,                                                         // 5993
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5994
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5995
    GNU Lesser General Public License for more details.                                                                // 5996
                                                                                                                       // 5997
    You should have received a copy of the GNU Lesser General Public License                                           // 5998
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5999
*/                                                                                                                     // 6000
/**                                                                                                                    // 6001
 * @file property.js                                                                                                   // 6002
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 6003
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6004
 * @date 2015                                                                                                          // 6005
 */                                                                                                                    // 6006
                                                                                                                       // 6007
var utils = require('../utils/utils');                                                                                 // 6008
                                                                                                                       // 6009
var Property = function (options) {                                                                                    // 6010
    this.name = options.name;                                                                                          // 6011
    this.getter = options.getter;                                                                                      // 6012
    this.setter = options.setter;                                                                                      // 6013
    this.outputFormatter = options.outputFormatter;                                                                    // 6014
    this.inputFormatter = options.inputFormatter;                                                                      // 6015
    this.requestManager = null;                                                                                        // 6016
};                                                                                                                     // 6017
                                                                                                                       // 6018
Property.prototype.setRequestManager = function (rm) {                                                                 // 6019
    this.requestManager = rm;                                                                                          // 6020
};                                                                                                                     // 6021
                                                                                                                       // 6022
/**                                                                                                                    // 6023
 * Should be called to format input args of method                                                                     // 6024
 *                                                                                                                     // 6025
 * @method formatInput                                                                                                 // 6026
 * @param {Array}                                                                                                      // 6027
 * @return {Array}                                                                                                     // 6028
 */                                                                                                                    // 6029
Property.prototype.formatInput = function (arg) {                                                                      // 6030
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 6031
};                                                                                                                     // 6032
                                                                                                                       // 6033
/**                                                                                                                    // 6034
 * Should be called to format output(result) of method                                                                 // 6035
 *                                                                                                                     // 6036
 * @method formatOutput                                                                                                // 6037
 * @param {Object}                                                                                                     // 6038
 * @return {Object}                                                                                                    // 6039
 */                                                                                                                    // 6040
Property.prototype.formatOutput = function (result) {                                                                  // 6041
    return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;    // 6042
};                                                                                                                     // 6043
                                                                                                                       // 6044
/**                                                                                                                    // 6045
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 6046
 *                                                                                                                     // 6047
 * @method extractCallback                                                                                             // 6048
 * @param {Array} arguments                                                                                            // 6049
 * @return {Function|Null} callback, if exists                                                                         // 6050
 */                                                                                                                    // 6051
Property.prototype.extractCallback = function (args) {                                                                 // 6052
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 6053
        return args.pop(); // modify the args array!                                                                   // 6054
    }                                                                                                                  // 6055
};                                                                                                                     // 6056
                                                                                                                       // 6057
                                                                                                                       // 6058
/**                                                                                                                    // 6059
 * Should attach function to method                                                                                    // 6060
 *                                                                                                                     // 6061
 * @method attachToObject                                                                                              // 6062
 * @param {Object}                                                                                                     // 6063
 * @param {Function}                                                                                                   // 6064
 */                                                                                                                    // 6065
Property.prototype.attachToObject = function (obj) {                                                                   // 6066
    var proto = {                                                                                                      // 6067
        get: this.buildGet(),                                                                                          // 6068
        enumerable: true                                                                                               // 6069
    };                                                                                                                 // 6070
                                                                                                                       // 6071
    var names = this.name.split('.');                                                                                  // 6072
    var name = names[0];                                                                                               // 6073
    if (names.length > 1) {                                                                                            // 6074
        obj[names[0]] = obj[names[0]] || {};                                                                           // 6075
        obj = obj[names[0]];                                                                                           // 6076
        name = names[1];                                                                                               // 6077
    }                                                                                                                  // 6078
                                                                                                                       // 6079
    Object.defineProperty(obj, name, proto);                                                                           // 6080
    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 6081
};                                                                                                                     // 6082
                                                                                                                       // 6083
var asyncGetterName = function (name) {                                                                                // 6084
    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 6085
};                                                                                                                     // 6086
                                                                                                                       // 6087
Property.prototype.buildGet = function () {                                                                            // 6088
    var property = this;                                                                                               // 6089
    return function get() {                                                                                            // 6090
        return property.formatOutput(property.requestManager.send({                                                    // 6091
            method: property.getter                                                                                    // 6092
        }));                                                                                                           // 6093
    };                                                                                                                 // 6094
};                                                                                                                     // 6095
                                                                                                                       // 6096
Property.prototype.buildAsyncGet = function () {                                                                       // 6097
    var property = this;                                                                                               // 6098
    var get = function (callback) {                                                                                    // 6099
        property.requestManager.sendAsync({                                                                            // 6100
            method: property.getter                                                                                    // 6101
        }, function (err, result) {                                                                                    // 6102
            callback(err, property.formatOutput(result));                                                              // 6103
        });                                                                                                            // 6104
    };                                                                                                                 // 6105
    get.request = this.request.bind(this);                                                                             // 6106
    return get;                                                                                                        // 6107
};                                                                                                                     // 6108
                                                                                                                       // 6109
/**                                                                                                                    // 6110
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 6111
 *                                                                                                                     // 6112
 * @method request                                                                                                     // 6113
 * @param {...} params                                                                                                 // 6114
 * @return {Object} jsonrpc request                                                                                    // 6115
 */                                                                                                                    // 6116
Property.prototype.request = function () {                                                                             // 6117
    var payload = {                                                                                                    // 6118
        method: this.getter,                                                                                           // 6119
        params: [],                                                                                                    // 6120
        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 6121
    };                                                                                                                 // 6122
    payload.format = this.formatOutput.bind(this);                                                                     // 6123
    return payload;                                                                                                    // 6124
};                                                                                                                     // 6125
                                                                                                                       // 6126
module.exports = Property;                                                                                             // 6127
                                                                                                                       // 6128
                                                                                                                       // 6129
},{"../utils/utils":20}],46:[function(require,module,exports){                                                         // 6130
/*                                                                                                                     // 6131
    This file is part of web3.js.                                                                                      // 6132
                                                                                                                       // 6133
    web3.js is free software: you can redistribute it and/or modify                                                    // 6134
    it under the terms of the GNU Lesser General Public License as published by                                        // 6135
    the Free Software Foundation, either version 3 of the License, or                                                  // 6136
    (at your option) any later version.                                                                                // 6137
                                                                                                                       // 6138
    web3.js is distributed in the hope that it will be useful,                                                         // 6139
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6140
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6141
    GNU Lesser General Public License for more details.                                                                // 6142
                                                                                                                       // 6143
    You should have received a copy of the GNU Lesser General Public License                                           // 6144
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6145
*/                                                                                                                     // 6146
/**                                                                                                                    // 6147
 * @file requestmanager.js                                                                                             // 6148
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 6149
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6150
 * @author Marian Oancea <marian@ethdev.com>                                                                           // 6151
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 6152
 * @author Gav Wood <g@ethdev.com>                                                                                     // 6153
 * @date 2014                                                                                                          // 6154
 */                                                                                                                    // 6155
                                                                                                                       // 6156
var Jsonrpc = require('./jsonrpc');                                                                                    // 6157
var utils = require('../utils/utils');                                                                                 // 6158
var c = require('../utils/config');                                                                                    // 6159
var errors = require('./errors');                                                                                      // 6160
                                                                                                                       // 6161
/**                                                                                                                    // 6162
 * It's responsible for passing messages to providers                                                                  // 6163
 * It's also responsible for polling the ethereum node for incoming messages                                           // 6164
 * Default poll timeout is 1 second                                                                                    // 6165
 * Singleton                                                                                                           // 6166
 */                                                                                                                    // 6167
var RequestManager = function (provider) {                                                                             // 6168
    this.provider = provider;                                                                                          // 6169
    this.polls = {};                                                                                                   // 6170
    this.timeout = null;                                                                                               // 6171
};                                                                                                                     // 6172
                                                                                                                       // 6173
/**                                                                                                                    // 6174
 * Should be used to synchronously send request                                                                        // 6175
 *                                                                                                                     // 6176
 * @method send                                                                                                        // 6177
 * @param {Object} data                                                                                                // 6178
 * @return {Object}                                                                                                    // 6179
 */                                                                                                                    // 6180
RequestManager.prototype.send = function (data) {                                                                      // 6181
    if (!this.provider) {                                                                                              // 6182
        console.error(errors.InvalidProvider());                                                                       // 6183
        return null;                                                                                                   // 6184
    }                                                                                                                  // 6185
                                                                                                                       // 6186
    var payload = Jsonrpc.toPayload(data.method, data.params);                                                         // 6187
    var result = this.provider.send(payload);                                                                          // 6188
                                                                                                                       // 6189
    if (!Jsonrpc.isValidResponse(result)) {                                                                            // 6190
        throw errors.InvalidResponse(result);                                                                          // 6191
    }                                                                                                                  // 6192
                                                                                                                       // 6193
    return result.result;                                                                                              // 6194
};                                                                                                                     // 6195
                                                                                                                       // 6196
/**                                                                                                                    // 6197
 * Should be used to asynchronously send request                                                                       // 6198
 *                                                                                                                     // 6199
 * @method sendAsync                                                                                                   // 6200
 * @param {Object} data                                                                                                // 6201
 * @param {Function} callback                                                                                          // 6202
 */                                                                                                                    // 6203
RequestManager.prototype.sendAsync = function (data, callback) {                                                       // 6204
    if (!this.provider) {                                                                                              // 6205
        return callback(errors.InvalidProvider());                                                                     // 6206
    }                                                                                                                  // 6207
                                                                                                                       // 6208
    var payload = Jsonrpc.toPayload(data.method, data.params);                                                         // 6209
    this.provider.sendAsync(payload, function (err, result) {                                                          // 6210
        if (err) {                                                                                                     // 6211
            return callback(err);                                                                                      // 6212
        }                                                                                                              // 6213
                                                                                                                       // 6214
        if (!Jsonrpc.isValidResponse(result)) {                                                                        // 6215
            return callback(errors.InvalidResponse(result));                                                           // 6216
        }                                                                                                              // 6217
                                                                                                                       // 6218
        callback(null, result.result);                                                                                 // 6219
    });                                                                                                                // 6220
};                                                                                                                     // 6221
                                                                                                                       // 6222
/**                                                                                                                    // 6223
 * Should be called to asynchronously send batch request                                                               // 6224
 *                                                                                                                     // 6225
 * @method sendBatch                                                                                                   // 6226
 * @param {Array} batch data                                                                                           // 6227
 * @param {Function} callback                                                                                          // 6228
 */                                                                                                                    // 6229
RequestManager.prototype.sendBatch = function (data, callback) {                                                       // 6230
    if (!this.provider) {                                                                                              // 6231
        return callback(errors.InvalidProvider());                                                                     // 6232
    }                                                                                                                  // 6233
                                                                                                                       // 6234
    var payload = Jsonrpc.toBatchPayload(data);                                                                        // 6235
                                                                                                                       // 6236
    this.provider.sendAsync(payload, function (err, results) {                                                         // 6237
        if (err) {                                                                                                     // 6238
            return callback(err);                                                                                      // 6239
        }                                                                                                              // 6240
                                                                                                                       // 6241
        if (!utils.isArray(results)) {                                                                                 // 6242
            return callback(errors.InvalidResponse(results));                                                          // 6243
        }                                                                                                              // 6244
                                                                                                                       // 6245
        callback(err, results);                                                                                        // 6246
    });                                                                                                                // 6247
};                                                                                                                     // 6248
                                                                                                                       // 6249
/**                                                                                                                    // 6250
 * Should be used to set provider of request manager                                                                   // 6251
 *                                                                                                                     // 6252
 * @method setProvider                                                                                                 // 6253
 * @param {Object}                                                                                                     // 6254
 */                                                                                                                    // 6255
RequestManager.prototype.setProvider = function (p) {                                                                  // 6256
    this.provider = p;                                                                                                 // 6257
};                                                                                                                     // 6258
                                                                                                                       // 6259
/**                                                                                                                    // 6260
 * Should be used to start polling                                                                                     // 6261
 *                                                                                                                     // 6262
 * @method startPolling                                                                                                // 6263
 * @param {Object} data                                                                                                // 6264
 * @param {Number} pollId                                                                                              // 6265
 * @param {Function} callback                                                                                          // 6266
 * @param {Function} uninstall                                                                                         // 6267
 *                                                                                                                     // 6268
 * @todo cleanup number of params                                                                                      // 6269
 */                                                                                                                    // 6270
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 6271
    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 6272
                                                                                                                       // 6273
                                                                                                                       // 6274
    // start polling                                                                                                   // 6275
    if (!this.timeout) {                                                                                               // 6276
        this.poll();                                                                                                   // 6277
    }                                                                                                                  // 6278
};                                                                                                                     // 6279
                                                                                                                       // 6280
/**                                                                                                                    // 6281
 * Should be used to stop polling for filter with given id                                                             // 6282
 *                                                                                                                     // 6283
 * @method stopPolling                                                                                                 // 6284
 * @param {Number} pollId                                                                                              // 6285
 */                                                                                                                    // 6286
RequestManager.prototype.stopPolling = function (pollId) {                                                             // 6287
    delete this.polls[pollId];                                                                                         // 6288
                                                                                                                       // 6289
    // stop polling                                                                                                    // 6290
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 6291
        clearTimeout(this.timeout);                                                                                    // 6292
        this.timeout = null;                                                                                           // 6293
    }                                                                                                                  // 6294
};                                                                                                                     // 6295
                                                                                                                       // 6296
/**                                                                                                                    // 6297
 * Should be called to reset the polling mechanism of the request manager                                              // 6298
 *                                                                                                                     // 6299
 * @method reset                                                                                                       // 6300
 */                                                                                                                    // 6301
RequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 6302
    /*jshint maxcomplexity:5 */                                                                                        // 6303
                                                                                                                       // 6304
    for (var key in this.polls) {                                                                                      // 6305
        // remove all polls, except sync polls,                                                                        // 6306
        // they need to be removed manually by calling syncing.stopWatching()                                          // 6307
        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 6308
            this.polls[key].uninstall();                                                                               // 6309
            delete this.polls[key];                                                                                    // 6310
        }                                                                                                              // 6311
    }                                                                                                                  // 6312
                                                                                                                       // 6313
    // stop polling                                                                                                    // 6314
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 6315
        clearTimeout(this.timeout);                                                                                    // 6316
        this.timeout = null;                                                                                           // 6317
    }                                                                                                                  // 6318
};                                                                                                                     // 6319
                                                                                                                       // 6320
/**                                                                                                                    // 6321
 * Should be called to poll for changes on filter with given id                                                        // 6322
 *                                                                                                                     // 6323
 * @method poll                                                                                                        // 6324
 */                                                                                                                    // 6325
RequestManager.prototype.poll = function () {                                                                          // 6326
    /*jshint maxcomplexity: 6 */                                                                                       // 6327
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 6328
                                                                                                                       // 6329
    if (Object.keys(this.polls).length === 0) {                                                                        // 6330
        return;                                                                                                        // 6331
    }                                                                                                                  // 6332
                                                                                                                       // 6333
    if (!this.provider) {                                                                                              // 6334
        console.error(errors.InvalidProvider());                                                                       // 6335
        return;                                                                                                        // 6336
    }                                                                                                                  // 6337
                                                                                                                       // 6338
    var pollsData = [];                                                                                                // 6339
    var pollsIds = [];                                                                                                 // 6340
    for (var key in this.polls) {                                                                                      // 6341
        pollsData.push(this.polls[key].data);                                                                          // 6342
        pollsIds.push(key);                                                                                            // 6343
    }                                                                                                                  // 6344
                                                                                                                       // 6345
    if (pollsData.length === 0) {                                                                                      // 6346
        return;                                                                                                        // 6347
    }                                                                                                                  // 6348
                                                                                                                       // 6349
    var payload = Jsonrpc.toBatchPayload(pollsData);                                                                   // 6350
                                                                                                                       // 6351
    // map the request id to they poll id                                                                              // 6352
    var pollsIdMap = {};                                                                                               // 6353
    payload.forEach(function(load, index){                                                                             // 6354
        pollsIdMap[load.id] = pollsIds[index];                                                                         // 6355
    });                                                                                                                // 6356
                                                                                                                       // 6357
                                                                                                                       // 6358
    var self = this;                                                                                                   // 6359
    this.provider.sendAsync(payload, function (error, results) {                                                       // 6360
                                                                                                                       // 6361
                                                                                                                       // 6362
        // TODO: console log?                                                                                          // 6363
        if (error) {                                                                                                   // 6364
            return;                                                                                                    // 6365
        }                                                                                                              // 6366
                                                                                                                       // 6367
        if (!utils.isArray(results)) {                                                                                 // 6368
            throw errors.InvalidResponse(results);                                                                     // 6369
        }                                                                                                              // 6370
        results.map(function (result) {                                                                                // 6371
            var id = pollsIdMap[result.id];                                                                            // 6372
                                                                                                                       // 6373
            // make sure the filter is still installed after arrival of the request                                    // 6374
            if (self.polls[id]) {                                                                                      // 6375
                result.callback = self.polls[id].callback;                                                             // 6376
                return result;                                                                                         // 6377
            } else                                                                                                     // 6378
                return false;                                                                                          // 6379
        }).filter(function (result) {                                                                                  // 6380
            return !!result;                                                                                           // 6381
        }).filter(function (result) {                                                                                  // 6382
            var valid = Jsonrpc.isValidResponse(result);                                                               // 6383
            if (!valid) {                                                                                              // 6384
                result.callback(errors.InvalidResponse(result));                                                       // 6385
            }                                                                                                          // 6386
            return valid;                                                                                              // 6387
        }).forEach(function (result) {                                                                                 // 6388
            result.callback(null, result.result);                                                                      // 6389
        });                                                                                                            // 6390
    });                                                                                                                // 6391
};                                                                                                                     // 6392
                                                                                                                       // 6393
module.exports = RequestManager;                                                                                       // 6394
                                                                                                                       // 6395
                                                                                                                       // 6396
},{"../utils/config":18,"../utils/utils":20,"./errors":26,"./jsonrpc":35}],47:[function(require,module,exports){       // 6397
                                                                                                                       // 6398
                                                                                                                       // 6399
var Settings = function () {                                                                                           // 6400
    this.defaultBlock = 'latest';                                                                                      // 6401
    this.defaultAccount = undefined;                                                                                   // 6402
};                                                                                                                     // 6403
                                                                                                                       // 6404
module.exports = Settings;                                                                                             // 6405
                                                                                                                       // 6406
                                                                                                                       // 6407
},{}],48:[function(require,module,exports){                                                                            // 6408
/*                                                                                                                     // 6409
    This file is part of web3.js.                                                                                      // 6410
                                                                                                                       // 6411
    web3.js is free software: you can redistribute it and/or modify                                                    // 6412
    it under the terms of the GNU Lesser General Public License as published by                                        // 6413
    the Free Software Foundation, either version 3 of the License, or                                                  // 6414
    (at your option) any later version.                                                                                // 6415
                                                                                                                       // 6416
    web3.js is distributed in the hope that it will be useful,                                                         // 6417
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6418
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6419
    GNU Lesser General Public License for more details.                                                                // 6420
                                                                                                                       // 6421
    You should have received a copy of the GNU Lesser General Public License                                           // 6422
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6423
*/                                                                                                                     // 6424
/** @file syncing.js                                                                                                   // 6425
 * @authors:                                                                                                           // 6426
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 6427
 * @date 2015                                                                                                          // 6428
 */                                                                                                                    // 6429
                                                                                                                       // 6430
var formatters = require('./formatters');                                                                              // 6431
var utils = require('../utils/utils');                                                                                 // 6432
                                                                                                                       // 6433
var count = 1;                                                                                                         // 6434
                                                                                                                       // 6435
/**                                                                                                                    // 6436
Adds the callback and sets up the methods, to iterate over the results.                                                // 6437
                                                                                                                       // 6438
@method pollSyncing                                                                                                    // 6439
@param {Object} self                                                                                                   // 6440
*/                                                                                                                     // 6441
var pollSyncing = function(self) {                                                                                     // 6442
                                                                                                                       // 6443
    var onMessage = function (error, sync) {                                                                           // 6444
        if (error) {                                                                                                   // 6445
            return self.callbacks.forEach(function (callback) {                                                        // 6446
                callback(error);                                                                                       // 6447
            });                                                                                                        // 6448
        }                                                                                                              // 6449
                                                                                                                       // 6450
        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 6451
            sync = formatters.outputSyncingFormatter(sync);                                                            // 6452
                                                                                                                       // 6453
        self.callbacks.forEach(function (callback) {                                                                   // 6454
            if (self.lastSyncState !== sync) {                                                                         // 6455
                                                                                                                       // 6456
                // call the callback with true first so the app can stop anything, before receiving the sync data      // 6457
                if(!self.lastSyncState && utils.isObject(sync))                                                        // 6458
                    callback(null, true);                                                                              // 6459
                                                                                                                       // 6460
                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 6461
                setTimeout(function() {                                                                                // 6462
                    callback(null, sync);                                                                              // 6463
                }, 0);                                                                                                 // 6464
                                                                                                                       // 6465
                self.lastSyncState = sync;                                                                             // 6466
            }                                                                                                          // 6467
        });                                                                                                            // 6468
    };                                                                                                                 // 6469
                                                                                                                       // 6470
    self.requestManager.startPolling({                                                                                 // 6471
        method: 'eth_syncing',                                                                                         // 6472
        params: [],                                                                                                    // 6473
    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 6474
                                                                                                                       // 6475
};                                                                                                                     // 6476
                                                                                                                       // 6477
var IsSyncing = function (requestManager, callback) {                                                                  // 6478
    this.requestManager = requestManager;                                                                              // 6479
    this.pollId = 'syncPoll_'+ count++;                                                                                // 6480
    this.callbacks = [];                                                                                               // 6481
    this.addCallback(callback);                                                                                        // 6482
    this.lastSyncState = false;                                                                                        // 6483
    pollSyncing(this);                                                                                                 // 6484
                                                                                                                       // 6485
    return this;                                                                                                       // 6486
};                                                                                                                     // 6487
                                                                                                                       // 6488
IsSyncing.prototype.addCallback = function (callback) {                                                                // 6489
    if(callback)                                                                                                       // 6490
        this.callbacks.push(callback);                                                                                 // 6491
    return this;                                                                                                       // 6492
};                                                                                                                     // 6493
                                                                                                                       // 6494
IsSyncing.prototype.stopWatching = function () {                                                                       // 6495
    this.requestManager.stopPolling(this.pollId);                                                                      // 6496
    this.callbacks = [];                                                                                               // 6497
};                                                                                                                     // 6498
                                                                                                                       // 6499
module.exports = IsSyncing;                                                                                            // 6500
                                                                                                                       // 6501
                                                                                                                       // 6502
},{"../utils/utils":20,"./formatters":30}],49:[function(require,module,exports){                                       // 6503
/*                                                                                                                     // 6504
    This file is part of web3.js.                                                                                      // 6505
                                                                                                                       // 6506
    web3.js is free software: you can redistribute it and/or modify                                                    // 6507
    it under the terms of the GNU Lesser General Public License as published by                                        // 6508
    the Free Software Foundation, either version 3 of the License, or                                                  // 6509
    (at your option) any later version.                                                                                // 6510
                                                                                                                       // 6511
    web3.js is distributed in the hope that it will be useful,                                                         // 6512
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6513
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6514
    GNU Lesser General Public License for more details.                                                                // 6515
                                                                                                                       // 6516
    You should have received a copy of the GNU Lesser General Public License                                           // 6517
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6518
*/                                                                                                                     // 6519
/**                                                                                                                    // 6520
 * @file transfer.js                                                                                                   // 6521
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6522
 * @date 2015                                                                                                          // 6523
 */                                                                                                                    // 6524
                                                                                                                       // 6525
var Iban = require('./iban');                                                                                          // 6526
var exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 6527
                                                                                                                       // 6528
/**                                                                                                                    // 6529
 * Should be used to make Iban transfer                                                                                // 6530
 *                                                                                                                     // 6531
 * @method transfer                                                                                                    // 6532
 * @param {String} from                                                                                                // 6533
 * @param {String} to iban                                                                                             // 6534
 * @param {Value} value to be tranfered                                                                                // 6535
 * @param {Function} callback, callback                                                                                // 6536
 */                                                                                                                    // 6537
var transfer = function (eth, from, to, value, callback) {                                                             // 6538
    var iban = new Iban(to);                                                                                           // 6539
    if (!iban.isValid()) {                                                                                             // 6540
        throw new Error('invalid iban address');                                                                       // 6541
    }                                                                                                                  // 6542
                                                                                                                       // 6543
    if (iban.isDirect()) {                                                                                             // 6544
        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 6545
    }                                                                                                                  // 6546
                                                                                                                       // 6547
    if (!callback) {                                                                                                   // 6548
        var address = eth.icapNamereg().addr(iban.institution());                                                      // 6549
        return deposit(eth, from, address, value, iban.client());                                                      // 6550
    }                                                                                                                  // 6551
                                                                                                                       // 6552
    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 6553
        return deposit(eth, from, address, value, iban.client(), callback);                                            // 6554
    });                                                                                                                // 6555
                                                                                                                       // 6556
};                                                                                                                     // 6557
                                                                                                                       // 6558
/**                                                                                                                    // 6559
 * Should be used to transfer funds to certain address                                                                 // 6560
 *                                                                                                                     // 6561
 * @method transferToAddress                                                                                           // 6562
 * @param {String} from                                                                                                // 6563
 * @param {String} to                                                                                                  // 6564
 * @param {Value} value to be tranfered                                                                                // 6565
 * @param {Function} callback, callback                                                                                // 6566
 */                                                                                                                    // 6567
var transferToAddress = function (eth, from, to, value, callback) {                                                    // 6568
    return eth.sendTransaction({                                                                                       // 6569
        address: to,                                                                                                   // 6570
        from: from,                                                                                                    // 6571
        value: value                                                                                                   // 6572
    }, callback);                                                                                                      // 6573
};                                                                                                                     // 6574
                                                                                                                       // 6575
/**                                                                                                                    // 6576
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 6577
 *                                                                                                                     // 6578
 * @method deposit                                                                                                     // 6579
 * @param {String} from                                                                                                // 6580
 * @param {String} to                                                                                                  // 6581
 * @param {Value} value to be transfered                                                                               // 6582
 * @param {String} client unique identifier                                                                            // 6583
 * @param {Function} callback, callback                                                                                // 6584
 */                                                                                                                    // 6585
var deposit = function (eth, from, to, value, client, callback) {                                                      // 6586
    var abi = exchangeAbi;                                                                                             // 6587
    return eth.contract(abi).at(to).deposit(client, {                                                                  // 6588
        from: from,                                                                                                    // 6589
        value: value                                                                                                   // 6590
    }, callback);                                                                                                      // 6591
};                                                                                                                     // 6592
                                                                                                                       // 6593
module.exports = transfer;                                                                                             // 6594
                                                                                                                       // 6595
                                                                                                                       // 6596
},{"../contracts/SmartExchange.json":3,"./iban":33}],50:[function(require,module,exports){                             // 6597
                                                                                                                       // 6598
},{}],51:[function(require,module,exports){                                                                            // 6599
;(function (root, factory, undef) {                                                                                    // 6600
	if (typeof exports === "object") {                                                                                    // 6601
		// CommonJS                                                                                                          // 6602
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 6604
	else if (typeof define === "function" && define.amd) {                                                                // 6605
		// AMD                                                                                                               // 6606
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 6607
	}                                                                                                                     // 6608
	else {                                                                                                                // 6609
		// Global (browser)                                                                                                  // 6610
		factory(root.CryptoJS);                                                                                              // 6611
	}                                                                                                                     // 6612
}(this, function (CryptoJS) {                                                                                          // 6613
                                                                                                                       // 6614
	(function () {                                                                                                        // 6615
	    // Shortcuts                                                                                                      // 6616
	    var C = CryptoJS;                                                                                                 // 6617
	    var C_lib = C.lib;                                                                                                // 6618
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 6619
	    var C_algo = C.algo;                                                                                              // 6620
                                                                                                                       // 6621
	    // Lookup tables                                                                                                  // 6622
	    var SBOX = [];                                                                                                    // 6623
	    var INV_SBOX = [];                                                                                                // 6624
	    var SUB_MIX_0 = [];                                                                                               // 6625
	    var SUB_MIX_1 = [];                                                                                               // 6626
	    var SUB_MIX_2 = [];                                                                                               // 6627
	    var SUB_MIX_3 = [];                                                                                               // 6628
	    var INV_SUB_MIX_0 = [];                                                                                           // 6629
	    var INV_SUB_MIX_1 = [];                                                                                           // 6630
	    var INV_SUB_MIX_2 = [];                                                                                           // 6631
	    var INV_SUB_MIX_3 = [];                                                                                           // 6632
                                                                                                                       // 6633
	    // Compute lookup tables                                                                                          // 6634
	    (function () {                                                                                                    // 6635
	        // Compute double table                                                                                       // 6636
	        var d = [];                                                                                                   // 6637
	        for (var i = 0; i < 256; i++) {                                                                               // 6638
	            if (i < 128) {                                                                                            // 6639
	                d[i] = i << 1;                                                                                        // 6640
	            } else {                                                                                                  // 6641
	                d[i] = (i << 1) ^ 0x11b;                                                                              // 6642
	            }                                                                                                         // 6643
	        }                                                                                                             // 6644
                                                                                                                       // 6645
	        // Walk GF(2^8)                                                                                               // 6646
	        var x = 0;                                                                                                    // 6647
	        var xi = 0;                                                                                                   // 6648
	        for (var i = 0; i < 256; i++) {                                                                               // 6649
	            // Compute sbox                                                                                           // 6650
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 6651
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 6652
	            SBOX[x] = sx;                                                                                             // 6653
	            INV_SBOX[sx] = x;                                                                                         // 6654
                                                                                                                       // 6655
	            // Compute multiplication                                                                                 // 6656
	            var x2 = d[x];                                                                                            // 6657
	            var x4 = d[x2];                                                                                           // 6658
	            var x8 = d[x4];                                                                                           // 6659
                                                                                                                       // 6660
	            // Compute sub bytes, mix columns tables                                                                  // 6661
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 6662
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 6663
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 6664
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 6665
	            SUB_MIX_3[x] = t;                                                                                         // 6666
                                                                                                                       // 6667
	            // Compute inv sub bytes, inv mix columns tables                                                          // 6668
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 6669
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 6670
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 6671
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 6672
	            INV_SUB_MIX_3[sx] = t;                                                                                    // 6673
                                                                                                                       // 6674
	            // Compute next counter                                                                                   // 6675
	            if (!x) {                                                                                                 // 6676
	                x = xi = 1;                                                                                           // 6677
	            } else {                                                                                                  // 6678
	                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 6679
	                xi ^= d[d[xi]];                                                                                       // 6680
	            }                                                                                                         // 6681
	        }                                                                                                             // 6682
	    }());                                                                                                             // 6683
                                                                                                                       // 6684
	    // Precomputed Rcon lookup                                                                                        // 6685
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 6686
                                                                                                                       // 6687
	    /**                                                                                                               // 6688
	     * AES block cipher algorithm.                                                                                    // 6689
	     */                                                                                                               // 6690
	    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 6691
	        _doReset: function () {                                                                                       // 6692
	            // Skip reset of nRounds has been set before and key did not change                                       // 6693
	            if (this._nRounds && this._keyPriorReset === this._key) {                                                 // 6694
	                return;                                                                                               // 6695
	            }                                                                                                         // 6696
                                                                                                                       // 6697
	            // Shortcuts                                                                                              // 6698
	            var key = this._keyPriorReset = this._key;                                                                // 6699
	            var keyWords = key.words;                                                                                 // 6700
	            var keySize = key.sigBytes / 4;                                                                           // 6701
                                                                                                                       // 6702
	            // Compute number of rounds                                                                               // 6703
	            var nRounds = this._nRounds = keySize + 6;                                                                // 6704
                                                                                                                       // 6705
	            // Compute number of key schedule rows                                                                    // 6706
	            var ksRows = (nRounds + 1) * 4;                                                                           // 6707
                                                                                                                       // 6708
	            // Compute key schedule                                                                                   // 6709
	            var keySchedule = this._keySchedule = [];                                                                 // 6710
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 6711
	                if (ksRow < keySize) {                                                                                // 6712
	                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 6713
	                } else {                                                                                              // 6714
	                    var t = keySchedule[ksRow - 1];                                                                   // 6715
                                                                                                                       // 6716
	                    if (!(ksRow % keySize)) {                                                                         // 6717
	                        // Rot word                                                                                   // 6718
	                        t = (t << 8) | (t >>> 24);                                                                    // 6719
                                                                                                                       // 6720
	                        // Sub word                                                                                   // 6721
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                                                                                                       // 6723
	                        // Mix Rcon                                                                                   // 6724
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 6725
	                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 6726
	                        // Sub word                                                                                   // 6727
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }                                                                                                 // 6729
                                                                                                                       // 6730
	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 6731
	                }                                                                                                     // 6732
	            }                                                                                                         // 6733
                                                                                                                       // 6734
	            // Compute inv key schedule                                                                               // 6735
	            var invKeySchedule = this._invKeySchedule = [];                                                           // 6736
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 6737
	                var ksRow = ksRows - invKsRow;                                                                        // 6738
                                                                                                                       // 6739
	                if (invKsRow % 4) {                                                                                   // 6740
	                    var t = keySchedule[ksRow];                                                                       // 6741
	                } else {                                                                                              // 6742
	                    var t = keySchedule[ksRow - 4];                                                                   // 6743
	                }                                                                                                     // 6744
                                                                                                                       // 6745
	                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 6746
	                    invKeySchedule[invKsRow] = t;                                                                     // 6747
	                } else {                                                                                              // 6748
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }                                                                                                     // 6751
	            }                                                                                                         // 6752
	        },                                                                                                            // 6753
                                                                                                                       // 6754
	        encryptBlock: function (M, offset) {                                                                          // 6755
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 6756
	        },                                                                                                            // 6757
                                                                                                                       // 6758
	        decryptBlock: function (M, offset) {                                                                          // 6759
	            // Swap 2nd and 4th rows                                                                                  // 6760
	            var t = M[offset + 1];                                                                                    // 6761
	            M[offset + 1] = M[offset + 3];                                                                            // 6762
	            M[offset + 3] = t;                                                                                        // 6763
                                                                                                                       // 6764
	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                                                                                                                       // 6766
	            // Inv swap 2nd and 4th rows                                                                              // 6767
	            var t = M[offset + 1];                                                                                    // 6768
	            M[offset + 1] = M[offset + 3];                                                                            // 6769
	            M[offset + 3] = t;                                                                                        // 6770
	        },                                                                                                            // 6771
                                                                                                                       // 6772
	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 6773
	            // Shortcut                                                                                               // 6774
	            var nRounds = this._nRounds;                                                                              // 6775
                                                                                                                       // 6776
	            // Get input, add round key                                                                               // 6777
	            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 6778
	            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 6779
	            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 6780
	            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 6781
                                                                                                                       // 6782
	            // Key schedule row counter                                                                               // 6783
	            var ksRow = 4;                                                                                            // 6784
                                                                                                                       // 6785
	            // Rounds                                                                                                 // 6786
	            for (var round = 1; round < nRounds; round++) {                                                           // 6787
	                // Shift rows, sub bytes, mix columns, add round key                                                  // 6788
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                                                                                                                       // 6793
	                // Update state                                                                                       // 6794
	                s0 = t0;                                                                                              // 6795
	                s1 = t1;                                                                                              // 6796
	                s2 = t2;                                                                                              // 6797
	                s3 = t3;                                                                                              // 6798
	            }                                                                                                         // 6799
                                                                                                                       // 6800
	            // Shift rows, sub bytes, add round key                                                                   // 6801
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                                                                                                                       // 6806
	            // Set output                                                                                             // 6807
	            M[offset]     = t0;                                                                                       // 6808
	            M[offset + 1] = t1;                                                                                       // 6809
	            M[offset + 2] = t2;                                                                                       // 6810
	            M[offset + 3] = t3;                                                                                       // 6811
	        },                                                                                                            // 6812
                                                                                                                       // 6813
	        keySize: 256/32                                                                                               // 6814
	    });                                                                                                               // 6815
                                                                                                                       // 6816
	    /**                                                                                                               // 6817
	     * Shortcut functions to the cipher's object interface.                                                           // 6818
	     *                                                                                                                // 6819
	     * @example                                                                                                       // 6820
	     *                                                                                                                // 6821
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 6822
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 6823
	     */                                                                                                               // 6824
	    C.AES = BlockCipher._createHelper(AES);                                                                           // 6825
	}());                                                                                                                 // 6826
                                                                                                                       // 6827
                                                                                                                       // 6828
	return CryptoJS.AES;                                                                                                  // 6829
                                                                                                                       // 6830
}));                                                                                                                   // 6831
},{"./cipher-core":52,"./core":53,"./enc-base64":54,"./evpkdf":56,"./md5":61}],52:[function(require,module,exports){   // 6832
;(function (root, factory) {                                                                                           // 6833
	if (typeof exports === "object") {                                                                                    // 6834
		// CommonJS                                                                                                          // 6835
		module.exports = exports = factory(require("./core"));                                                               // 6836
	}                                                                                                                     // 6837
	else if (typeof define === "function" && define.amd) {                                                                // 6838
		// AMD                                                                                                               // 6839
		define(["./core"], factory);                                                                                         // 6840
	}                                                                                                                     // 6841
	else {                                                                                                                // 6842
		// Global (browser)                                                                                                  // 6843
		factory(root.CryptoJS);                                                                                              // 6844
	}                                                                                                                     // 6845
}(this, function (CryptoJS) {                                                                                          // 6846
                                                                                                                       // 6847
	/**                                                                                                                   // 6848
	 * Cipher core components.                                                                                            // 6849
	 */                                                                                                                   // 6850
	CryptoJS.lib.Cipher || (function (undefined) {                                                                        // 6851
	    // Shortcuts                                                                                                      // 6852
	    var C = CryptoJS;                                                                                                 // 6853
	    var C_lib = C.lib;                                                                                                // 6854
	    var Base = C_lib.Base;                                                                                            // 6855
	    var WordArray = C_lib.WordArray;                                                                                  // 6856
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 6857
	    var C_enc = C.enc;                                                                                                // 6858
	    var Utf8 = C_enc.Utf8;                                                                                            // 6859
	    var Base64 = C_enc.Base64;                                                                                        // 6860
	    var C_algo = C.algo;                                                                                              // 6861
	    var EvpKDF = C_algo.EvpKDF;                                                                                       // 6862
                                                                                                                       // 6863
	    /**                                                                                                               // 6864
	     * Abstract base cipher template.                                                                                 // 6865
	     *                                                                                                                // 6866
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 6867
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 6868
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 6869
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 6870
	     */                                                                                                               // 6871
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 6872
	        /**                                                                                                           // 6873
	         * Configuration options.                                                                                     // 6874
	         *                                                                                                            // 6875
	         * @property {WordArray} iv The IV to use for this operation.                                                 // 6876
	         */                                                                                                           // 6877
	        cfg: Base.extend(),                                                                                           // 6878
                                                                                                                       // 6879
	        /**                                                                                                           // 6880
	         * Creates this cipher in encryption mode.                                                                    // 6881
	         *                                                                                                            // 6882
	         * @param {WordArray} key The key.                                                                            // 6883
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6884
	         *                                                                                                            // 6885
	         * @return {Cipher} A cipher instance.                                                                        // 6886
	         *                                                                                                            // 6887
	         * @static                                                                                                    // 6888
	         *                                                                                                            // 6889
	         * @example                                                                                                   // 6890
	         *                                                                                                            // 6891
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 6892
	         */                                                                                                           // 6893
	        createEncryptor: function (key, cfg) {                                                                        // 6894
	            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 6895
	        },                                                                                                            // 6896
                                                                                                                       // 6897
	        /**                                                                                                           // 6898
	         * Creates this cipher in decryption mode.                                                                    // 6899
	         *                                                                                                            // 6900
	         * @param {WordArray} key The key.                                                                            // 6901
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6902
	         *                                                                                                            // 6903
	         * @return {Cipher} A cipher instance.                                                                        // 6904
	         *                                                                                                            // 6905
	         * @static                                                                                                    // 6906
	         *                                                                                                            // 6907
	         * @example                                                                                                   // 6908
	         *                                                                                                            // 6909
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 6910
	         */                                                                                                           // 6911
	        createDecryptor: function (key, cfg) {                                                                        // 6912
	            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 6913
	        },                                                                                                            // 6914
                                                                                                                       // 6915
	        /**                                                                                                           // 6916
	         * Initializes a newly created cipher.                                                                        // 6917
	         *                                                                                                            // 6918
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 6919
	         * @param {WordArray} key The key.                                                                            // 6920
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6921
	         *                                                                                                            // 6922
	         * @example                                                                                                   // 6923
	         *                                                                                                            // 6924
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */                                                                                                           // 6926
	        init: function (xformMode, key, cfg) {                                                                        // 6927
	            // Apply config defaults                                                                                  // 6928
	            this.cfg = this.cfg.extend(cfg);                                                                          // 6929
                                                                                                                       // 6930
	            // Store transform mode and key                                                                           // 6931
	            this._xformMode = xformMode;                                                                              // 6932
	            this._key = key;                                                                                          // 6933
                                                                                                                       // 6934
	            // Set initial values                                                                                     // 6935
	            this.reset();                                                                                             // 6936
	        },                                                                                                            // 6937
                                                                                                                       // 6938
	        /**                                                                                                           // 6939
	         * Resets this cipher to its initial state.                                                                   // 6940
	         *                                                                                                            // 6941
	         * @example                                                                                                   // 6942
	         *                                                                                                            // 6943
	         *     cipher.reset();                                                                                        // 6944
	         */                                                                                                           // 6945
	        reset: function () {                                                                                          // 6946
	            // Reset data buffer                                                                                      // 6947
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 6948
                                                                                                                       // 6949
	            // Perform concrete-cipher logic                                                                          // 6950
	            this._doReset();                                                                                          // 6951
	        },                                                                                                            // 6952
                                                                                                                       // 6953
	        /**                                                                                                           // 6954
	         * Adds data to be encrypted or decrypted.                                                                    // 6955
	         *                                                                                                            // 6956
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 6957
	         *                                                                                                            // 6958
	         * @return {WordArray} The data after processing.                                                             // 6959
	         *                                                                                                            // 6960
	         * @example                                                                                                   // 6961
	         *                                                                                                            // 6962
	         *     var encrypted = cipher.process('data');                                                                // 6963
	         *     var encrypted = cipher.process(wordArray);                                                             // 6964
	         */                                                                                                           // 6965
	        process: function (dataUpdate) {                                                                              // 6966
	            // Append                                                                                                 // 6967
	            this._append(dataUpdate);                                                                                 // 6968
                                                                                                                       // 6969
	            // Process available blocks                                                                               // 6970
	            return this._process();                                                                                   // 6971
	        },                                                                                                            // 6972
                                                                                                                       // 6973
	        /**                                                                                                           // 6974
	         * Finalizes the encryption or decryption process.                                                            // 6975
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 6976
	         *                                                                                                            // 6977
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 6978
	         *                                                                                                            // 6979
	         * @return {WordArray} The data after final processing.                                                       // 6980
	         *                                                                                                            // 6981
	         * @example                                                                                                   // 6982
	         *                                                                                                            // 6983
	         *     var encrypted = cipher.finalize();                                                                     // 6984
	         *     var encrypted = cipher.finalize('data');                                                               // 6985
	         *     var encrypted = cipher.finalize(wordArray);                                                            // 6986
	         */                                                                                                           // 6987
	        finalize: function (dataUpdate) {                                                                             // 6988
	            // Final data update                                                                                      // 6989
	            if (dataUpdate) {                                                                                         // 6990
	                this._append(dataUpdate);                                                                             // 6991
	            }                                                                                                         // 6992
                                                                                                                       // 6993
	            // Perform concrete-cipher logic                                                                          // 6994
	            var finalProcessedData = this._doFinalize();                                                              // 6995
                                                                                                                       // 6996
	            return finalProcessedData;                                                                                // 6997
	        },                                                                                                            // 6998
                                                                                                                       // 6999
	        keySize: 128/32,                                                                                              // 7000
                                                                                                                       // 7001
	        ivSize: 128/32,                                                                                               // 7002
                                                                                                                       // 7003
	        _ENC_XFORM_MODE: 1,                                                                                           // 7004
                                                                                                                       // 7005
	        _DEC_XFORM_MODE: 2,                                                                                           // 7006
                                                                                                                       // 7007
	        /**                                                                                                           // 7008
	         * Creates shortcut functions to a cipher's object interface.                                                 // 7009
	         *                                                                                                            // 7010
	         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 7011
	         *                                                                                                            // 7012
	         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 7013
	         *                                                                                                            // 7014
	         * @static                                                                                                    // 7015
	         *                                                                                                            // 7016
	         * @example                                                                                                   // 7017
	         *                                                                                                            // 7018
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 7019
	         */                                                                                                           // 7020
	        _createHelper: (function () {                                                                                 // 7021
	            function selectCipherStrategy(key) {                                                                      // 7022
	                if (typeof key == 'string') {                                                                         // 7023
	                    return PasswordBasedCipher;                                                                       // 7024
	                } else {                                                                                              // 7025
	                    return SerializableCipher;                                                                        // 7026
	                }                                                                                                     // 7027
	            }                                                                                                         // 7028
                                                                                                                       // 7029
	            return function (cipher) {                                                                                // 7030
	                return {                                                                                              // 7031
	                    encrypt: function (message, key, cfg) {                                                           // 7032
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 7033
	                    },                                                                                                // 7034
                                                                                                                       // 7035
	                    decrypt: function (ciphertext, key, cfg) {                                                        // 7036
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 7037
	                    }                                                                                                 // 7038
	                };                                                                                                    // 7039
	            };                                                                                                        // 7040
	        }())                                                                                                          // 7041
	    });                                                                                                               // 7042
                                                                                                                       // 7043
	    /**                                                                                                               // 7044
	     * Abstract base stream cipher template.                                                                          // 7045
	     *                                                                                                                // 7046
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 7047
	     */                                                                                                               // 7048
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 7049
	        _doFinalize: function () {                                                                                    // 7050
	            // Process partial blocks                                                                                 // 7051
	            var finalProcessedBlocks = this._process(!!'flush');                                                      // 7052
                                                                                                                       // 7053
	            return finalProcessedBlocks;                                                                              // 7054
	        },                                                                                                            // 7055
                                                                                                                       // 7056
	        blockSize: 1                                                                                                  // 7057
	    });                                                                                                               // 7058
                                                                                                                       // 7059
	    /**                                                                                                               // 7060
	     * Mode namespace.                                                                                                // 7061
	     */                                                                                                               // 7062
	    var C_mode = C.mode = {};                                                                                         // 7063
                                                                                                                       // 7064
	    /**                                                                                                               // 7065
	     * Abstract base block cipher mode template.                                                                      // 7066
	     */                                                                                                               // 7067
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 7068
	        /**                                                                                                           // 7069
	         * Creates this mode for encryption.                                                                          // 7070
	         *                                                                                                            // 7071
	         * @param {Cipher} cipher A block cipher instance.                                                            // 7072
	         * @param {Array} iv The IV words.                                                                            // 7073
	         *                                                                                                            // 7074
	         * @static                                                                                                    // 7075
	         *                                                                                                            // 7076
	         * @example                                                                                                   // 7077
	         *                                                                                                            // 7078
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 7079
	         */                                                                                                           // 7080
	        createEncryptor: function (cipher, iv) {                                                                      // 7081
	            return this.Encryptor.create(cipher, iv);                                                                 // 7082
	        },                                                                                                            // 7083
                                                                                                                       // 7084
	        /**                                                                                                           // 7085
	         * Creates this mode for decryption.                                                                          // 7086
	         *                                                                                                            // 7087
	         * @param {Cipher} cipher A block cipher instance.                                                            // 7088
	         * @param {Array} iv The IV words.                                                                            // 7089
	         *                                                                                                            // 7090
	         * @static                                                                                                    // 7091
	         *                                                                                                            // 7092
	         * @example                                                                                                   // 7093
	         *                                                                                                            // 7094
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 7095
	         */                                                                                                           // 7096
	        createDecryptor: function (cipher, iv) {                                                                      // 7097
	            return this.Decryptor.create(cipher, iv);                                                                 // 7098
	        },                                                                                                            // 7099
                                                                                                                       // 7100
	        /**                                                                                                           // 7101
	         * Initializes a newly created mode.                                                                          // 7102
	         *                                                                                                            // 7103
	         * @param {Cipher} cipher A block cipher instance.                                                            // 7104
	         * @param {Array} iv The IV words.                                                                            // 7105
	         *                                                                                                            // 7106
	         * @example                                                                                                   // 7107
	         *                                                                                                            // 7108
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 7109
	         */                                                                                                           // 7110
	        init: function (cipher, iv) {                                                                                 // 7111
	            this._cipher = cipher;                                                                                    // 7112
	            this._iv = iv;                                                                                            // 7113
	        }                                                                                                             // 7114
	    });                                                                                                               // 7115
                                                                                                                       // 7116
	    /**                                                                                                               // 7117
	     * Cipher Block Chaining mode.                                                                                    // 7118
	     */                                                                                                               // 7119
	    var CBC = C_mode.CBC = (function () {                                                                             // 7120
	        /**                                                                                                           // 7121
	         * Abstract base CBC mode.                                                                                    // 7122
	         */                                                                                                           // 7123
	        var CBC = BlockCipherMode.extend();                                                                           // 7124
                                                                                                                       // 7125
	        /**                                                                                                           // 7126
	         * CBC encryptor.                                                                                             // 7127
	         */                                                                                                           // 7128
	        CBC.Encryptor = CBC.extend({                                                                                  // 7129
	            /**                                                                                                       // 7130
	             * Processes the data block at offset.                                                                    // 7131
	             *                                                                                                        // 7132
	             * @param {Array} words The data words to operate on.                                                     // 7133
	             * @param {number} offset The offset where the block starts.                                              // 7134
	             *                                                                                                        // 7135
	             * @example                                                                                               // 7136
	             *                                                                                                        // 7137
	             *     mode.processBlock(data.words, offset);                                                             // 7138
	             */                                                                                                       // 7139
	            processBlock: function (words, offset) {                                                                  // 7140
	                // Shortcuts                                                                                          // 7141
	                var cipher = this._cipher;                                                                            // 7142
	                var blockSize = cipher.blockSize;                                                                     // 7143
                                                                                                                       // 7144
	                // XOR and encrypt                                                                                    // 7145
	                xorBlock.call(this, words, offset, blockSize);                                                        // 7146
	                cipher.encryptBlock(words, offset);                                                                   // 7147
                                                                                                                       // 7148
	                // Remember this block to use with next block                                                         // 7149
	                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 7150
	            }                                                                                                         // 7151
	        });                                                                                                           // 7152
                                                                                                                       // 7153
	        /**                                                                                                           // 7154
	         * CBC decryptor.                                                                                             // 7155
	         */                                                                                                           // 7156
	        CBC.Decryptor = CBC.extend({                                                                                  // 7157
	            /**                                                                                                       // 7158
	             * Processes the data block at offset.                                                                    // 7159
	             *                                                                                                        // 7160
	             * @param {Array} words The data words to operate on.                                                     // 7161
	             * @param {number} offset The offset where the block starts.                                              // 7162
	             *                                                                                                        // 7163
	             * @example                                                                                               // 7164
	             *                                                                                                        // 7165
	             *     mode.processBlock(data.words, offset);                                                             // 7166
	             */                                                                                                       // 7167
	            processBlock: function (words, offset) {                                                                  // 7168
	                // Shortcuts                                                                                          // 7169
	                var cipher = this._cipher;                                                                            // 7170
	                var blockSize = cipher.blockSize;                                                                     // 7171
                                                                                                                       // 7172
	                // Remember this block to use with next block                                                         // 7173
	                var thisBlock = words.slice(offset, offset + blockSize);                                              // 7174
                                                                                                                       // 7175
	                // Decrypt and XOR                                                                                    // 7176
	                cipher.decryptBlock(words, offset);                                                                   // 7177
	                xorBlock.call(this, words, offset, blockSize);                                                        // 7178
                                                                                                                       // 7179
	                // This block becomes the previous block                                                              // 7180
	                this._prevBlock = thisBlock;                                                                          // 7181
	            }                                                                                                         // 7182
	        });                                                                                                           // 7183
                                                                                                                       // 7184
	        function xorBlock(words, offset, blockSize) {                                                                 // 7185
	            // Shortcut                                                                                               // 7186
	            var iv = this._iv;                                                                                        // 7187
                                                                                                                       // 7188
	            // Choose mixing block                                                                                    // 7189
	            if (iv) {                                                                                                 // 7190
	                var block = iv;                                                                                       // 7191
                                                                                                                       // 7192
	                // Remove IV for subsequent blocks                                                                    // 7193
	                this._iv = undefined;                                                                                 // 7194
	            } else {                                                                                                  // 7195
	                var block = this._prevBlock;                                                                          // 7196
	            }                                                                                                         // 7197
                                                                                                                       // 7198
	            // XOR blocks                                                                                             // 7199
	            for (var i = 0; i < blockSize; i++) {                                                                     // 7200
	                words[offset + i] ^= block[i];                                                                        // 7201
	            }                                                                                                         // 7202
	        }                                                                                                             // 7203
                                                                                                                       // 7204
	        return CBC;                                                                                                   // 7205
	    }());                                                                                                             // 7206
                                                                                                                       // 7207
	    /**                                                                                                               // 7208
	     * Padding namespace.                                                                                             // 7209
	     */                                                                                                               // 7210
	    var C_pad = C.pad = {};                                                                                           // 7211
                                                                                                                       // 7212
	    /**                                                                                                               // 7213
	     * PKCS #5/7 padding strategy.                                                                                    // 7214
	     */                                                                                                               // 7215
	    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 7216
	        /**                                                                                                           // 7217
	         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 7218
	         *                                                                                                            // 7219
	         * @param {WordArray} data The data to pad.                                                                   // 7220
	         * @param {number} blockSize The multiple that the data should be padded to.                                  // 7221
	         *                                                                                                            // 7222
	         * @static                                                                                                    // 7223
	         *                                                                                                            // 7224
	         * @example                                                                                                   // 7225
	         *                                                                                                            // 7226
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 7227
	         */                                                                                                           // 7228
	        pad: function (data, blockSize) {                                                                             // 7229
	            // Shortcut                                                                                               // 7230
	            var blockSizeBytes = blockSize * 4;                                                                       // 7231
                                                                                                                       // 7232
	            // Count padding bytes                                                                                    // 7233
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 7234
                                                                                                                       // 7235
	            // Create padding word                                                                                    // 7236
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 7237
                                                                                                                       // 7238
	            // Create padding                                                                                         // 7239
	            var paddingWords = [];                                                                                    // 7240
	            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 7241
	                paddingWords.push(paddingWord);                                                                       // 7242
	            }                                                                                                         // 7243
	            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 7244
                                                                                                                       // 7245
	            // Add padding                                                                                            // 7246
	            data.concat(padding);                                                                                     // 7247
	        },                                                                                                            // 7248
                                                                                                                       // 7249
	        /**                                                                                                           // 7250
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 7251
	         *                                                                                                            // 7252
	         * @param {WordArray} data The data to unpad.                                                                 // 7253
	         *                                                                                                            // 7254
	         * @static                                                                                                    // 7255
	         *                                                                                                            // 7256
	         * @example                                                                                                   // 7257
	         *                                                                                                            // 7258
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 7259
	         */                                                                                                           // 7260
	        unpad: function (data) {                                                                                      // 7261
	            // Get number of padding bytes from last byte                                                             // 7262
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 7263
                                                                                                                       // 7264
	            // Remove padding                                                                                         // 7265
	            data.sigBytes -= nPaddingBytes;                                                                           // 7266
	        }                                                                                                             // 7267
	    };                                                                                                                // 7268
                                                                                                                       // 7269
	    /**                                                                                                               // 7270
	     * Abstract base block cipher template.                                                                           // 7271
	     *                                                                                                                // 7272
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 7273
	     */                                                                                                               // 7274
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 7275
	        /**                                                                                                           // 7276
	         * Configuration options.                                                                                     // 7277
	         *                                                                                                            // 7278
	         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 7279
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 7280
	         */                                                                                                           // 7281
	        cfg: Cipher.cfg.extend({                                                                                      // 7282
	            mode: CBC,                                                                                                // 7283
	            padding: Pkcs7                                                                                            // 7284
	        }),                                                                                                           // 7285
                                                                                                                       // 7286
	        reset: function () {                                                                                          // 7287
	            // Reset cipher                                                                                           // 7288
	            Cipher.reset.call(this);                                                                                  // 7289
                                                                                                                       // 7290
	            // Shortcuts                                                                                              // 7291
	            var cfg = this.cfg;                                                                                       // 7292
	            var iv = cfg.iv;                                                                                          // 7293
	            var mode = cfg.mode;                                                                                      // 7294
                                                                                                                       // 7295
	            // Reset block mode                                                                                       // 7296
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 7297
	                var modeCreator = mode.createEncryptor;                                                               // 7298
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 7299
	                var modeCreator = mode.createDecryptor;                                                               // 7300
                                                                                                                       // 7301
	                // Keep at least one block in the buffer for unpadding                                                // 7302
	                this._minBufferSize = 1;                                                                              // 7303
	            }                                                                                                         // 7304
	            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 7305
	        },                                                                                                            // 7306
                                                                                                                       // 7307
	        _doProcessBlock: function (words, offset) {                                                                   // 7308
	            this._mode.processBlock(words, offset);                                                                   // 7309
	        },                                                                                                            // 7310
                                                                                                                       // 7311
	        _doFinalize: function () {                                                                                    // 7312
	            // Shortcut                                                                                               // 7313
	            var padding = this.cfg.padding;                                                                           // 7314
                                                                                                                       // 7315
	            // Finalize                                                                                               // 7316
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 7317
	                // Pad data                                                                                           // 7318
	                padding.pad(this._data, this.blockSize);                                                              // 7319
                                                                                                                       // 7320
	                // Process final blocks                                                                               // 7321
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 7322
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 7323
	                // Process final blocks                                                                               // 7324
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 7325
                                                                                                                       // 7326
	                // Unpad data                                                                                         // 7327
	                padding.unpad(finalProcessedBlocks);                                                                  // 7328
	            }                                                                                                         // 7329
                                                                                                                       // 7330
	            return finalProcessedBlocks;                                                                              // 7331
	        },                                                                                                            // 7332
                                                                                                                       // 7333
	        blockSize: 128/32                                                                                             // 7334
	    });                                                                                                               // 7335
                                                                                                                       // 7336
	    /**                                                                                                               // 7337
	     * A collection of cipher parameters.                                                                             // 7338
	     *                                                                                                                // 7339
	     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 7340
	     * @property {WordArray} key The key to this ciphertext.                                                          // 7341
	     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 7342
	     * @property {WordArray} salt The salt used with a key derivation function.                                       // 7343
	     * @property {Cipher} algorithm The cipher algorithm.                                                             // 7344
	     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 7345
	     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 7346
	     * @property {number} blockSize The block size of the cipher.                                                     // 7347
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */                                                                                                               // 7349
	    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 7350
	        /**                                                                                                           // 7351
	         * Initializes a newly created cipher params object.                                                          // 7352
	         *                                                                                                            // 7353
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 7354
	         *                                                                                                            // 7355
	         * @example                                                                                                   // 7356
	         *                                                                                                            // 7357
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 7358
	         *         ciphertext: ciphertextWordArray,                                                                   // 7359
	         *         key: keyWordArray,                                                                                 // 7360
	         *         iv: ivWordArray,                                                                                   // 7361
	         *         salt: saltWordArray,                                                                               // 7362
	         *         algorithm: CryptoJS.algo.AES,                                                                      // 7363
	         *         mode: CryptoJS.mode.CBC,                                                                           // 7364
	         *         padding: CryptoJS.pad.PKCS7,                                                                       // 7365
	         *         blockSize: 4,                                                                                      // 7366
	         *         formatter: CryptoJS.format.OpenSSL                                                                 // 7367
	         *     });                                                                                                    // 7368
	         */                                                                                                           // 7369
	        init: function (cipherParams) {                                                                               // 7370
	            this.mixIn(cipherParams);                                                                                 // 7371
	        },                                                                                                            // 7372
                                                                                                                       // 7373
	        /**                                                                                                           // 7374
	         * Converts this cipher params object to a string.                                                            // 7375
	         *                                                                                                            // 7376
	         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 7377
	         *                                                                                                            // 7378
	         * @return {string} The stringified cipher params.                                                            // 7379
	         *                                                                                                            // 7380
	         * @throws Error If neither the formatter nor the default formatter is set.                                   // 7381
	         *                                                                                                            // 7382
	         * @example                                                                                                   // 7383
	         *                                                                                                            // 7384
	         *     var string = cipherParams + '';                                                                        // 7385
	         *     var string = cipherParams.toString();                                                                  // 7386
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 7387
	         */                                                                                                           // 7388
	        toString: function (formatter) {                                                                              // 7389
	            return (formatter || this.formatter).stringify(this);                                                     // 7390
	        }                                                                                                             // 7391
	    });                                                                                                               // 7392
                                                                                                                       // 7393
	    /**                                                                                                               // 7394
	     * Format namespace.                                                                                              // 7395
	     */                                                                                                               // 7396
	    var C_format = C.format = {};                                                                                     // 7397
                                                                                                                       // 7398
	    /**                                                                                                               // 7399
	     * OpenSSL formatting strategy.                                                                                   // 7400
	     */                                                                                                               // 7401
	    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 7402
	        /**                                                                                                           // 7403
	         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 7404
	         *                                                                                                            // 7405
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 7406
	         *                                                                                                            // 7407
	         * @return {string} The OpenSSL-compatible string.                                                            // 7408
	         *                                                                                                            // 7409
	         * @static                                                                                                    // 7410
	         *                                                                                                            // 7411
	         * @example                                                                                                   // 7412
	         *                                                                                                            // 7413
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 7414
	         */                                                                                                           // 7415
	        stringify: function (cipherParams) {                                                                          // 7416
	            // Shortcuts                                                                                              // 7417
	            var ciphertext = cipherParams.ciphertext;                                                                 // 7418
	            var salt = cipherParams.salt;                                                                             // 7419
                                                                                                                       // 7420
	            // Format                                                                                                 // 7421
	            if (salt) {                                                                                               // 7422
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 7423
	            } else {                                                                                                  // 7424
	                var wordArray = ciphertext;                                                                           // 7425
	            }                                                                                                         // 7426
                                                                                                                       // 7427
	            return wordArray.toString(Base64);                                                                        // 7428
	        },                                                                                                            // 7429
                                                                                                                       // 7430
	        /**                                                                                                           // 7431
	         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 7432
	         *                                                                                                            // 7433
	         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 7434
	         *                                                                                                            // 7435
	         * @return {CipherParams} The cipher params object.                                                           // 7436
	         *                                                                                                            // 7437
	         * @static                                                                                                    // 7438
	         *                                                                                                            // 7439
	         * @example                                                                                                   // 7440
	         *                                                                                                            // 7441
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 7442
	         */                                                                                                           // 7443
	        parse: function (openSSLStr) {                                                                                // 7444
	            // Parse base64                                                                                           // 7445
	            var ciphertext = Base64.parse(openSSLStr);                                                                // 7446
                                                                                                                       // 7447
	            // Shortcut                                                                                               // 7448
	            var ciphertextWords = ciphertext.words;                                                                   // 7449
                                                                                                                       // 7450
	            // Test for salt                                                                                          // 7451
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 7452
	                // Extract salt                                                                                       // 7453
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 7454
                                                                                                                       // 7455
	                // Remove salt from ciphertext                                                                        // 7456
	                ciphertextWords.splice(0, 4);                                                                         // 7457
	                ciphertext.sigBytes -= 16;                                                                            // 7458
	            }                                                                                                         // 7459
                                                                                                                       // 7460
	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 7461
	        }                                                                                                             // 7462
	    };                                                                                                                // 7463
                                                                                                                       // 7464
	    /**                                                                                                               // 7465
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 7466
	     */                                                                                                               // 7467
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 7468
	        /**                                                                                                           // 7469
	         * Configuration options.                                                                                     // 7470
	         *                                                                                                            // 7471
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */                                                                                                           // 7473
	        cfg: Base.extend({                                                                                            // 7474
	            format: OpenSSLFormatter                                                                                  // 7475
	        }),                                                                                                           // 7476
                                                                                                                       // 7477
	        /**                                                                                                           // 7478
	         * Encrypts a message.                                                                                        // 7479
	         *                                                                                                            // 7480
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7481
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7482
	         * @param {WordArray} key The key.                                                                            // 7483
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7484
	         *                                                                                                            // 7485
	         * @return {CipherParams} A cipher params object.                                                             // 7486
	         *                                                                                                            // 7487
	         * @static                                                                                                    // 7488
	         *                                                                                                            // 7489
	         * @example                                                                                                   // 7490
	         *                                                                                                            // 7491
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 7492
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7495
	        encrypt: function (cipher, message, key, cfg) {                                                               // 7496
	            // Apply config defaults                                                                                  // 7497
	            cfg = this.cfg.extend(cfg);                                                                               // 7498
                                                                                                                       // 7499
	            // Encrypt                                                                                                // 7500
	            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 7501
	            var ciphertext = encryptor.finalize(message);                                                             // 7502
                                                                                                                       // 7503
	            // Shortcut                                                                                               // 7504
	            var cipherCfg = encryptor.cfg;                                                                            // 7505
                                                                                                                       // 7506
	            // Create and return serializable cipher params                                                           // 7507
	            return CipherParams.create({                                                                              // 7508
	                ciphertext: ciphertext,                                                                               // 7509
	                key: key,                                                                                             // 7510
	                iv: cipherCfg.iv,                                                                                     // 7511
	                algorithm: cipher,                                                                                    // 7512
	                mode: cipherCfg.mode,                                                                                 // 7513
	                padding: cipherCfg.padding,                                                                           // 7514
	                blockSize: cipher.blockSize,                                                                          // 7515
	                formatter: cfg.format                                                                                 // 7516
	            });                                                                                                       // 7517
	        },                                                                                                            // 7518
                                                                                                                       // 7519
	        /**                                                                                                           // 7520
	         * Decrypts serialized ciphertext.                                                                            // 7521
	         *                                                                                                            // 7522
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7523
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7524
	         * @param {WordArray} key The key.                                                                            // 7525
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7526
	         *                                                                                                            // 7527
	         * @return {WordArray} The plaintext.                                                                         // 7528
	         *                                                                                                            // 7529
	         * @static                                                                                                    // 7530
	         *                                                                                                            // 7531
	         * @example                                                                                                   // 7532
	         *                                                                                                            // 7533
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7536
	        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 7537
	            // Apply config defaults                                                                                  // 7538
	            cfg = this.cfg.extend(cfg);                                                                               // 7539
                                                                                                                       // 7540
	            // Convert string to CipherParams                                                                         // 7541
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7542
                                                                                                                       // 7543
	            // Decrypt                                                                                                // 7544
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 7545
                                                                                                                       // 7546
	            return plaintext;                                                                                         // 7547
	        },                                                                                                            // 7548
                                                                                                                       // 7549
	        /**                                                                                                           // 7550
	         * Converts serialized ciphertext to CipherParams,                                                            // 7551
	         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 7552
	         *                                                                                                            // 7553
	         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 7554
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 7555
	         *                                                                                                            // 7556
	         * @return {CipherParams} The unserialized ciphertext.                                                        // 7557
	         *                                                                                                            // 7558
	         * @static                                                                                                    // 7559
	         *                                                                                                            // 7560
	         * @example                                                                                                   // 7561
	         *                                                                                                            // 7562
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 7563
	         */                                                                                                           // 7564
	        _parse: function (ciphertext, format) {                                                                       // 7565
	            if (typeof ciphertext == 'string') {                                                                      // 7566
	                return format.parse(ciphertext, this);                                                                // 7567
	            } else {                                                                                                  // 7568
	                return ciphertext;                                                                                    // 7569
	            }                                                                                                         // 7570
	        }                                                                                                             // 7571
	    });                                                                                                               // 7572
                                                                                                                       // 7573
	    /**                                                                                                               // 7574
	     * Key derivation function namespace.                                                                             // 7575
	     */                                                                                                               // 7576
	    var C_kdf = C.kdf = {};                                                                                           // 7577
                                                                                                                       // 7578
	    /**                                                                                                               // 7579
	     * OpenSSL key derivation function.                                                                               // 7580
	     */                                                                                                               // 7581
	    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 7582
	        /**                                                                                                           // 7583
	         * Derives a key and IV from a password.                                                                      // 7584
	         *                                                                                                            // 7585
	         * @param {string} password The password to derive from.                                                      // 7586
	         * @param {number} keySize The size in words of the key to generate.                                          // 7587
	         * @param {number} ivSize The size in words of the IV to generate.                                            // 7588
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *                                                                                                            // 7590
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 7591
	         *                                                                                                            // 7592
	         * @static                                                                                                    // 7593
	         *                                                                                                            // 7594
	         * @example                                                                                                   // 7595
	         *                                                                                                            // 7596
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 7597
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 7598
	         */                                                                                                           // 7599
	        execute: function (password, keySize, ivSize, salt) {                                                         // 7600
	            // Generate random salt                                                                                   // 7601
	            if (!salt) {                                                                                              // 7602
	                salt = WordArray.random(64/8);                                                                        // 7603
	            }                                                                                                         // 7604
                                                                                                                       // 7605
	            // Derive key and IV                                                                                      // 7606
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 7607
                                                                                                                       // 7608
	            // Separate key and IV                                                                                    // 7609
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 7610
	            key.sigBytes = keySize * 4;                                                                               // 7611
                                                                                                                       // 7612
	            // Return params                                                                                          // 7613
	            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 7614
	        }                                                                                                             // 7615
	    };                                                                                                                // 7616
                                                                                                                       // 7617
	    /**                                                                                                               // 7618
	     * A serializable cipher wrapper that derives the key from a password,                                            // 7619
	     * and returns ciphertext as a serializable cipher params object.                                                 // 7620
	     */                                                                                                               // 7621
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 7622
	        /**                                                                                                           // 7623
	         * Configuration options.                                                                                     // 7624
	         *                                                                                                            // 7625
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */                                                                                                           // 7627
	        cfg: SerializableCipher.cfg.extend({                                                                          // 7628
	            kdf: OpenSSLKdf                                                                                           // 7629
	        }),                                                                                                           // 7630
                                                                                                                       // 7631
	        /**                                                                                                           // 7632
	         * Encrypts a message using a password.                                                                       // 7633
	         *                                                                                                            // 7634
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7635
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7636
	         * @param {string} password The password.                                                                     // 7637
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7638
	         *                                                                                                            // 7639
	         * @return {CipherParams} A cipher params object.                                                             // 7640
	         *                                                                                                            // 7641
	         * @static                                                                                                    // 7642
	         *                                                                                                            // 7643
	         * @example                                                                                                   // 7644
	         *                                                                                                            // 7645
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7648
	        encrypt: function (cipher, message, password, cfg) {                                                          // 7649
	            // Apply config defaults                                                                                  // 7650
	            cfg = this.cfg.extend(cfg);                                                                               // 7651
                                                                                                                       // 7652
	            // Derive key and other params                                                                            // 7653
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 7654
                                                                                                                       // 7655
	            // Add IV to config                                                                                       // 7656
	            cfg.iv = derivedParams.iv;                                                                                // 7657
                                                                                                                       // 7658
	            // Encrypt                                                                                                // 7659
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 7660
                                                                                                                       // 7661
	            // Mix in derived params                                                                                  // 7662
	            ciphertext.mixIn(derivedParams);                                                                          // 7663
                                                                                                                       // 7664
	            return ciphertext;                                                                                        // 7665
	        },                                                                                                            // 7666
                                                                                                                       // 7667
	        /**                                                                                                           // 7668
	         * Decrypts serialized ciphertext using a password.                                                           // 7669
	         *                                                                                                            // 7670
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7671
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7672
	         * @param {string} password The password.                                                                     // 7673
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7674
	         *                                                                                                            // 7675
	         * @return {WordArray} The plaintext.                                                                         // 7676
	         *                                                                                                            // 7677
	         * @static                                                                                                    // 7678
	         *                                                                                                            // 7679
	         * @example                                                                                                   // 7680
	         *                                                                                                            // 7681
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7684
	        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 7685
	            // Apply config defaults                                                                                  // 7686
	            cfg = this.cfg.extend(cfg);                                                                               // 7687
                                                                                                                       // 7688
	            // Convert string to CipherParams                                                                         // 7689
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7690
                                                                                                                       // 7691
	            // Derive key and other params                                                                            // 7692
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 7693
                                                                                                                       // 7694
	            // Add IV to config                                                                                       // 7695
	            cfg.iv = derivedParams.iv;                                                                                // 7696
                                                                                                                       // 7697
	            // Decrypt                                                                                                // 7698
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 7699
                                                                                                                       // 7700
	            return plaintext;                                                                                         // 7701
	        }                                                                                                             // 7702
	    });                                                                                                               // 7703
	}());                                                                                                                 // 7704
                                                                                                                       // 7705
                                                                                                                       // 7706
}));                                                                                                                   // 7707
},{"./core":53}],53:[function(require,module,exports){                                                                 // 7708
;(function (root, factory) {                                                                                           // 7709
	if (typeof exports === "object") {                                                                                    // 7710
		// CommonJS                                                                                                          // 7711
		module.exports = exports = factory();                                                                                // 7712
	}                                                                                                                     // 7713
	else if (typeof define === "function" && define.amd) {                                                                // 7714
		// AMD                                                                                                               // 7715
		define([], factory);                                                                                                 // 7716
	}                                                                                                                     // 7717
	else {                                                                                                                // 7718
		// Global (browser)                                                                                                  // 7719
		root.CryptoJS = factory();                                                                                           // 7720
	}                                                                                                                     // 7721
}(this, function () {                                                                                                  // 7722
                                                                                                                       // 7723
	/**                                                                                                                   // 7724
	 * CryptoJS core components.                                                                                          // 7725
	 */                                                                                                                   // 7726
	var CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 7727
	    /*                                                                                                                // 7728
	     * Local polyfil of Object.create                                                                                 // 7729
	     */                                                                                                               // 7730
	    var create = Object.create || (function () {                                                                      // 7731
	        function F() {};                                                                                              // 7732
                                                                                                                       // 7733
	        return function (obj) {                                                                                       // 7734
	            var subtype;                                                                                              // 7735
                                                                                                                       // 7736
	            F.prototype = obj;                                                                                        // 7737
                                                                                                                       // 7738
	            subtype = new F();                                                                                        // 7739
                                                                                                                       // 7740
	            F.prototype = null;                                                                                       // 7741
                                                                                                                       // 7742
	            return subtype;                                                                                           // 7743
	        };                                                                                                            // 7744
	    }())                                                                                                              // 7745
                                                                                                                       // 7746
	    /**                                                                                                               // 7747
	     * CryptoJS namespace.                                                                                            // 7748
	     */                                                                                                               // 7749
	    var C = {};                                                                                                       // 7750
                                                                                                                       // 7751
	    /**                                                                                                               // 7752
	     * Library namespace.                                                                                             // 7753
	     */                                                                                                               // 7754
	    var C_lib = C.lib = {};                                                                                           // 7755
                                                                                                                       // 7756
	    /**                                                                                                               // 7757
	     * Base object for prototypal inheritance.                                                                        // 7758
	     */                                                                                                               // 7759
	    var Base = C_lib.Base = (function () {                                                                            // 7760
                                                                                                                       // 7761
                                                                                                                       // 7762
	        return {                                                                                                      // 7763
	            /**                                                                                                       // 7764
	             * Creates a new object that inherits from this object.                                                   // 7765
	             *                                                                                                        // 7766
	             * @param {Object} overrides Properties to copy into the new object.                                      // 7767
	             *                                                                                                        // 7768
	             * @return {Object} The new object.                                                                       // 7769
	             *                                                                                                        // 7770
	             * @static                                                                                                // 7771
	             *                                                                                                        // 7772
	             * @example                                                                                               // 7773
	             *                                                                                                        // 7774
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7775
	             *         field: 'value',                                                                                // 7776
	             *                                                                                                        // 7777
	             *         method: function () {                                                                          // 7778
	             *         }                                                                                              // 7779
	             *     });                                                                                                // 7780
	             */                                                                                                       // 7781
	            extend: function (overrides) {                                                                            // 7782
	                // Spawn                                                                                              // 7783
	                var subtype = create(this);                                                                           // 7784
                                                                                                                       // 7785
	                // Augment                                                                                            // 7786
	                if (overrides) {                                                                                      // 7787
	                    subtype.mixIn(overrides);                                                                         // 7788
	                }                                                                                                     // 7789
                                                                                                                       // 7790
	                // Create default initializer                                                                         // 7791
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {                                  // 7792
	                    subtype.init = function () {                                                                      // 7793
	                        subtype.$super.init.apply(this, arguments);                                                   // 7794
	                    };                                                                                                // 7795
	                }                                                                                                     // 7796
                                                                                                                       // 7797
	                // Initializer's prototype is the subtype object                                                      // 7798
	                subtype.init.prototype = subtype;                                                                     // 7799
                                                                                                                       // 7800
	                // Reference supertype                                                                                // 7801
	                subtype.$super = this;                                                                                // 7802
                                                                                                                       // 7803
	                return subtype;                                                                                       // 7804
	            },                                                                                                        // 7805
                                                                                                                       // 7806
	            /**                                                                                                       // 7807
	             * Extends this object and runs the init method.                                                          // 7808
	             * Arguments to create() will be passed to init().                                                        // 7809
	             *                                                                                                        // 7810
	             * @return {Object} The new object.                                                                       // 7811
	             *                                                                                                        // 7812
	             * @static                                                                                                // 7813
	             *                                                                                                        // 7814
	             * @example                                                                                               // 7815
	             *                                                                                                        // 7816
	             *     var instance = MyType.create();                                                                    // 7817
	             */                                                                                                       // 7818
	            create: function () {                                                                                     // 7819
	                var instance = this.extend();                                                                         // 7820
	                instance.init.apply(instance, arguments);                                                             // 7821
                                                                                                                       // 7822
	                return instance;                                                                                      // 7823
	            },                                                                                                        // 7824
                                                                                                                       // 7825
	            /**                                                                                                       // 7826
	             * Initializes a newly created object.                                                                    // 7827
	             * Override this method to add some logic when your objects are created.                                  // 7828
	             *                                                                                                        // 7829
	             * @example                                                                                               // 7830
	             *                                                                                                        // 7831
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7832
	             *         init: function () {                                                                            // 7833
	             *             // ...                                                                                     // 7834
	             *         }                                                                                              // 7835
	             *     });                                                                                                // 7836
	             */                                                                                                       // 7837
	            init: function () {                                                                                       // 7838
	            },                                                                                                        // 7839
                                                                                                                       // 7840
	            /**                                                                                                       // 7841
	             * Copies properties into this object.                                                                    // 7842
	             *                                                                                                        // 7843
	             * @param {Object} properties The properties to mix in.                                                   // 7844
	             *                                                                                                        // 7845
	             * @example                                                                                               // 7846
	             *                                                                                                        // 7847
	             *     MyType.mixIn({                                                                                     // 7848
	             *         field: 'value'                                                                                 // 7849
	             *     });                                                                                                // 7850
	             */                                                                                                       // 7851
	            mixIn: function (properties) {                                                                            // 7852
	                for (var propertyName in properties) {                                                                // 7853
	                    if (properties.hasOwnProperty(propertyName)) {                                                    // 7854
	                        this[propertyName] = properties[propertyName];                                                // 7855
	                    }                                                                                                 // 7856
	                }                                                                                                     // 7857
                                                                                                                       // 7858
	                // IE won't copy toString using the loop above                                                        // 7859
	                if (properties.hasOwnProperty('toString')) {                                                          // 7860
	                    this.toString = properties.toString;                                                              // 7861
	                }                                                                                                     // 7862
	            },                                                                                                        // 7863
                                                                                                                       // 7864
	            /**                                                                                                       // 7865
	             * Creates a copy of this object.                                                                         // 7866
	             *                                                                                                        // 7867
	             * @return {Object} The clone.                                                                            // 7868
	             *                                                                                                        // 7869
	             * @example                                                                                               // 7870
	             *                                                                                                        // 7871
	             *     var clone = instance.clone();                                                                      // 7872
	             */                                                                                                       // 7873
	            clone: function () {                                                                                      // 7874
	                return this.init.prototype.extend(this);                                                              // 7875
	            }                                                                                                         // 7876
	        };                                                                                                            // 7877
	    }());                                                                                                             // 7878
                                                                                                                       // 7879
	    /**                                                                                                               // 7880
	     * An array of 32-bit words.                                                                                      // 7881
	     *                                                                                                                // 7882
	     * @property {Array} words The array of 32-bit words.                                                             // 7883
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 7884
	     */                                                                                                               // 7885
	    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 7886
	        /**                                                                                                           // 7887
	         * Initializes a newly created word array.                                                                    // 7888
	         *                                                                                                            // 7889
	         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 7890
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 7891
	         *                                                                                                            // 7892
	         * @example                                                                                                   // 7893
	         *                                                                                                            // 7894
	         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 7895
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 7896
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 7897
	         */                                                                                                           // 7898
	        init: function (words, sigBytes) {                                                                            // 7899
	            words = this.words = words || [];                                                                         // 7900
                                                                                                                       // 7901
	            if (sigBytes != undefined) {                                                                              // 7902
	                this.sigBytes = sigBytes;                                                                             // 7903
	            } else {                                                                                                  // 7904
	                this.sigBytes = words.length * 4;                                                                     // 7905
	            }                                                                                                         // 7906
	        },                                                                                                            // 7907
                                                                                                                       // 7908
	        /**                                                                                                           // 7909
	         * Converts this word array to a string.                                                                      // 7910
	         *                                                                                                            // 7911
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 7912
	         *                                                                                                            // 7913
	         * @return {string} The stringified word array.                                                               // 7914
	         *                                                                                                            // 7915
	         * @example                                                                                                   // 7916
	         *                                                                                                            // 7917
	         *     var string = wordArray + '';                                                                           // 7918
	         *     var string = wordArray.toString();                                                                     // 7919
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 7920
	         */                                                                                                           // 7921
	        toString: function (encoder) {                                                                                // 7922
	            return (encoder || Hex).stringify(this);                                                                  // 7923
	        },                                                                                                            // 7924
                                                                                                                       // 7925
	        /**                                                                                                           // 7926
	         * Concatenates a word array to this word array.                                                              // 7927
	         *                                                                                                            // 7928
	         * @param {WordArray} wordArray The word array to append.                                                     // 7929
	         *                                                                                                            // 7930
	         * @return {WordArray} This word array.                                                                       // 7931
	         *                                                                                                            // 7932
	         * @example                                                                                                   // 7933
	         *                                                                                                            // 7934
	         *     wordArray1.concat(wordArray2);                                                                         // 7935
	         */                                                                                                           // 7936
	        concat: function (wordArray) {                                                                                // 7937
	            // Shortcuts                                                                                              // 7938
	            var thisWords = this.words;                                                                               // 7939
	            var thatWords = wordArray.words;                                                                          // 7940
	            var thisSigBytes = this.sigBytes;                                                                         // 7941
	            var thatSigBytes = wordArray.sigBytes;                                                                    // 7942
                                                                                                                       // 7943
	            // Clamp excess bits                                                                                      // 7944
	            this.clamp();                                                                                             // 7945
                                                                                                                       // 7946
	            // Concat                                                                                                 // 7947
	            if (thisSigBytes % 4) {                                                                                   // 7948
	                // Copy one byte at a time                                                                            // 7949
	                for (var i = 0; i < thatSigBytes; i++) {                                                              // 7950
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 7951
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 7952
	                }                                                                                                     // 7953
	            } else {                                                                                                  // 7954
	                // Copy one word at a time                                                                            // 7955
	                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 7956
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 7957
	                }                                                                                                     // 7958
	            }                                                                                                         // 7959
	            this.sigBytes += thatSigBytes;                                                                            // 7960
                                                                                                                       // 7961
	            // Chainable                                                                                              // 7962
	            return this;                                                                                              // 7963
	        },                                                                                                            // 7964
                                                                                                                       // 7965
	        /**                                                                                                           // 7966
	         * Removes insignificant bits.                                                                                // 7967
	         *                                                                                                            // 7968
	         * @example                                                                                                   // 7969
	         *                                                                                                            // 7970
	         *     wordArray.clamp();                                                                                     // 7971
	         */                                                                                                           // 7972
	        clamp: function () {                                                                                          // 7973
	            // Shortcuts                                                                                              // 7974
	            var words = this.words;                                                                                   // 7975
	            var sigBytes = this.sigBytes;                                                                             // 7976
                                                                                                                       // 7977
	            // Clamp                                                                                                  // 7978
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 7979
	            words.length = Math.ceil(sigBytes / 4);                                                                   // 7980
	        },                                                                                                            // 7981
                                                                                                                       // 7982
	        /**                                                                                                           // 7983
	         * Creates a copy of this word array.                                                                         // 7984
	         *                                                                                                            // 7985
	         * @return {WordArray} The clone.                                                                             // 7986
	         *                                                                                                            // 7987
	         * @example                                                                                                   // 7988
	         *                                                                                                            // 7989
	         *     var clone = wordArray.clone();                                                                         // 7990
	         */                                                                                                           // 7991
	        clone: function () {                                                                                          // 7992
	            var clone = Base.clone.call(this);                                                                        // 7993
	            clone.words = this.words.slice(0);                                                                        // 7994
                                                                                                                       // 7995
	            return clone;                                                                                             // 7996
	        },                                                                                                            // 7997
                                                                                                                       // 7998
	        /**                                                                                                           // 7999
	         * Creates a word array filled with random bytes.                                                             // 8000
	         *                                                                                                            // 8001
	         * @param {number} nBytes The number of random bytes to generate.                                             // 8002
	         *                                                                                                            // 8003
	         * @return {WordArray} The random word array.                                                                 // 8004
	         *                                                                                                            // 8005
	         * @static                                                                                                    // 8006
	         *                                                                                                            // 8007
	         * @example                                                                                                   // 8008
	         *                                                                                                            // 8009
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 8010
	         */                                                                                                           // 8011
	        random: function (nBytes) {                                                                                   // 8012
	            var words = [];                                                                                           // 8013
                                                                                                                       // 8014
	            var r = (function (m_w) {                                                                                 // 8015
	                var m_w = m_w;                                                                                        // 8016
	                var m_z = 0x3ade68b1;                                                                                 // 8017
	                var mask = 0xffffffff;                                                                                // 8018
                                                                                                                       // 8019
	                return function () {                                                                                  // 8020
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 8021
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 8022
	                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 8023
	                    result /= 0x100000000;                                                                            // 8024
	                    result += 0.5;                                                                                    // 8025
	                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 8026
	                }                                                                                                     // 8027
	            });                                                                                                       // 8028
                                                                                                                       // 8029
	            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 8030
	                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 8031
                                                                                                                       // 8032
	                rcache = _r() * 0x3ade67b7;                                                                           // 8033
	                words.push((_r() * 0x100000000) | 0);                                                                 // 8034
	            }                                                                                                         // 8035
                                                                                                                       // 8036
	            return new WordArray.init(words, nBytes);                                                                 // 8037
	        }                                                                                                             // 8038
	    });                                                                                                               // 8039
                                                                                                                       // 8040
	    /**                                                                                                               // 8041
	     * Encoder namespace.                                                                                             // 8042
	     */                                                                                                               // 8043
	    var C_enc = C.enc = {};                                                                                           // 8044
                                                                                                                       // 8045
	    /**                                                                                                               // 8046
	     * Hex encoding strategy.                                                                                         // 8047
	     */                                                                                                               // 8048
	    var Hex = C_enc.Hex = {                                                                                           // 8049
	        /**                                                                                                           // 8050
	         * Converts a word array to a hex string.                                                                     // 8051
	         *                                                                                                            // 8052
	         * @param {WordArray} wordArray The word array.                                                               // 8053
	         *                                                                                                            // 8054
	         * @return {string} The hex string.                                                                           // 8055
	         *                                                                                                            // 8056
	         * @static                                                                                                    // 8057
	         *                                                                                                            // 8058
	         * @example                                                                                                   // 8059
	         *                                                                                                            // 8060
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 8061
	         */                                                                                                           // 8062
	        stringify: function (wordArray) {                                                                             // 8063
	            // Shortcuts                                                                                              // 8064
	            var words = wordArray.words;                                                                              // 8065
	            var sigBytes = wordArray.sigBytes;                                                                        // 8066
                                                                                                                       // 8067
	            // Convert                                                                                                // 8068
	            var hexChars = [];                                                                                        // 8069
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 8070
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 8071
	                hexChars.push((bite >>> 4).toString(16));                                                             // 8072
	                hexChars.push((bite & 0x0f).toString(16));                                                            // 8073
	            }                                                                                                         // 8074
                                                                                                                       // 8075
	            return hexChars.join('');                                                                                 // 8076
	        },                                                                                                            // 8077
                                                                                                                       // 8078
	        /**                                                                                                           // 8079
	         * Converts a hex string to a word array.                                                                     // 8080
	         *                                                                                                            // 8081
	         * @param {string} hexStr The hex string.                                                                     // 8082
	         *                                                                                                            // 8083
	         * @return {WordArray} The word array.                                                                        // 8084
	         *                                                                                                            // 8085
	         * @static                                                                                                    // 8086
	         *                                                                                                            // 8087
	         * @example                                                                                                   // 8088
	         *                                                                                                            // 8089
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 8090
	         */                                                                                                           // 8091
	        parse: function (hexStr) {                                                                                    // 8092
	            // Shortcut                                                                                               // 8093
	            var hexStrLength = hexStr.length;                                                                         // 8094
                                                                                                                       // 8095
	            // Convert                                                                                                // 8096
	            var words = [];                                                                                           // 8097
	            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 8098
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 8099
	            }                                                                                                         // 8100
                                                                                                                       // 8101
	            return new WordArray.init(words, hexStrLength / 2);                                                       // 8102
	        }                                                                                                             // 8103
	    };                                                                                                                // 8104
                                                                                                                       // 8105
	    /**                                                                                                               // 8106
	     * Latin1 encoding strategy.                                                                                      // 8107
	     */                                                                                                               // 8108
	    var Latin1 = C_enc.Latin1 = {                                                                                     // 8109
	        /**                                                                                                           // 8110
	         * Converts a word array to a Latin1 string.                                                                  // 8111
	         *                                                                                                            // 8112
	         * @param {WordArray} wordArray The word array.                                                               // 8113
	         *                                                                                                            // 8114
	         * @return {string} The Latin1 string.                                                                        // 8115
	         *                                                                                                            // 8116
	         * @static                                                                                                    // 8117
	         *                                                                                                            // 8118
	         * @example                                                                                                   // 8119
	         *                                                                                                            // 8120
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 8121
	         */                                                                                                           // 8122
	        stringify: function (wordArray) {                                                                             // 8123
	            // Shortcuts                                                                                              // 8124
	            var words = wordArray.words;                                                                              // 8125
	            var sigBytes = wordArray.sigBytes;                                                                        // 8126
                                                                                                                       // 8127
	            // Convert                                                                                                // 8128
	            var latin1Chars = [];                                                                                     // 8129
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 8130
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 8131
	                latin1Chars.push(String.fromCharCode(bite));                                                          // 8132
	            }                                                                                                         // 8133
                                                                                                                       // 8134
	            return latin1Chars.join('');                                                                              // 8135
	        },                                                                                                            // 8136
                                                                                                                       // 8137
	        /**                                                                                                           // 8138
	         * Converts a Latin1 string to a word array.                                                                  // 8139
	         *                                                                                                            // 8140
	         * @param {string} latin1Str The Latin1 string.                                                               // 8141
	         *                                                                                                            // 8142
	         * @return {WordArray} The word array.                                                                        // 8143
	         *                                                                                                            // 8144
	         * @static                                                                                                    // 8145
	         *                                                                                                            // 8146
	         * @example                                                                                                   // 8147
	         *                                                                                                            // 8148
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 8149
	         */                                                                                                           // 8150
	        parse: function (latin1Str) {                                                                                 // 8151
	            // Shortcut                                                                                               // 8152
	            var latin1StrLength = latin1Str.length;                                                                   // 8153
                                                                                                                       // 8154
	            // Convert                                                                                                // 8155
	            var words = [];                                                                                           // 8156
	            for (var i = 0; i < latin1StrLength; i++) {                                                               // 8157
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 8158
	            }                                                                                                         // 8159
                                                                                                                       // 8160
	            return new WordArray.init(words, latin1StrLength);                                                        // 8161
	        }                                                                                                             // 8162
	    };                                                                                                                // 8163
                                                                                                                       // 8164
	    /**                                                                                                               // 8165
	     * UTF-8 encoding strategy.                                                                                       // 8166
	     */                                                                                                               // 8167
	    var Utf8 = C_enc.Utf8 = {                                                                                         // 8168
	        /**                                                                                                           // 8169
	         * Converts a word array to a UTF-8 string.                                                                   // 8170
	         *                                                                                                            // 8171
	         * @param {WordArray} wordArray The word array.                                                               // 8172
	         *                                                                                                            // 8173
	         * @return {string} The UTF-8 string.                                                                         // 8174
	         *                                                                                                            // 8175
	         * @static                                                                                                    // 8176
	         *                                                                                                            // 8177
	         * @example                                                                                                   // 8178
	         *                                                                                                            // 8179
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 8180
	         */                                                                                                           // 8181
	        stringify: function (wordArray) {                                                                             // 8182
	            try {                                                                                                     // 8183
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 8184
	            } catch (e) {                                                                                             // 8185
	                throw new Error('Malformed UTF-8 data');                                                              // 8186
	            }                                                                                                         // 8187
	        },                                                                                                            // 8188
                                                                                                                       // 8189
	        /**                                                                                                           // 8190
	         * Converts a UTF-8 string to a word array.                                                                   // 8191
	         *                                                                                                            // 8192
	         * @param {string} utf8Str The UTF-8 string.                                                                  // 8193
	         *                                                                                                            // 8194
	         * @return {WordArray} The word array.                                                                        // 8195
	         *                                                                                                            // 8196
	         * @static                                                                                                    // 8197
	         *                                                                                                            // 8198
	         * @example                                                                                                   // 8199
	         *                                                                                                            // 8200
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 8201
	         */                                                                                                           // 8202
	        parse: function (utf8Str) {                                                                                   // 8203
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 8204
	        }                                                                                                             // 8205
	    };                                                                                                                // 8206
                                                                                                                       // 8207
	    /**                                                                                                               // 8208
	     * Abstract buffered block algorithm template.                                                                    // 8209
	     *                                                                                                                // 8210
	     * The property blockSize must be implemented in a concrete subtype.                                              // 8211
	     *                                                                                                                // 8212
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */                                                                                                               // 8214
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 8215
	        /**                                                                                                           // 8216
	         * Resets this block algorithm's data buffer to its initial state.                                            // 8217
	         *                                                                                                            // 8218
	         * @example                                                                                                   // 8219
	         *                                                                                                            // 8220
	         *     bufferedBlockAlgorithm.reset();                                                                        // 8221
	         */                                                                                                           // 8222
	        reset: function () {                                                                                          // 8223
	            // Initial values                                                                                         // 8224
	            this._data = new WordArray.init();                                                                        // 8225
	            this._nDataBytes = 0;                                                                                     // 8226
	        },                                                                                                            // 8227
                                                                                                                       // 8228
	        /**                                                                                                           // 8229
	         * Adds new data to this block algorithm's buffer.                                                            // 8230
	         *                                                                                                            // 8231
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 8232
	         *                                                                                                            // 8233
	         * @example                                                                                                   // 8234
	         *                                                                                                            // 8235
	         *     bufferedBlockAlgorithm._append('data');                                                                // 8236
	         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 8237
	         */                                                                                                           // 8238
	        _append: function (data) {                                                                                    // 8239
	            // Convert string to WordArray, else assume WordArray already                                             // 8240
	            if (typeof data == 'string') {                                                                            // 8241
	                data = Utf8.parse(data);                                                                              // 8242
	            }                                                                                                         // 8243
                                                                                                                       // 8244
	            // Append                                                                                                 // 8245
	            this._data.concat(data);                                                                                  // 8246
	            this._nDataBytes += data.sigBytes;                                                                        // 8247
	        },                                                                                                            // 8248
                                                                                                                       // 8249
	        /**                                                                                                           // 8250
	         * Processes available data blocks.                                                                           // 8251
	         *                                                                                                            // 8252
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 8253
	         *                                                                                                            // 8254
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 8255
	         *                                                                                                            // 8256
	         * @return {WordArray} The processed data.                                                                    // 8257
	         *                                                                                                            // 8258
	         * @example                                                                                                   // 8259
	         *                                                                                                            // 8260
	         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 8261
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 8262
	         */                                                                                                           // 8263
	        _process: function (doFlush) {                                                                                // 8264
	            // Shortcuts                                                                                              // 8265
	            var data = this._data;                                                                                    // 8266
	            var dataWords = data.words;                                                                               // 8267
	            var dataSigBytes = data.sigBytes;                                                                         // 8268
	            var blockSize = this.blockSize;                                                                           // 8269
	            var blockSizeBytes = blockSize * 4;                                                                       // 8270
                                                                                                                       // 8271
	            // Count blocks ready                                                                                     // 8272
	            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 8273
	            if (doFlush) {                                                                                            // 8274
	                // Round up to include partial blocks                                                                 // 8275
	                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 8276
	            } else {                                                                                                  // 8277
	                // Round down to include only full blocks,                                                            // 8278
	                // less the number of blocks that must remain in the buffer                                           // 8279
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 8280
	            }                                                                                                         // 8281
                                                                                                                       // 8282
	            // Count words ready                                                                                      // 8283
	            var nWordsReady = nBlocksReady * blockSize;                                                               // 8284
                                                                                                                       // 8285
	            // Count bytes ready                                                                                      // 8286
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 8287
                                                                                                                       // 8288
	            // Process blocks                                                                                         // 8289
	            if (nWordsReady) {                                                                                        // 8290
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 8291
	                    // Perform concrete-algorithm logic                                                               // 8292
	                    this._doProcessBlock(dataWords, offset);                                                          // 8293
	                }                                                                                                     // 8294
                                                                                                                       // 8295
	                // Remove processed words                                                                             // 8296
	                var processedWords = dataWords.splice(0, nWordsReady);                                                // 8297
	                data.sigBytes -= nBytesReady;                                                                         // 8298
	            }                                                                                                         // 8299
                                                                                                                       // 8300
	            // Return processed words                                                                                 // 8301
	            return new WordArray.init(processedWords, nBytesReady);                                                   // 8302
	        },                                                                                                            // 8303
                                                                                                                       // 8304
	        /**                                                                                                           // 8305
	         * Creates a copy of this object.                                                                             // 8306
	         *                                                                                                            // 8307
	         * @return {Object} The clone.                                                                                // 8308
	         *                                                                                                            // 8309
	         * @example                                                                                                   // 8310
	         *                                                                                                            // 8311
	         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 8312
	         */                                                                                                           // 8313
	        clone: function () {                                                                                          // 8314
	            var clone = Base.clone.call(this);                                                                        // 8315
	            clone._data = this._data.clone();                                                                         // 8316
                                                                                                                       // 8317
	            return clone;                                                                                             // 8318
	        },                                                                                                            // 8319
                                                                                                                       // 8320
	        _minBufferSize: 0                                                                                             // 8321
	    });                                                                                                               // 8322
                                                                                                                       // 8323
	    /**                                                                                                               // 8324
	     * Abstract hasher template.                                                                                      // 8325
	     *                                                                                                                // 8326
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 8327
	     */                                                                                                               // 8328
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 8329
	        /**                                                                                                           // 8330
	         * Configuration options.                                                                                     // 8331
	         */                                                                                                           // 8332
	        cfg: Base.extend(),                                                                                           // 8333
                                                                                                                       // 8334
	        /**                                                                                                           // 8335
	         * Initializes a newly created hasher.                                                                        // 8336
	         *                                                                                                            // 8337
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 8338
	         *                                                                                                            // 8339
	         * @example                                                                                                   // 8340
	         *                                                                                                            // 8341
	         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 8342
	         */                                                                                                           // 8343
	        init: function (cfg) {                                                                                        // 8344
	            // Apply config defaults                                                                                  // 8345
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8346
                                                                                                                       // 8347
	            // Set initial values                                                                                     // 8348
	            this.reset();                                                                                             // 8349
	        },                                                                                                            // 8350
                                                                                                                       // 8351
	        /**                                                                                                           // 8352
	         * Resets this hasher to its initial state.                                                                   // 8353
	         *                                                                                                            // 8354
	         * @example                                                                                                   // 8355
	         *                                                                                                            // 8356
	         *     hasher.reset();                                                                                        // 8357
	         */                                                                                                           // 8358
	        reset: function () {                                                                                          // 8359
	            // Reset data buffer                                                                                      // 8360
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 8361
                                                                                                                       // 8362
	            // Perform concrete-hasher logic                                                                          // 8363
	            this._doReset();                                                                                          // 8364
	        },                                                                                                            // 8365
                                                                                                                       // 8366
	        /**                                                                                                           // 8367
	         * Updates this hasher with a message.                                                                        // 8368
	         *                                                                                                            // 8369
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8370
	         *                                                                                                            // 8371
	         * @return {Hasher} This hasher.                                                                              // 8372
	         *                                                                                                            // 8373
	         * @example                                                                                                   // 8374
	         *                                                                                                            // 8375
	         *     hasher.update('message');                                                                              // 8376
	         *     hasher.update(wordArray);                                                                              // 8377
	         */                                                                                                           // 8378
	        update: function (messageUpdate) {                                                                            // 8379
	            // Append                                                                                                 // 8380
	            this._append(messageUpdate);                                                                              // 8381
                                                                                                                       // 8382
	            // Update the hash                                                                                        // 8383
	            this._process();                                                                                          // 8384
                                                                                                                       // 8385
	            // Chainable                                                                                              // 8386
	            return this;                                                                                              // 8387
	        },                                                                                                            // 8388
                                                                                                                       // 8389
	        /**                                                                                                           // 8390
	         * Finalizes the hash computation.                                                                            // 8391
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8392
	         *                                                                                                            // 8393
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8394
	         *                                                                                                            // 8395
	         * @return {WordArray} The hash.                                                                              // 8396
	         *                                                                                                            // 8397
	         * @example                                                                                                   // 8398
	         *                                                                                                            // 8399
	         *     var hash = hasher.finalize();                                                                          // 8400
	         *     var hash = hasher.finalize('message');                                                                 // 8401
	         *     var hash = hasher.finalize(wordArray);                                                                 // 8402
	         */                                                                                                           // 8403
	        finalize: function (messageUpdate) {                                                                          // 8404
	            // Final message update                                                                                   // 8405
	            if (messageUpdate) {                                                                                      // 8406
	                this._append(messageUpdate);                                                                          // 8407
	            }                                                                                                         // 8408
                                                                                                                       // 8409
	            // Perform concrete-hasher logic                                                                          // 8410
	            var hash = this._doFinalize();                                                                            // 8411
                                                                                                                       // 8412
	            return hash;                                                                                              // 8413
	        },                                                                                                            // 8414
                                                                                                                       // 8415
	        blockSize: 512/32,                                                                                            // 8416
                                                                                                                       // 8417
	        /**                                                                                                           // 8418
	         * Creates a shortcut function to a hasher's object interface.                                                // 8419
	         *                                                                                                            // 8420
	         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 8421
	         *                                                                                                            // 8422
	         * @return {Function} The shortcut function.                                                                  // 8423
	         *                                                                                                            // 8424
	         * @static                                                                                                    // 8425
	         *                                                                                                            // 8426
	         * @example                                                                                                   // 8427
	         *                                                                                                            // 8428
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 8429
	         */                                                                                                           // 8430
	        _createHelper: function (hasher) {                                                                            // 8431
	            return function (message, cfg) {                                                                          // 8432
	                return new hasher.init(cfg).finalize(message);                                                        // 8433
	            };                                                                                                        // 8434
	        },                                                                                                            // 8435
                                                                                                                       // 8436
	        /**                                                                                                           // 8437
	         * Creates a shortcut function to the HMAC's object interface.                                                // 8438
	         *                                                                                                            // 8439
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 8440
	         *                                                                                                            // 8441
	         * @return {Function} The shortcut function.                                                                  // 8442
	         *                                                                                                            // 8443
	         * @static                                                                                                    // 8444
	         *                                                                                                            // 8445
	         * @example                                                                                                   // 8446
	         *                                                                                                            // 8447
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 8448
	         */                                                                                                           // 8449
	        _createHmacHelper: function (hasher) {                                                                        // 8450
	            return function (message, key) {                                                                          // 8451
	                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 8452
	            };                                                                                                        // 8453
	        }                                                                                                             // 8454
	    });                                                                                                               // 8455
                                                                                                                       // 8456
	    /**                                                                                                               // 8457
	     * Algorithm namespace.                                                                                           // 8458
	     */                                                                                                               // 8459
	    var C_algo = C.algo = {};                                                                                         // 8460
                                                                                                                       // 8461
	    return C;                                                                                                         // 8462
	}(Math));                                                                                                             // 8463
                                                                                                                       // 8464
                                                                                                                       // 8465
	return CryptoJS;                                                                                                      // 8466
                                                                                                                       // 8467
}));                                                                                                                   // 8468
},{}],54:[function(require,module,exports){                                                                            // 8469
;(function (root, factory) {                                                                                           // 8470
	if (typeof exports === "object") {                                                                                    // 8471
		// CommonJS                                                                                                          // 8472
		module.exports = exports = factory(require("./core"));                                                               // 8473
	}                                                                                                                     // 8474
	else if (typeof define === "function" && define.amd) {                                                                // 8475
		// AMD                                                                                                               // 8476
		define(["./core"], factory);                                                                                         // 8477
	}                                                                                                                     // 8478
	else {                                                                                                                // 8479
		// Global (browser)                                                                                                  // 8480
		factory(root.CryptoJS);                                                                                              // 8481
	}                                                                                                                     // 8482
}(this, function (CryptoJS) {                                                                                          // 8483
                                                                                                                       // 8484
	(function () {                                                                                                        // 8485
	    // Shortcuts                                                                                                      // 8486
	    var C = CryptoJS;                                                                                                 // 8487
	    var C_lib = C.lib;                                                                                                // 8488
	    var WordArray = C_lib.WordArray;                                                                                  // 8489
	    var C_enc = C.enc;                                                                                                // 8490
                                                                                                                       // 8491
	    /**                                                                                                               // 8492
	     * Base64 encoding strategy.                                                                                      // 8493
	     */                                                                                                               // 8494
	    var Base64 = C_enc.Base64 = {                                                                                     // 8495
	        /**                                                                                                           // 8496
	         * Converts a word array to a Base64 string.                                                                  // 8497
	         *                                                                                                            // 8498
	         * @param {WordArray} wordArray The word array.                                                               // 8499
	         *                                                                                                            // 8500
	         * @return {string} The Base64 string.                                                                        // 8501
	         *                                                                                                            // 8502
	         * @static                                                                                                    // 8503
	         *                                                                                                            // 8504
	         * @example                                                                                                   // 8505
	         *                                                                                                            // 8506
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 8507
	         */                                                                                                           // 8508
	        stringify: function (wordArray) {                                                                             // 8509
	            // Shortcuts                                                                                              // 8510
	            var words = wordArray.words;                                                                              // 8511
	            var sigBytes = wordArray.sigBytes;                                                                        // 8512
	            var map = this._map;                                                                                      // 8513
                                                                                                                       // 8514
	            // Clamp excess bits                                                                                      // 8515
	            wordArray.clamp();                                                                                        // 8516
                                                                                                                       // 8517
	            // Convert                                                                                                // 8518
	            var base64Chars = [];                                                                                     // 8519
	            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 8520
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 8521
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 8522
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 8523
                                                                                                                       // 8524
	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 8525
                                                                                                                       // 8526
	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 8527
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 8528
	                }                                                                                                     // 8529
	            }                                                                                                         // 8530
                                                                                                                       // 8531
	            // Add padding                                                                                            // 8532
	            var paddingChar = map.charAt(64);                                                                         // 8533
	            if (paddingChar) {                                                                                        // 8534
	                while (base64Chars.length % 4) {                                                                      // 8535
	                    base64Chars.push(paddingChar);                                                                    // 8536
	                }                                                                                                     // 8537
	            }                                                                                                         // 8538
                                                                                                                       // 8539
	            return base64Chars.join('');                                                                              // 8540
	        },                                                                                                            // 8541
                                                                                                                       // 8542
	        /**                                                                                                           // 8543
	         * Converts a Base64 string to a word array.                                                                  // 8544
	         *                                                                                                            // 8545
	         * @param {string} base64Str The Base64 string.                                                               // 8546
	         *                                                                                                            // 8547
	         * @return {WordArray} The word array.                                                                        // 8548
	         *                                                                                                            // 8549
	         * @static                                                                                                    // 8550
	         *                                                                                                            // 8551
	         * @example                                                                                                   // 8552
	         *                                                                                                            // 8553
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 8554
	         */                                                                                                           // 8555
	        parse: function (base64Str) {                                                                                 // 8556
	            // Shortcuts                                                                                              // 8557
	            var base64StrLength = base64Str.length;                                                                   // 8558
	            var map = this._map;                                                                                      // 8559
	            var reverseMap = this._reverseMap;                                                                        // 8560
                                                                                                                       // 8561
	            if (!reverseMap) {                                                                                        // 8562
	                    reverseMap = this._reverseMap = [];                                                               // 8563
	                    for (var j = 0; j < map.length; j++) {                                                            // 8564
	                        reverseMap[map.charCodeAt(j)] = j;                                                            // 8565
	                    }                                                                                                 // 8566
	            }                                                                                                         // 8567
                                                                                                                       // 8568
	            // Ignore padding                                                                                         // 8569
	            var paddingChar = map.charAt(64);                                                                         // 8570
	            if (paddingChar) {                                                                                        // 8571
	                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 8572
	                if (paddingIndex !== -1) {                                                                            // 8573
	                    base64StrLength = paddingIndex;                                                                   // 8574
	                }                                                                                                     // 8575
	            }                                                                                                         // 8576
                                                                                                                       // 8577
	            // Convert                                                                                                // 8578
	            return parseLoop(base64Str, base64StrLength, reverseMap);                                                 // 8579
                                                                                                                       // 8580
	        },                                                                                                            // 8581
                                                                                                                       // 8582
	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 8583
	    };                                                                                                                // 8584
                                                                                                                       // 8585
	    function parseLoop(base64Str, base64StrLength, reverseMap) {                                                      // 8586
	      var words = [];                                                                                                 // 8587
	      var nBytes = 0;                                                                                                 // 8588
	      for (var i = 0; i < base64StrLength; i++) {                                                                     // 8589
	          if (i % 4) {                                                                                                // 8590
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);                                   // 8591
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);                                  // 8592
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                      // 8593
	              nBytes++;                                                                                               // 8594
	          }                                                                                                           // 8595
	      }                                                                                                               // 8596
	      return WordArray.create(words, nBytes);                                                                         // 8597
	    }                                                                                                                 // 8598
	}());                                                                                                                 // 8599
                                                                                                                       // 8600
                                                                                                                       // 8601
	return CryptoJS.enc.Base64;                                                                                           // 8602
                                                                                                                       // 8603
}));                                                                                                                   // 8604
},{"./core":53}],55:[function(require,module,exports){                                                                 // 8605
;(function (root, factory) {                                                                                           // 8606
	if (typeof exports === "object") {                                                                                    // 8607
		// CommonJS                                                                                                          // 8608
		module.exports = exports = factory(require("./core"));                                                               // 8609
	}                                                                                                                     // 8610
	else if (typeof define === "function" && define.amd) {                                                                // 8611
		// AMD                                                                                                               // 8612
		define(["./core"], factory);                                                                                         // 8613
	}                                                                                                                     // 8614
	else {                                                                                                                // 8615
		// Global (browser)                                                                                                  // 8616
		factory(root.CryptoJS);                                                                                              // 8617
	}                                                                                                                     // 8618
}(this, function (CryptoJS) {                                                                                          // 8619
                                                                                                                       // 8620
	(function () {                                                                                                        // 8621
	    // Shortcuts                                                                                                      // 8622
	    var C = CryptoJS;                                                                                                 // 8623
	    var C_lib = C.lib;                                                                                                // 8624
	    var WordArray = C_lib.WordArray;                                                                                  // 8625
	    var C_enc = C.enc;                                                                                                // 8626
                                                                                                                       // 8627
	    /**                                                                                                               // 8628
	     * UTF-16 BE encoding strategy.                                                                                   // 8629
	     */                                                                                                               // 8630
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 8631
	        /**                                                                                                           // 8632
	         * Converts a word array to a UTF-16 BE string.                                                               // 8633
	         *                                                                                                            // 8634
	         * @param {WordArray} wordArray The word array.                                                               // 8635
	         *                                                                                                            // 8636
	         * @return {string} The UTF-16 BE string.                                                                     // 8637
	         *                                                                                                            // 8638
	         * @static                                                                                                    // 8639
	         *                                                                                                            // 8640
	         * @example                                                                                                   // 8641
	         *                                                                                                            // 8642
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 8643
	         */                                                                                                           // 8644
	        stringify: function (wordArray) {                                                                             // 8645
	            // Shortcuts                                                                                              // 8646
	            var words = wordArray.words;                                                                              // 8647
	            var sigBytes = wordArray.sigBytes;                                                                        // 8648
                                                                                                                       // 8649
	            // Convert                                                                                                // 8650
	            var utf16Chars = [];                                                                                      // 8651
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8652
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 8653
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8654
	            }                                                                                                         // 8655
                                                                                                                       // 8656
	            return utf16Chars.join('');                                                                               // 8657
	        },                                                                                                            // 8658
                                                                                                                       // 8659
	        /**                                                                                                           // 8660
	         * Converts a UTF-16 BE string to a word array.                                                               // 8661
	         *                                                                                                            // 8662
	         * @param {string} utf16Str The UTF-16 BE string.                                                             // 8663
	         *                                                                                                            // 8664
	         * @return {WordArray} The word array.                                                                        // 8665
	         *                                                                                                            // 8666
	         * @static                                                                                                    // 8667
	         *                                                                                                            // 8668
	         * @example                                                                                                   // 8669
	         *                                                                                                            // 8670
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 8671
	         */                                                                                                           // 8672
	        parse: function (utf16Str) {                                                                                  // 8673
	            // Shortcut                                                                                               // 8674
	            var utf16StrLength = utf16Str.length;                                                                     // 8675
                                                                                                                       // 8676
	            // Convert                                                                                                // 8677
	            var words = [];                                                                                           // 8678
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8679
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 8680
	            }                                                                                                         // 8681
                                                                                                                       // 8682
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8683
	        }                                                                                                             // 8684
	    };                                                                                                                // 8685
                                                                                                                       // 8686
	    /**                                                                                                               // 8687
	     * UTF-16 LE encoding strategy.                                                                                   // 8688
	     */                                                                                                               // 8689
	    C_enc.Utf16LE = {                                                                                                 // 8690
	        /**                                                                                                           // 8691
	         * Converts a word array to a UTF-16 LE string.                                                               // 8692
	         *                                                                                                            // 8693
	         * @param {WordArray} wordArray The word array.                                                               // 8694
	         *                                                                                                            // 8695
	         * @return {string} The UTF-16 LE string.                                                                     // 8696
	         *                                                                                                            // 8697
	         * @static                                                                                                    // 8698
	         *                                                                                                            // 8699
	         * @example                                                                                                   // 8700
	         *                                                                                                            // 8701
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 8702
	         */                                                                                                           // 8703
	        stringify: function (wordArray) {                                                                             // 8704
	            // Shortcuts                                                                                              // 8705
	            var words = wordArray.words;                                                                              // 8706
	            var sigBytes = wordArray.sigBytes;                                                                        // 8707
                                                                                                                       // 8708
	            // Convert                                                                                                // 8709
	            var utf16Chars = [];                                                                                      // 8710
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8711
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 8712
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8713
	            }                                                                                                         // 8714
                                                                                                                       // 8715
	            return utf16Chars.join('');                                                                               // 8716
	        },                                                                                                            // 8717
                                                                                                                       // 8718
	        /**                                                                                                           // 8719
	         * Converts a UTF-16 LE string to a word array.                                                               // 8720
	         *                                                                                                            // 8721
	         * @param {string} utf16Str The UTF-16 LE string.                                                             // 8722
	         *                                                                                                            // 8723
	         * @return {WordArray} The word array.                                                                        // 8724
	         *                                                                                                            // 8725
	         * @static                                                                                                    // 8726
	         *                                                                                                            // 8727
	         * @example                                                                                                   // 8728
	         *                                                                                                            // 8729
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 8730
	         */                                                                                                           // 8731
	        parse: function (utf16Str) {                                                                                  // 8732
	            // Shortcut                                                                                               // 8733
	            var utf16StrLength = utf16Str.length;                                                                     // 8734
                                                                                                                       // 8735
	            // Convert                                                                                                // 8736
	            var words = [];                                                                                           // 8737
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8738
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 8739
	            }                                                                                                         // 8740
                                                                                                                       // 8741
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8742
	        }                                                                                                             // 8743
	    };                                                                                                                // 8744
                                                                                                                       // 8745
	    function swapEndian(word) {                                                                                       // 8746
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 8747
	    }                                                                                                                 // 8748
	}());                                                                                                                 // 8749
                                                                                                                       // 8750
                                                                                                                       // 8751
	return CryptoJS.enc.Utf16;                                                                                            // 8752
                                                                                                                       // 8753
}));                                                                                                                   // 8754
},{"./core":53}],56:[function(require,module,exports){                                                                 // 8755
;(function (root, factory, undef) {                                                                                    // 8756
	if (typeof exports === "object") {                                                                                    // 8757
		// CommonJS                                                                                                          // 8758
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 8759
	}                                                                                                                     // 8760
	else if (typeof define === "function" && define.amd) {                                                                // 8761
		// AMD                                                                                                               // 8762
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 8763
	}                                                                                                                     // 8764
	else {                                                                                                                // 8765
		// Global (browser)                                                                                                  // 8766
		factory(root.CryptoJS);                                                                                              // 8767
	}                                                                                                                     // 8768
}(this, function (CryptoJS) {                                                                                          // 8769
                                                                                                                       // 8770
	(function () {                                                                                                        // 8771
	    // Shortcuts                                                                                                      // 8772
	    var C = CryptoJS;                                                                                                 // 8773
	    var C_lib = C.lib;                                                                                                // 8774
	    var Base = C_lib.Base;                                                                                            // 8775
	    var WordArray = C_lib.WordArray;                                                                                  // 8776
	    var C_algo = C.algo;                                                                                              // 8777
	    var MD5 = C_algo.MD5;                                                                                             // 8778
                                                                                                                       // 8779
	    /**                                                                                                               // 8780
	     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 8781
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 8782
	     */                                                                                                               // 8783
	    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 8784
	        /**                                                                                                           // 8785
	         * Configuration options.                                                                                     // 8786
	         *                                                                                                            // 8787
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 8788
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 8789
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 8790
	         */                                                                                                           // 8791
	        cfg: Base.extend({                                                                                            // 8792
	            keySize: 128/32,                                                                                          // 8793
	            hasher: MD5,                                                                                              // 8794
	            iterations: 1                                                                                             // 8795
	        }),                                                                                                           // 8796
                                                                                                                       // 8797
	        /**                                                                                                           // 8798
	         * Initializes a newly created key derivation function.                                                       // 8799
	         *                                                                                                            // 8800
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 8801
	         *                                                                                                            // 8802
	         * @example                                                                                                   // 8803
	         *                                                                                                            // 8804
	         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 8805
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 8806
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 8807
	         */                                                                                                           // 8808
	        init: function (cfg) {                                                                                        // 8809
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8810
	        },                                                                                                            // 8811
                                                                                                                       // 8812
	        /**                                                                                                           // 8813
	         * Derives a key from a password.                                                                             // 8814
	         *                                                                                                            // 8815
	         * @param {WordArray|string} password The password.                                                           // 8816
	         * @param {WordArray|string} salt A salt.                                                                     // 8817
	         *                                                                                                            // 8818
	         * @return {WordArray} The derived key.                                                                       // 8819
	         *                                                                                                            // 8820
	         * @example                                                                                                   // 8821
	         *                                                                                                            // 8822
	         *     var key = kdf.compute(password, salt);                                                                 // 8823
	         */                                                                                                           // 8824
	        compute: function (password, salt) {                                                                          // 8825
	            // Shortcut                                                                                               // 8826
	            var cfg = this.cfg;                                                                                       // 8827
                                                                                                                       // 8828
	            // Init hasher                                                                                            // 8829
	            var hasher = cfg.hasher.create();                                                                         // 8830
                                                                                                                       // 8831
	            // Initial values                                                                                         // 8832
	            var derivedKey = WordArray.create();                                                                      // 8833
                                                                                                                       // 8834
	            // Shortcuts                                                                                              // 8835
	            var derivedKeyWords = derivedKey.words;                                                                   // 8836
	            var keySize = cfg.keySize;                                                                                // 8837
	            var iterations = cfg.iterations;                                                                          // 8838
                                                                                                                       // 8839
	            // Generate key                                                                                           // 8840
	            while (derivedKeyWords.length < keySize) {                                                                // 8841
	                if (block) {                                                                                          // 8842
	                    hasher.update(block);                                                                             // 8843
	                }                                                                                                     // 8844
	                var block = hasher.update(password).finalize(salt);                                                   // 8845
	                hasher.reset();                                                                                       // 8846
                                                                                                                       // 8847
	                // Iterations                                                                                         // 8848
	                for (var i = 1; i < iterations; i++) {                                                                // 8849
	                    block = hasher.finalize(block);                                                                   // 8850
	                    hasher.reset();                                                                                   // 8851
	                }                                                                                                     // 8852
                                                                                                                       // 8853
	                derivedKey.concat(block);                                                                             // 8854
	            }                                                                                                         // 8855
	            derivedKey.sigBytes = keySize * 4;                                                                        // 8856
                                                                                                                       // 8857
	            return derivedKey;                                                                                        // 8858
	        }                                                                                                             // 8859
	    });                                                                                                               // 8860
                                                                                                                       // 8861
	    /**                                                                                                               // 8862
	     * Derives a key from a password.                                                                                 // 8863
	     *                                                                                                                // 8864
	     * @param {WordArray|string} password The password.                                                               // 8865
	     * @param {WordArray|string} salt A salt.                                                                         // 8866
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 8867
	     *                                                                                                                // 8868
	     * @return {WordArray} The derived key.                                                                           // 8869
	     *                                                                                                                // 8870
	     * @static                                                                                                        // 8871
	     *                                                                                                                // 8872
	     * @example                                                                                                       // 8873
	     *                                                                                                                // 8874
	     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 8875
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 8876
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 8877
	     */                                                                                                               // 8878
	    C.EvpKDF = function (password, salt, cfg) {                                                                       // 8879
	        return EvpKDF.create(cfg).compute(password, salt);                                                            // 8880
	    };                                                                                                                // 8881
	}());                                                                                                                 // 8882
                                                                                                                       // 8883
                                                                                                                       // 8884
	return CryptoJS.EvpKDF;                                                                                               // 8885
                                                                                                                       // 8886
}));                                                                                                                   // 8887
},{"./core":53,"./hmac":58,"./sha1":77}],57:[function(require,module,exports){                                         // 8888
;(function (root, factory, undef) {                                                                                    // 8889
	if (typeof exports === "object") {                                                                                    // 8890
		// CommonJS                                                                                                          // 8891
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 8892
	}                                                                                                                     // 8893
	else if (typeof define === "function" && define.amd) {                                                                // 8894
		// AMD                                                                                                               // 8895
		define(["./core", "./cipher-core"], factory);                                                                        // 8896
	}                                                                                                                     // 8897
	else {                                                                                                                // 8898
		// Global (browser)                                                                                                  // 8899
		factory(root.CryptoJS);                                                                                              // 8900
	}                                                                                                                     // 8901
}(this, function (CryptoJS) {                                                                                          // 8902
                                                                                                                       // 8903
	(function (undefined) {                                                                                               // 8904
	    // Shortcuts                                                                                                      // 8905
	    var C = CryptoJS;                                                                                                 // 8906
	    var C_lib = C.lib;                                                                                                // 8907
	    var CipherParams = C_lib.CipherParams;                                                                            // 8908
	    var C_enc = C.enc;                                                                                                // 8909
	    var Hex = C_enc.Hex;                                                                                              // 8910
	    var C_format = C.format;                                                                                          // 8911
                                                                                                                       // 8912
	    var HexFormatter = C_format.Hex = {                                                                               // 8913
	        /**                                                                                                           // 8914
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 8915
	         *                                                                                                            // 8916
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 8917
	         *                                                                                                            // 8918
	         * @return {string} The hexadecimally encoded string.                                                         // 8919
	         *                                                                                                            // 8920
	         * @static                                                                                                    // 8921
	         *                                                                                                            // 8922
	         * @example                                                                                                   // 8923
	         *                                                                                                            // 8924
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 8925
	         */                                                                                                           // 8926
	        stringify: function (cipherParams) {                                                                          // 8927
	            return cipherParams.ciphertext.toString(Hex);                                                             // 8928
	        },                                                                                                            // 8929
                                                                                                                       // 8930
	        /**                                                                                                           // 8931
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 8932
	         *                                                                                                            // 8933
	         * @param {string} input The hexadecimally encoded string.                                                    // 8934
	         *                                                                                                            // 8935
	         * @return {CipherParams} The cipher params object.                                                           // 8936
	         *                                                                                                            // 8937
	         * @static                                                                                                    // 8938
	         *                                                                                                            // 8939
	         * @example                                                                                                   // 8940
	         *                                                                                                            // 8941
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 8942
	         */                                                                                                           // 8943
	        parse: function (input) {                                                                                     // 8944
	            var ciphertext = Hex.parse(input);                                                                        // 8945
	            return CipherParams.create({ ciphertext: ciphertext });                                                   // 8946
	        }                                                                                                             // 8947
	    };                                                                                                                // 8948
	}());                                                                                                                 // 8949
                                                                                                                       // 8950
                                                                                                                       // 8951
	return CryptoJS.format.Hex;                                                                                           // 8952
                                                                                                                       // 8953
}));                                                                                                                   // 8954
},{"./cipher-core":52,"./core":53}],58:[function(require,module,exports){                                              // 8955
;(function (root, factory) {                                                                                           // 8956
	if (typeof exports === "object") {                                                                                    // 8957
		// CommonJS                                                                                                          // 8958
		module.exports = exports = factory(require("./core"));                                                               // 8959
	}                                                                                                                     // 8960
	else if (typeof define === "function" && define.amd) {                                                                // 8961
		// AMD                                                                                                               // 8962
		define(["./core"], factory);                                                                                         // 8963
	}                                                                                                                     // 8964
	else {                                                                                                                // 8965
		// Global (browser)                                                                                                  // 8966
		factory(root.CryptoJS);                                                                                              // 8967
	}                                                                                                                     // 8968
}(this, function (CryptoJS) {                                                                                          // 8969
                                                                                                                       // 8970
	(function () {                                                                                                        // 8971
	    // Shortcuts                                                                                                      // 8972
	    var C = CryptoJS;                                                                                                 // 8973
	    var C_lib = C.lib;                                                                                                // 8974
	    var Base = C_lib.Base;                                                                                            // 8975
	    var C_enc = C.enc;                                                                                                // 8976
	    var Utf8 = C_enc.Utf8;                                                                                            // 8977
	    var C_algo = C.algo;                                                                                              // 8978
                                                                                                                       // 8979
	    /**                                                                                                               // 8980
	     * HMAC algorithm.                                                                                                // 8981
	     */                                                                                                               // 8982
	    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 8983
	        /**                                                                                                           // 8984
	         * Initializes a newly created HMAC.                                                                          // 8985
	         *                                                                                                            // 8986
	         * @param {Hasher} hasher The hash algorithm to use.                                                          // 8987
	         * @param {WordArray|string} key The secret key.                                                              // 8988
	         *                                                                                                            // 8989
	         * @example                                                                                                   // 8990
	         *                                                                                                            // 8991
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 8992
	         */                                                                                                           // 8993
	        init: function (hasher, key) {                                                                                // 8994
	            // Init hasher                                                                                            // 8995
	            hasher = this._hasher = new hasher.init();                                                                // 8996
                                                                                                                       // 8997
	            // Convert string to WordArray, else assume WordArray already                                             // 8998
	            if (typeof key == 'string') {                                                                             // 8999
	                key = Utf8.parse(key);                                                                                // 9000
	            }                                                                                                         // 9001
                                                                                                                       // 9002
	            // Shortcuts                                                                                              // 9003
	            var hasherBlockSize = hasher.blockSize;                                                                   // 9004
	            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 9005
                                                                                                                       // 9006
	            // Allow arbitrary length keys                                                                            // 9007
	            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 9008
	                key = hasher.finalize(key);                                                                           // 9009
	            }                                                                                                         // 9010
                                                                                                                       // 9011
	            // Clamp excess bits                                                                                      // 9012
	            key.clamp();                                                                                              // 9013
                                                                                                                       // 9014
	            // Clone key for inner and outer pads                                                                     // 9015
	            var oKey = this._oKey = key.clone();                                                                      // 9016
	            var iKey = this._iKey = key.clone();                                                                      // 9017
                                                                                                                       // 9018
	            // Shortcuts                                                                                              // 9019
	            var oKeyWords = oKey.words;                                                                               // 9020
	            var iKeyWords = iKey.words;                                                                               // 9021
                                                                                                                       // 9022
	            // XOR keys with pad constants                                                                            // 9023
	            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 9024
	                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 9025
	                iKeyWords[i] ^= 0x36363636;                                                                           // 9026
	            }                                                                                                         // 9027
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 9028
                                                                                                                       // 9029
	            // Set initial values                                                                                     // 9030
	            this.reset();                                                                                             // 9031
	        },                                                                                                            // 9032
                                                                                                                       // 9033
	        /**                                                                                                           // 9034
	         * Resets this HMAC to its initial state.                                                                     // 9035
	         *                                                                                                            // 9036
	         * @example                                                                                                   // 9037
	         *                                                                                                            // 9038
	         *     hmacHasher.reset();                                                                                    // 9039
	         */                                                                                                           // 9040
	        reset: function () {                                                                                          // 9041
	            // Shortcut                                                                                               // 9042
	            var hasher = this._hasher;                                                                                // 9043
                                                                                                                       // 9044
	            // Reset                                                                                                  // 9045
	            hasher.reset();                                                                                           // 9046
	            hasher.update(this._iKey);                                                                                // 9047
	        },                                                                                                            // 9048
                                                                                                                       // 9049
	        /**                                                                                                           // 9050
	         * Updates this HMAC with a message.                                                                          // 9051
	         *                                                                                                            // 9052
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 9053
	         *                                                                                                            // 9054
	         * @return {HMAC} This HMAC instance.                                                                         // 9055
	         *                                                                                                            // 9056
	         * @example                                                                                                   // 9057
	         *                                                                                                            // 9058
	         *     hmacHasher.update('message');                                                                          // 9059
	         *     hmacHasher.update(wordArray);                                                                          // 9060
	         */                                                                                                           // 9061
	        update: function (messageUpdate) {                                                                            // 9062
	            this._hasher.update(messageUpdate);                                                                       // 9063
                                                                                                                       // 9064
	            // Chainable                                                                                              // 9065
	            return this;                                                                                              // 9066
	        },                                                                                                            // 9067
                                                                                                                       // 9068
	        /**                                                                                                           // 9069
	         * Finalizes the HMAC computation.                                                                            // 9070
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 9071
	         *                                                                                                            // 9072
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 9073
	         *                                                                                                            // 9074
	         * @return {WordArray} The HMAC.                                                                              // 9075
	         *                                                                                                            // 9076
	         * @example                                                                                                   // 9077
	         *                                                                                                            // 9078
	         *     var hmac = hmacHasher.finalize();                                                                      // 9079
	         *     var hmac = hmacHasher.finalize('message');                                                             // 9080
	         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 9081
	         */                                                                                                           // 9082
	        finalize: function (messageUpdate) {                                                                          // 9083
	            // Shortcut                                                                                               // 9084
	            var hasher = this._hasher;                                                                                // 9085
                                                                                                                       // 9086
	            // Compute HMAC                                                                                           // 9087
	            var innerHash = hasher.finalize(messageUpdate);                                                           // 9088
	            hasher.reset();                                                                                           // 9089
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 9090
                                                                                                                       // 9091
	            return hmac;                                                                                              // 9092
	        }                                                                                                             // 9093
	    });                                                                                                               // 9094
	}());                                                                                                                 // 9095
                                                                                                                       // 9096
                                                                                                                       // 9097
}));                                                                                                                   // 9098
},{"./core":53}],59:[function(require,module,exports){                                                                 // 9099
;(function (root, factory, undef) {                                                                                    // 9100
	if (typeof exports === "object") {                                                                                    // 9101
		// CommonJS                                                                                                          // 9102
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}                                                                                                                     // 9104
	else if (typeof define === "function" && define.amd) {                                                                // 9105
		// AMD                                                                                                               // 9106
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}                                                                                                                     // 9108
	else {                                                                                                                // 9109
		// Global (browser)                                                                                                  // 9110
		root.CryptoJS = factory(root.CryptoJS);                                                                              // 9111
	}                                                                                                                     // 9112
}(this, function (CryptoJS) {                                                                                          // 9113
                                                                                                                       // 9114
	return CryptoJS;                                                                                                      // 9115
                                                                                                                       // 9116
}));                                                                                                                   // 9117
},{"./aes":51,"./cipher-core":52,"./core":53,"./enc-base64":54,"./enc-utf16":55,"./evpkdf":56,"./format-hex":57,"./hmac":58,"./lib-typedarrays":60,"./md5":61,"./mode-cfb":62,"./mode-ctr":64,"./mode-ctr-gladman":63,"./mode-ecb":65,"./mode-ofb":66,"./pad-ansix923":67,"./pad-iso10126":68,"./pad-iso97971":69,"./pad-nopadding":70,"./pad-zeropadding":71,"./pbkdf2":72,"./rabbit":74,"./rabbit-legacy":73,"./rc4":75,"./ripemd160":76,"./sha1":77,"./sha224":78,"./sha256":79,"./sha3":80,"./sha384":81,"./sha512":82,"./tripledes":83,"./x64-core":84}],60:[function(require,module,exports){
;(function (root, factory) {                                                                                           // 9119
	if (typeof exports === "object") {                                                                                    // 9120
		// CommonJS                                                                                                          // 9121
		module.exports = exports = factory(require("./core"));                                                               // 9122
	}                                                                                                                     // 9123
	else if (typeof define === "function" && define.amd) {                                                                // 9124
		// AMD                                                                                                               // 9125
		define(["./core"], factory);                                                                                         // 9126
	}                                                                                                                     // 9127
	else {                                                                                                                // 9128
		// Global (browser)                                                                                                  // 9129
		factory(root.CryptoJS);                                                                                              // 9130
	}                                                                                                                     // 9131
}(this, function (CryptoJS) {                                                                                          // 9132
                                                                                                                       // 9133
	(function () {                                                                                                        // 9134
	    // Check if typed arrays are supported                                                                            // 9135
	    if (typeof ArrayBuffer != 'function') {                                                                           // 9136
	        return;                                                                                                       // 9137
	    }                                                                                                                 // 9138
                                                                                                                       // 9139
	    // Shortcuts                                                                                                      // 9140
	    var C = CryptoJS;                                                                                                 // 9141
	    var C_lib = C.lib;                                                                                                // 9142
	    var WordArray = C_lib.WordArray;                                                                                  // 9143
                                                                                                                       // 9144
	    // Reference original init                                                                                        // 9145
	    var superInit = WordArray.init;                                                                                   // 9146
                                                                                                                       // 9147
	    // Augment WordArray.init to handle typed arrays                                                                  // 9148
	    var subInit = WordArray.init = function (typedArray) {                                                            // 9149
	        // Convert buffers to uint8                                                                                   // 9150
	        if (typedArray instanceof ArrayBuffer) {                                                                      // 9151
	            typedArray = new Uint8Array(typedArray);                                                                  // 9152
	        }                                                                                                             // 9153
                                                                                                                       // 9154
	        // Convert other array views to uint8                                                                         // 9155
	        if (                                                                                                          // 9156
	            typedArray instanceof Int8Array ||                                                                        // 9157
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||                  // 9158
	            typedArray instanceof Int16Array ||                                                                       // 9159
	            typedArray instanceof Uint16Array ||                                                                      // 9160
	            typedArray instanceof Int32Array ||                                                                       // 9161
	            typedArray instanceof Uint32Array ||                                                                      // 9162
	            typedArray instanceof Float32Array ||                                                                     // 9163
	            typedArray instanceof Float64Array                                                                        // 9164
	        ) {                                                                                                           // 9165
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 9166
	        }                                                                                                             // 9167
                                                                                                                       // 9168
	        // Handle Uint8Array                                                                                          // 9169
	        if (typedArray instanceof Uint8Array) {                                                                       // 9170
	            // Shortcut                                                                                               // 9171
	            var typedArrayByteLength = typedArray.byteLength;                                                         // 9172
                                                                                                                       // 9173
	            // Extract bytes                                                                                          // 9174
	            var words = [];                                                                                           // 9175
	            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 9176
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 9177
	            }                                                                                                         // 9178
                                                                                                                       // 9179
	            // Initialize this word array                                                                             // 9180
	            superInit.call(this, words, typedArrayByteLength);                                                        // 9181
	        } else {                                                                                                      // 9182
	            // Else call normal init                                                                                  // 9183
	            superInit.apply(this, arguments);                                                                         // 9184
	        }                                                                                                             // 9185
	    };                                                                                                                // 9186
                                                                                                                       // 9187
	    subInit.prototype = WordArray;                                                                                    // 9188
	}());                                                                                                                 // 9189
                                                                                                                       // 9190
                                                                                                                       // 9191
	return CryptoJS.lib.WordArray;                                                                                        // 9192
                                                                                                                       // 9193
}));                                                                                                                   // 9194
},{"./core":53}],61:[function(require,module,exports){                                                                 // 9195
;(function (root, factory) {                                                                                           // 9196
	if (typeof exports === "object") {                                                                                    // 9197
		// CommonJS                                                                                                          // 9198
		module.exports = exports = factory(require("./core"));                                                               // 9199
	}                                                                                                                     // 9200
	else if (typeof define === "function" && define.amd) {                                                                // 9201
		// AMD                                                                                                               // 9202
		define(["./core"], factory);                                                                                         // 9203
	}                                                                                                                     // 9204
	else {                                                                                                                // 9205
		// Global (browser)                                                                                                  // 9206
		factory(root.CryptoJS);                                                                                              // 9207
	}                                                                                                                     // 9208
}(this, function (CryptoJS) {                                                                                          // 9209
                                                                                                                       // 9210
	(function (Math) {                                                                                                    // 9211
	    // Shortcuts                                                                                                      // 9212
	    var C = CryptoJS;                                                                                                 // 9213
	    var C_lib = C.lib;                                                                                                // 9214
	    var WordArray = C_lib.WordArray;                                                                                  // 9215
	    var Hasher = C_lib.Hasher;                                                                                        // 9216
	    var C_algo = C.algo;                                                                                              // 9217
                                                                                                                       // 9218
	    // Constants table                                                                                                // 9219
	    var T = [];                                                                                                       // 9220
                                                                                                                       // 9221
	    // Compute constants                                                                                              // 9222
	    (function () {                                                                                                    // 9223
	        for (var i = 0; i < 64; i++) {                                                                                // 9224
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 9225
	        }                                                                                                             // 9226
	    }());                                                                                                             // 9227
                                                                                                                       // 9228
	    /**                                                                                                               // 9229
	     * MD5 hash algorithm.                                                                                            // 9230
	     */                                                                                                               // 9231
	    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 9232
	        _doReset: function () {                                                                                       // 9233
	            this._hash = new WordArray.init([                                                                         // 9234
	                0x67452301, 0xefcdab89,                                                                               // 9235
	                0x98badcfe, 0x10325476                                                                                // 9236
	            ]);                                                                                                       // 9237
	        },                                                                                                            // 9238
                                                                                                                       // 9239
	        _doProcessBlock: function (M, offset) {                                                                       // 9240
	            // Swap endian                                                                                            // 9241
	            for (var i = 0; i < 16; i++) {                                                                            // 9242
	                // Shortcuts                                                                                          // 9243
	                var offset_i = offset + i;                                                                            // 9244
	                var M_offset_i = M[offset_i];                                                                         // 9245
                                                                                                                       // 9246
	                M[offset_i] = (                                                                                       // 9247
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 9248
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 9249
	                );                                                                                                    // 9250
	            }                                                                                                         // 9251
                                                                                                                       // 9252
	            // Shortcuts                                                                                              // 9253
	            var H = this._hash.words;                                                                                 // 9254
                                                                                                                       // 9255
	            var M_offset_0  = M[offset + 0];                                                                          // 9256
	            var M_offset_1  = M[offset + 1];                                                                          // 9257
	            var M_offset_2  = M[offset + 2];                                                                          // 9258
	            var M_offset_3  = M[offset + 3];                                                                          // 9259
	            var M_offset_4  = M[offset + 4];                                                                          // 9260
	            var M_offset_5  = M[offset + 5];                                                                          // 9261
	            var M_offset_6  = M[offset + 6];                                                                          // 9262
	            var M_offset_7  = M[offset + 7];                                                                          // 9263
	            var M_offset_8  = M[offset + 8];                                                                          // 9264
	            var M_offset_9  = M[offset + 9];                                                                          // 9265
	            var M_offset_10 = M[offset + 10];                                                                         // 9266
	            var M_offset_11 = M[offset + 11];                                                                         // 9267
	            var M_offset_12 = M[offset + 12];                                                                         // 9268
	            var M_offset_13 = M[offset + 13];                                                                         // 9269
	            var M_offset_14 = M[offset + 14];                                                                         // 9270
	            var M_offset_15 = M[offset + 15];                                                                         // 9271
                                                                                                                       // 9272
	            // Working varialbes                                                                                      // 9273
	            var a = H[0];                                                                                             // 9274
	            var b = H[1];                                                                                             // 9275
	            var c = H[2];                                                                                             // 9276
	            var d = H[3];                                                                                             // 9277
                                                                                                                       // 9278
	            // Computation                                                                                            // 9279
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 9280
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 9281
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 9282
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 9283
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 9284
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 9285
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 9286
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 9287
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 9288
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 9289
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 9290
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 9291
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 9292
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 9293
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 9294
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 9295
                                                                                                                       // 9296
	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 9297
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 9298
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 9299
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 9300
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 9301
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 9302
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 9303
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 9304
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 9305
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 9306
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 9307
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 9308
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 9309
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 9310
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 9311
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 9312
                                                                                                                       // 9313
	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 9314
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 9315
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 9316
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 9317
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 9318
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 9319
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 9320
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 9321
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 9322
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 9323
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 9324
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 9325
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 9326
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 9327
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 9328
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 9329
                                                                                                                       // 9330
	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 9331
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 9332
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 9333
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 9334
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 9335
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 9336
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 9337
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 9338
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 9339
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 9340
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 9341
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 9342
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 9343
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 9344
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 9345
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 9346
                                                                                                                       // 9347
	            // Intermediate hash value                                                                                // 9348
	            H[0] = (H[0] + a) | 0;                                                                                    // 9349
	            H[1] = (H[1] + b) | 0;                                                                                    // 9350
	            H[2] = (H[2] + c) | 0;                                                                                    // 9351
	            H[3] = (H[3] + d) | 0;                                                                                    // 9352
	        },                                                                                                            // 9353
                                                                                                                       // 9354
	        _doFinalize: function () {                                                                                    // 9355
	            // Shortcuts                                                                                              // 9356
	            var data = this._data;                                                                                    // 9357
	            var dataWords = data.words;                                                                               // 9358
                                                                                                                       // 9359
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 9360
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 9361
                                                                                                                       // 9362
	            // Add padding                                                                                            // 9363
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 9364
                                                                                                                       // 9365
	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 9366
	            var nBitsTotalL = nBitsTotal;                                                                             // 9367
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 9368
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 9369
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 9370
	            );                                                                                                        // 9371
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 9372
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 9373
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 9374
	            );                                                                                                        // 9375
                                                                                                                       // 9376
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 9377
                                                                                                                       // 9378
	            // Hash final blocks                                                                                      // 9379
	            this._process();                                                                                          // 9380
                                                                                                                       // 9381
	            // Shortcuts                                                                                              // 9382
	            var hash = this._hash;                                                                                    // 9383
	            var H = hash.words;                                                                                       // 9384
                                                                                                                       // 9385
	            // Swap endian                                                                                            // 9386
	            for (var i = 0; i < 4; i++) {                                                                             // 9387
	                // Shortcut                                                                                           // 9388
	                var H_i = H[i];                                                                                       // 9389
                                                                                                                       // 9390
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 9391
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 9392
	            }                                                                                                         // 9393
                                                                                                                       // 9394
	            // Return final computed hash                                                                             // 9395
	            return hash;                                                                                              // 9396
	        },                                                                                                            // 9397
                                                                                                                       // 9398
	        clone: function () {                                                                                          // 9399
	            var clone = Hasher.clone.call(this);                                                                      // 9400
	            clone._hash = this._hash.clone();                                                                         // 9401
                                                                                                                       // 9402
	            return clone;                                                                                             // 9403
	        }                                                                                                             // 9404
	    });                                                                                                               // 9405
                                                                                                                       // 9406
	    function FF(a, b, c, d, x, s, t) {                                                                                // 9407
	        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 9408
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9409
	    }                                                                                                                 // 9410
                                                                                                                       // 9411
	    function GG(a, b, c, d, x, s, t) {                                                                                // 9412
	        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 9413
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9414
	    }                                                                                                                 // 9415
                                                                                                                       // 9416
	    function HH(a, b, c, d, x, s, t) {                                                                                // 9417
	        var n = a + (b ^ c ^ d) + x + t;                                                                              // 9418
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9419
	    }                                                                                                                 // 9420
                                                                                                                       // 9421
	    function II(a, b, c, d, x, s, t) {                                                                                // 9422
	        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 9423
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9424
	    }                                                                                                                 // 9425
                                                                                                                       // 9426
	    /**                                                                                                               // 9427
	     * Shortcut function to the hasher's object interface.                                                            // 9428
	     *                                                                                                                // 9429
	     * @param {WordArray|string} message The message to hash.                                                         // 9430
	     *                                                                                                                // 9431
	     * @return {WordArray} The hash.                                                                                  // 9432
	     *                                                                                                                // 9433
	     * @static                                                                                                        // 9434
	     *                                                                                                                // 9435
	     * @example                                                                                                       // 9436
	     *                                                                                                                // 9437
	     *     var hash = CryptoJS.MD5('message');                                                                        // 9438
	     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 9439
	     */                                                                                                               // 9440
	    C.MD5 = Hasher._createHelper(MD5);                                                                                // 9441
                                                                                                                       // 9442
	    /**                                                                                                               // 9443
	     * Shortcut function to the HMAC's object interface.                                                              // 9444
	     *                                                                                                                // 9445
	     * @param {WordArray|string} message The message to hash.                                                         // 9446
	     * @param {WordArray|string} key The secret key.                                                                  // 9447
	     *                                                                                                                // 9448
	     * @return {WordArray} The HMAC.                                                                                  // 9449
	     *                                                                                                                // 9450
	     * @static                                                                                                        // 9451
	     *                                                                                                                // 9452
	     * @example                                                                                                       // 9453
	     *                                                                                                                // 9454
	     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 9455
	     */                                                                                                               // 9456
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 9457
	}(Math));                                                                                                             // 9458
                                                                                                                       // 9459
                                                                                                                       // 9460
	return CryptoJS.MD5;                                                                                                  // 9461
                                                                                                                       // 9462
}));                                                                                                                   // 9463
},{"./core":53}],62:[function(require,module,exports){                                                                 // 9464
;(function (root, factory, undef) {                                                                                    // 9465
	if (typeof exports === "object") {                                                                                    // 9466
		// CommonJS                                                                                                          // 9467
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9468
	}                                                                                                                     // 9469
	else if (typeof define === "function" && define.amd) {                                                                // 9470
		// AMD                                                                                                               // 9471
		define(["./core", "./cipher-core"], factory);                                                                        // 9472
	}                                                                                                                     // 9473
	else {                                                                                                                // 9474
		// Global (browser)                                                                                                  // 9475
		factory(root.CryptoJS);                                                                                              // 9476
	}                                                                                                                     // 9477
}(this, function (CryptoJS) {                                                                                          // 9478
                                                                                                                       // 9479
	/**                                                                                                                   // 9480
	 * Cipher Feedback block mode.                                                                                        // 9481
	 */                                                                                                                   // 9482
	CryptoJS.mode.CFB = (function () {                                                                                    // 9483
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9484
                                                                                                                       // 9485
	    CFB.Encryptor = CFB.extend({                                                                                      // 9486
	        processBlock: function (words, offset) {                                                                      // 9487
	            // Shortcuts                                                                                              // 9488
	            var cipher = this._cipher;                                                                                // 9489
	            var blockSize = cipher.blockSize;                                                                         // 9490
                                                                                                                       // 9491
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9492
                                                                                                                       // 9493
	            // Remember this block to use with next block                                                             // 9494
	            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 9495
	        }                                                                                                             // 9496
	    });                                                                                                               // 9497
                                                                                                                       // 9498
	    CFB.Decryptor = CFB.extend({                                                                                      // 9499
	        processBlock: function (words, offset) {                                                                      // 9500
	            // Shortcuts                                                                                              // 9501
	            var cipher = this._cipher;                                                                                // 9502
	            var blockSize = cipher.blockSize;                                                                         // 9503
                                                                                                                       // 9504
	            // Remember this block to use with next block                                                             // 9505
	            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 9506
                                                                                                                       // 9507
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9508
                                                                                                                       // 9509
	            // This block becomes the previous block                                                                  // 9510
	            this._prevBlock = thisBlock;                                                                              // 9511
	        }                                                                                                             // 9512
	    });                                                                                                               // 9513
                                                                                                                       // 9514
	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 9515
	        // Shortcut                                                                                                   // 9516
	        var iv = this._iv;                                                                                            // 9517
                                                                                                                       // 9518
	        // Generate keystream                                                                                         // 9519
	        if (iv) {                                                                                                     // 9520
	            var keystream = iv.slice(0);                                                                              // 9521
                                                                                                                       // 9522
	            // Remove IV for subsequent blocks                                                                        // 9523
	            this._iv = undefined;                                                                                     // 9524
	        } else {                                                                                                      // 9525
	            var keystream = this._prevBlock;                                                                          // 9526
	        }                                                                                                             // 9527
	        cipher.encryptBlock(keystream, 0);                                                                            // 9528
                                                                                                                       // 9529
	        // Encrypt                                                                                                    // 9530
	        for (var i = 0; i < blockSize; i++) {                                                                         // 9531
	            words[offset + i] ^= keystream[i];                                                                        // 9532
	        }                                                                                                             // 9533
	    }                                                                                                                 // 9534
                                                                                                                       // 9535
	    return CFB;                                                                                                       // 9536
	}());                                                                                                                 // 9537
                                                                                                                       // 9538
                                                                                                                       // 9539
	return CryptoJS.mode.CFB;                                                                                             // 9540
                                                                                                                       // 9541
}));                                                                                                                   // 9542
},{"./cipher-core":52,"./core":53}],63:[function(require,module,exports){                                              // 9543
;(function (root, factory, undef) {                                                                                    // 9544
	if (typeof exports === "object") {                                                                                    // 9545
		// CommonJS                                                                                                          // 9546
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9547
	}                                                                                                                     // 9548
	else if (typeof define === "function" && define.amd) {                                                                // 9549
		// AMD                                                                                                               // 9550
		define(["./core", "./cipher-core"], factory);                                                                        // 9551
	}                                                                                                                     // 9552
	else {                                                                                                                // 9553
		// Global (browser)                                                                                                  // 9554
		factory(root.CryptoJS);                                                                                              // 9555
	}                                                                                                                     // 9556
}(this, function (CryptoJS) {                                                                                          // 9557
                                                                                                                       // 9558
	/** @preserve                                                                                                         // 9559
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 9560
	 * derived from CryptoJS.mode.CTR                                                                                     // 9561
	 * Jan Hruby jhruby.web@gmail.com                                                                                     // 9562
	 */                                                                                                                   // 9563
	CryptoJS.mode.CTRGladman = (function () {                                                                             // 9564
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 9565
                                                                                                                       // 9566
		function incWord(word)                                                                                               // 9567
		{                                                                                                                    // 9568
			if (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 9569
			var b1 = (word >> 16)&0xff;                                                                                         // 9570
			var b2 = (word >> 8)&0xff;                                                                                          // 9571
			var b3 = word & 0xff;                                                                                               // 9572
                                                                                                                       // 9573
			if (b1 === 0xff) // overflow b1                                                                                     // 9574
			{                                                                                                                   // 9575
			b1 = 0;                                                                                                             // 9576
			if (b2 === 0xff)                                                                                                    // 9577
			{                                                                                                                   // 9578
				b2 = 0;                                                                                                            // 9579
				if (b3 === 0xff)                                                                                                   // 9580
				{                                                                                                                  // 9581
					b3 = 0;                                                                                                           // 9582
				}                                                                                                                  // 9583
				else                                                                                                               // 9584
				{                                                                                                                  // 9585
					++b3;                                                                                                             // 9586
				}                                                                                                                  // 9587
			}                                                                                                                   // 9588
			else                                                                                                                // 9589
			{                                                                                                                   // 9590
				++b2;                                                                                                              // 9591
			}                                                                                                                   // 9592
			}                                                                                                                   // 9593
			else                                                                                                                // 9594
			{                                                                                                                   // 9595
			++b1;                                                                                                               // 9596
			}                                                                                                                   // 9597
                                                                                                                       // 9598
			word = 0;                                                                                                           // 9599
			word += (b1 << 16);                                                                                                 // 9600
			word += (b2 << 8);                                                                                                  // 9601
			word += b3;                                                                                                         // 9602
			}                                                                                                                   // 9603
			else                                                                                                                // 9604
			{                                                                                                                   // 9605
			word += (0x01 << 24);                                                                                               // 9606
			}                                                                                                                   // 9607
			return word;                                                                                                        // 9608
		}                                                                                                                    // 9609
                                                                                                                       // 9610
		function incCounter(counter)                                                                                         // 9611
		{                                                                                                                    // 9612
			if ((counter[0] = incWord(counter[0])) === 0)                                                                       // 9613
			{                                                                                                                   // 9614
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 9615
				counter[1] = incWord(counter[1]);                                                                                  // 9616
			}                                                                                                                   // 9617
			return counter;                                                                                                     // 9618
		}                                                                                                                    // 9619
                                                                                                                       // 9620
	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 9621
	        processBlock: function (words, offset) {                                                                      // 9622
	            // Shortcuts                                                                                              // 9623
	            var cipher = this._cipher                                                                                 // 9624
	            var blockSize = cipher.blockSize;                                                                         // 9625
	            var iv = this._iv;                                                                                        // 9626
	            var counter = this._counter;                                                                              // 9627
                                                                                                                       // 9628
	            // Generate keystream                                                                                     // 9629
	            if (iv) {                                                                                                 // 9630
	                counter = this._counter = iv.slice(0);                                                                // 9631
                                                                                                                       // 9632
	                // Remove IV for subsequent blocks                                                                    // 9633
	                this._iv = undefined;                                                                                 // 9634
	            }                                                                                                         // 9635
                                                                                                                       // 9636
				incCounter(counter);                                                                                               // 9637
                                                                                                                       // 9638
				var keystream = counter.slice(0);                                                                                  // 9639
	            cipher.encryptBlock(keystream, 0);                                                                        // 9640
                                                                                                                       // 9641
	            // Encrypt                                                                                                // 9642
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9643
	                words[offset + i] ^= keystream[i];                                                                    // 9644
	            }                                                                                                         // 9645
	        }                                                                                                             // 9646
	    });                                                                                                               // 9647
                                                                                                                       // 9648
	    CTRGladman.Decryptor = Encryptor;                                                                                 // 9649
                                                                                                                       // 9650
	    return CTRGladman;                                                                                                // 9651
	}());                                                                                                                 // 9652
                                                                                                                       // 9653
                                                                                                                       // 9654
                                                                                                                       // 9655
                                                                                                                       // 9656
	return CryptoJS.mode.CTRGladman;                                                                                      // 9657
                                                                                                                       // 9658
}));                                                                                                                   // 9659
},{"./cipher-core":52,"./core":53}],64:[function(require,module,exports){                                              // 9660
;(function (root, factory, undef) {                                                                                    // 9661
	if (typeof exports === "object") {                                                                                    // 9662
		// CommonJS                                                                                                          // 9663
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9664
	}                                                                                                                     // 9665
	else if (typeof define === "function" && define.amd) {                                                                // 9666
		// AMD                                                                                                               // 9667
		define(["./core", "./cipher-core"], factory);                                                                        // 9668
	}                                                                                                                     // 9669
	else {                                                                                                                // 9670
		// Global (browser)                                                                                                  // 9671
		factory(root.CryptoJS);                                                                                              // 9672
	}                                                                                                                     // 9673
}(this, function (CryptoJS) {                                                                                          // 9674
                                                                                                                       // 9675
	/**                                                                                                                   // 9676
	 * Counter block mode.                                                                                                // 9677
	 */                                                                                                                   // 9678
	CryptoJS.mode.CTR = (function () {                                                                                    // 9679
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9680
                                                                                                                       // 9681
	    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 9682
	        processBlock: function (words, offset) {                                                                      // 9683
	            // Shortcuts                                                                                              // 9684
	            var cipher = this._cipher                                                                                 // 9685
	            var blockSize = cipher.blockSize;                                                                         // 9686
	            var iv = this._iv;                                                                                        // 9687
	            var counter = this._counter;                                                                              // 9688
                                                                                                                       // 9689
	            // Generate keystream                                                                                     // 9690
	            if (iv) {                                                                                                 // 9691
	                counter = this._counter = iv.slice(0);                                                                // 9692
                                                                                                                       // 9693
	                // Remove IV for subsequent blocks                                                                    // 9694
	                this._iv = undefined;                                                                                 // 9695
	            }                                                                                                         // 9696
	            var keystream = counter.slice(0);                                                                         // 9697
	            cipher.encryptBlock(keystream, 0);                                                                        // 9698
                                                                                                                       // 9699
	            // Increment counter                                                                                      // 9700
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 9701
                                                                                                                       // 9702
	            // Encrypt                                                                                                // 9703
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9704
	                words[offset + i] ^= keystream[i];                                                                    // 9705
	            }                                                                                                         // 9706
	        }                                                                                                             // 9707
	    });                                                                                                               // 9708
                                                                                                                       // 9709
	    CTR.Decryptor = Encryptor;                                                                                        // 9710
                                                                                                                       // 9711
	    return CTR;                                                                                                       // 9712
	}());                                                                                                                 // 9713
                                                                                                                       // 9714
                                                                                                                       // 9715
	return CryptoJS.mode.CTR;                                                                                             // 9716
                                                                                                                       // 9717
}));                                                                                                                   // 9718
},{"./cipher-core":52,"./core":53}],65:[function(require,module,exports){                                              // 9719
;(function (root, factory, undef) {                                                                                    // 9720
	if (typeof exports === "object") {                                                                                    // 9721
		// CommonJS                                                                                                          // 9722
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9723
	}                                                                                                                     // 9724
	else if (typeof define === "function" && define.amd) {                                                                // 9725
		// AMD                                                                                                               // 9726
		define(["./core", "./cipher-core"], factory);                                                                        // 9727
	}                                                                                                                     // 9728
	else {                                                                                                                // 9729
		// Global (browser)                                                                                                  // 9730
		factory(root.CryptoJS);                                                                                              // 9731
	}                                                                                                                     // 9732
}(this, function (CryptoJS) {                                                                                          // 9733
                                                                                                                       // 9734
	/**                                                                                                                   // 9735
	 * Electronic Codebook block mode.                                                                                    // 9736
	 */                                                                                                                   // 9737
	CryptoJS.mode.ECB = (function () {                                                                                    // 9738
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9739
                                                                                                                       // 9740
	    ECB.Encryptor = ECB.extend({                                                                                      // 9741
	        processBlock: function (words, offset) {                                                                      // 9742
	            this._cipher.encryptBlock(words, offset);                                                                 // 9743
	        }                                                                                                             // 9744
	    });                                                                                                               // 9745
                                                                                                                       // 9746
	    ECB.Decryptor = ECB.extend({                                                                                      // 9747
	        processBlock: function (words, offset) {                                                                      // 9748
	            this._cipher.decryptBlock(words, offset);                                                                 // 9749
	        }                                                                                                             // 9750
	    });                                                                                                               // 9751
                                                                                                                       // 9752
	    return ECB;                                                                                                       // 9753
	}());                                                                                                                 // 9754
                                                                                                                       // 9755
                                                                                                                       // 9756
	return CryptoJS.mode.ECB;                                                                                             // 9757
                                                                                                                       // 9758
}));                                                                                                                   // 9759
},{"./cipher-core":52,"./core":53}],66:[function(require,module,exports){                                              // 9760
;(function (root, factory, undef) {                                                                                    // 9761
	if (typeof exports === "object") {                                                                                    // 9762
		// CommonJS                                                                                                          // 9763
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9764
	}                                                                                                                     // 9765
	else if (typeof define === "function" && define.amd) {                                                                // 9766
		// AMD                                                                                                               // 9767
		define(["./core", "./cipher-core"], factory);                                                                        // 9768
	}                                                                                                                     // 9769
	else {                                                                                                                // 9770
		// Global (browser)                                                                                                  // 9771
		factory(root.CryptoJS);                                                                                              // 9772
	}                                                                                                                     // 9773
}(this, function (CryptoJS) {                                                                                          // 9774
                                                                                                                       // 9775
	/**                                                                                                                   // 9776
	 * Output Feedback block mode.                                                                                        // 9777
	 */                                                                                                                   // 9778
	CryptoJS.mode.OFB = (function () {                                                                                    // 9779
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9780
                                                                                                                       // 9781
	    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 9782
	        processBlock: function (words, offset) {                                                                      // 9783
	            // Shortcuts                                                                                              // 9784
	            var cipher = this._cipher                                                                                 // 9785
	            var blockSize = cipher.blockSize;                                                                         // 9786
	            var iv = this._iv;                                                                                        // 9787
	            var keystream = this._keystream;                                                                          // 9788
                                                                                                                       // 9789
	            // Generate keystream                                                                                     // 9790
	            if (iv) {                                                                                                 // 9791
	                keystream = this._keystream = iv.slice(0);                                                            // 9792
                                                                                                                       // 9793
	                // Remove IV for subsequent blocks                                                                    // 9794
	                this._iv = undefined;                                                                                 // 9795
	            }                                                                                                         // 9796
	            cipher.encryptBlock(keystream, 0);                                                                        // 9797
                                                                                                                       // 9798
	            // Encrypt                                                                                                // 9799
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9800
	                words[offset + i] ^= keystream[i];                                                                    // 9801
	            }                                                                                                         // 9802
	        }                                                                                                             // 9803
	    });                                                                                                               // 9804
                                                                                                                       // 9805
	    OFB.Decryptor = Encryptor;                                                                                        // 9806
                                                                                                                       // 9807
	    return OFB;                                                                                                       // 9808
	}());                                                                                                                 // 9809
                                                                                                                       // 9810
                                                                                                                       // 9811
	return CryptoJS.mode.OFB;                                                                                             // 9812
                                                                                                                       // 9813
}));                                                                                                                   // 9814
},{"./cipher-core":52,"./core":53}],67:[function(require,module,exports){                                              // 9815
;(function (root, factory, undef) {                                                                                    // 9816
	if (typeof exports === "object") {                                                                                    // 9817
		// CommonJS                                                                                                          // 9818
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9819
	}                                                                                                                     // 9820
	else if (typeof define === "function" && define.amd) {                                                                // 9821
		// AMD                                                                                                               // 9822
		define(["./core", "./cipher-core"], factory);                                                                        // 9823
	}                                                                                                                     // 9824
	else {                                                                                                                // 9825
		// Global (browser)                                                                                                  // 9826
		factory(root.CryptoJS);                                                                                              // 9827
	}                                                                                                                     // 9828
}(this, function (CryptoJS) {                                                                                          // 9829
                                                                                                                       // 9830
	/**                                                                                                                   // 9831
	 * ANSI X.923 padding strategy.                                                                                       // 9832
	 */                                                                                                                   // 9833
	CryptoJS.pad.AnsiX923 = {                                                                                             // 9834
	    pad: function (data, blockSize) {                                                                                 // 9835
	        // Shortcuts                                                                                                  // 9836
	        var dataSigBytes = data.sigBytes;                                                                             // 9837
	        var blockSizeBytes = blockSize * 4;                                                                           // 9838
                                                                                                                       // 9839
	        // Count padding bytes                                                                                        // 9840
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 9841
                                                                                                                       // 9842
	        // Compute last byte position                                                                                 // 9843
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 9844
                                                                                                                       // 9845
	        // Pad                                                                                                        // 9846
	        data.clamp();                                                                                                 // 9847
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 9848
	        data.sigBytes += nPaddingBytes;                                                                               // 9849
	    },                                                                                                                // 9850
                                                                                                                       // 9851
	    unpad: function (data) {                                                                                          // 9852
	        // Get number of padding bytes from last byte                                                                 // 9853
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9854
                                                                                                                       // 9855
	        // Remove padding                                                                                             // 9856
	        data.sigBytes -= nPaddingBytes;                                                                               // 9857
	    }                                                                                                                 // 9858
	};                                                                                                                    // 9859
                                                                                                                       // 9860
                                                                                                                       // 9861
	return CryptoJS.pad.Ansix923;                                                                                         // 9862
                                                                                                                       // 9863
}));                                                                                                                   // 9864
},{"./cipher-core":52,"./core":53}],68:[function(require,module,exports){                                              // 9865
;(function (root, factory, undef) {                                                                                    // 9866
	if (typeof exports === "object") {                                                                                    // 9867
		// CommonJS                                                                                                          // 9868
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9869
	}                                                                                                                     // 9870
	else if (typeof define === "function" && define.amd) {                                                                // 9871
		// AMD                                                                                                               // 9872
		define(["./core", "./cipher-core"], factory);                                                                        // 9873
	}                                                                                                                     // 9874
	else {                                                                                                                // 9875
		// Global (browser)                                                                                                  // 9876
		factory(root.CryptoJS);                                                                                              // 9877
	}                                                                                                                     // 9878
}(this, function (CryptoJS) {                                                                                          // 9879
                                                                                                                       // 9880
	/**                                                                                                                   // 9881
	 * ISO 10126 padding strategy.                                                                                        // 9882
	 */                                                                                                                   // 9883
	CryptoJS.pad.Iso10126 = {                                                                                             // 9884
	    pad: function (data, blockSize) {                                                                                 // 9885
	        // Shortcut                                                                                                   // 9886
	        var blockSizeBytes = blockSize * 4;                                                                           // 9887
                                                                                                                       // 9888
	        // Count padding bytes                                                                                        // 9889
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 9890
                                                                                                                       // 9891
	        // Pad                                                                                                        // 9892
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 9893
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 9894
	    },                                                                                                                // 9895
                                                                                                                       // 9896
	    unpad: function (data) {                                                                                          // 9897
	        // Get number of padding bytes from last byte                                                                 // 9898
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9899
                                                                                                                       // 9900
	        // Remove padding                                                                                             // 9901
	        data.sigBytes -= nPaddingBytes;                                                                               // 9902
	    }                                                                                                                 // 9903
	};                                                                                                                    // 9904
                                                                                                                       // 9905
                                                                                                                       // 9906
	return CryptoJS.pad.Iso10126;                                                                                         // 9907
                                                                                                                       // 9908
}));                                                                                                                   // 9909
},{"./cipher-core":52,"./core":53}],69:[function(require,module,exports){                                              // 9910
;(function (root, factory, undef) {                                                                                    // 9911
	if (typeof exports === "object") {                                                                                    // 9912
		// CommonJS                                                                                                          // 9913
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9914
	}                                                                                                                     // 9915
	else if (typeof define === "function" && define.amd) {                                                                // 9916
		// AMD                                                                                                               // 9917
		define(["./core", "./cipher-core"], factory);                                                                        // 9918
	}                                                                                                                     // 9919
	else {                                                                                                                // 9920
		// Global (browser)                                                                                                  // 9921
		factory(root.CryptoJS);                                                                                              // 9922
	}                                                                                                                     // 9923
}(this, function (CryptoJS) {                                                                                          // 9924
                                                                                                                       // 9925
	/**                                                                                                                   // 9926
	 * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 9927
	 */                                                                                                                   // 9928
	CryptoJS.pad.Iso97971 = {                                                                                             // 9929
	    pad: function (data, blockSize) {                                                                                 // 9930
	        // Add 0x80 byte                                                                                              // 9931
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 9932
                                                                                                                       // 9933
	        // Zero pad the rest                                                                                          // 9934
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 9935
	    },                                                                                                                // 9936
                                                                                                                       // 9937
	    unpad: function (data) {                                                                                          // 9938
	        // Remove zero padding                                                                                        // 9939
	        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 9940
                                                                                                                       // 9941
	        // Remove one more byte -- the 0x80 byte                                                                      // 9942
	        data.sigBytes--;                                                                                              // 9943
	    }                                                                                                                 // 9944
	};                                                                                                                    // 9945
                                                                                                                       // 9946
                                                                                                                       // 9947
	return CryptoJS.pad.Iso97971;                                                                                         // 9948
                                                                                                                       // 9949
}));                                                                                                                   // 9950
},{"./cipher-core":52,"./core":53}],70:[function(require,module,exports){                                              // 9951
;(function (root, factory, undef) {                                                                                    // 9952
	if (typeof exports === "object") {                                                                                    // 9953
		// CommonJS                                                                                                          // 9954
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9955
	}                                                                                                                     // 9956
	else if (typeof define === "function" && define.amd) {                                                                // 9957
		// AMD                                                                                                               // 9958
		define(["./core", "./cipher-core"], factory);                                                                        // 9959
	}                                                                                                                     // 9960
	else {                                                                                                                // 9961
		// Global (browser)                                                                                                  // 9962
		factory(root.CryptoJS);                                                                                              // 9963
	}                                                                                                                     // 9964
}(this, function (CryptoJS) {                                                                                          // 9965
                                                                                                                       // 9966
	/**                                                                                                                   // 9967
	 * A noop padding strategy.                                                                                           // 9968
	 */                                                                                                                   // 9969
	CryptoJS.pad.NoPadding = {                                                                                            // 9970
	    pad: function () {                                                                                                // 9971
	    },                                                                                                                // 9972
                                                                                                                       // 9973
	    unpad: function () {                                                                                              // 9974
	    }                                                                                                                 // 9975
	};                                                                                                                    // 9976
                                                                                                                       // 9977
                                                                                                                       // 9978
	return CryptoJS.pad.NoPadding;                                                                                        // 9979
                                                                                                                       // 9980
}));                                                                                                                   // 9981
},{"./cipher-core":52,"./core":53}],71:[function(require,module,exports){                                              // 9982
;(function (root, factory, undef) {                                                                                    // 9983
	if (typeof exports === "object") {                                                                                    // 9984
		// CommonJS                                                                                                          // 9985
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9986
	}                                                                                                                     // 9987
	else if (typeof define === "function" && define.amd) {                                                                // 9988
		// AMD                                                                                                               // 9989
		define(["./core", "./cipher-core"], factory);                                                                        // 9990
	}                                                                                                                     // 9991
	else {                                                                                                                // 9992
		// Global (browser)                                                                                                  // 9993
		factory(root.CryptoJS);                                                                                              // 9994
	}                                                                                                                     // 9995
}(this, function (CryptoJS) {                                                                                          // 9996
                                                                                                                       // 9997
	/**                                                                                                                   // 9998
	 * Zero padding strategy.                                                                                             // 9999
	 */                                                                                                                   // 10000
	CryptoJS.pad.ZeroPadding = {                                                                                          // 10001
	    pad: function (data, blockSize) {                                                                                 // 10002
	        // Shortcut                                                                                                   // 10003
	        var blockSizeBytes = blockSize * 4;                                                                           // 10004
                                                                                                                       // 10005
	        // Pad                                                                                                        // 10006
	        data.clamp();                                                                                                 // 10007
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 10008
	    },                                                                                                                // 10009
                                                                                                                       // 10010
	    unpad: function (data) {                                                                                          // 10011
	        // Shortcut                                                                                                   // 10012
	        var dataWords = data.words;                                                                                   // 10013
                                                                                                                       // 10014
	        // Unpad                                                                                                      // 10015
	        var i = data.sigBytes - 1;                                                                                    // 10016
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 10017
	            i--;                                                                                                      // 10018
	        }                                                                                                             // 10019
	        data.sigBytes = i + 1;                                                                                        // 10020
	    }                                                                                                                 // 10021
	};                                                                                                                    // 10022
                                                                                                                       // 10023
                                                                                                                       // 10024
	return CryptoJS.pad.ZeroPadding;                                                                                      // 10025
                                                                                                                       // 10026
}));                                                                                                                   // 10027
},{"./cipher-core":52,"./core":53}],72:[function(require,module,exports){                                              // 10028
;(function (root, factory, undef) {                                                                                    // 10029
	if (typeof exports === "object") {                                                                                    // 10030
		// CommonJS                                                                                                          // 10031
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 10032
	}                                                                                                                     // 10033
	else if (typeof define === "function" && define.amd) {                                                                // 10034
		// AMD                                                                                                               // 10035
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 10036
	}                                                                                                                     // 10037
	else {                                                                                                                // 10038
		// Global (browser)                                                                                                  // 10039
		factory(root.CryptoJS);                                                                                              // 10040
	}                                                                                                                     // 10041
}(this, function (CryptoJS) {                                                                                          // 10042
                                                                                                                       // 10043
	(function () {                                                                                                        // 10044
	    // Shortcuts                                                                                                      // 10045
	    var C = CryptoJS;                                                                                                 // 10046
	    var C_lib = C.lib;                                                                                                // 10047
	    var Base = C_lib.Base;                                                                                            // 10048
	    var WordArray = C_lib.WordArray;                                                                                  // 10049
	    var C_algo = C.algo;                                                                                              // 10050
	    var SHA1 = C_algo.SHA1;                                                                                           // 10051
	    var HMAC = C_algo.HMAC;                                                                                           // 10052
                                                                                                                       // 10053
	    /**                                                                                                               // 10054
	     * Password-Based Key Derivation Function 2 algorithm.                                                            // 10055
	     */                                                                                                               // 10056
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 10057
	        /**                                                                                                           // 10058
	         * Configuration options.                                                                                     // 10059
	         *                                                                                                            // 10060
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 10061
	         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 10062
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 10063
	         */                                                                                                           // 10064
	        cfg: Base.extend({                                                                                            // 10065
	            keySize: 128/32,                                                                                          // 10066
	            hasher: SHA1,                                                                                             // 10067
	            iterations: 1                                                                                             // 10068
	        }),                                                                                                           // 10069
                                                                                                                       // 10070
	        /**                                                                                                           // 10071
	         * Initializes a newly created key derivation function.                                                       // 10072
	         *                                                                                                            // 10073
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 10074
	         *                                                                                                            // 10075
	         * @example                                                                                                   // 10076
	         *                                                                                                            // 10077
	         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 10078
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 10079
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 10080
	         */                                                                                                           // 10081
	        init: function (cfg) {                                                                                        // 10082
	            this.cfg = this.cfg.extend(cfg);                                                                          // 10083
	        },                                                                                                            // 10084
                                                                                                                       // 10085
	        /**                                                                                                           // 10086
	         * Computes the Password-Based Key Derivation Function 2.                                                     // 10087
	         *                                                                                                            // 10088
	         * @param {WordArray|string} password The password.                                                           // 10089
	         * @param {WordArray|string} salt A salt.                                                                     // 10090
	         *                                                                                                            // 10091
	         * @return {WordArray} The derived key.                                                                       // 10092
	         *                                                                                                            // 10093
	         * @example                                                                                                   // 10094
	         *                                                                                                            // 10095
	         *     var key = kdf.compute(password, salt);                                                                 // 10096
	         */                                                                                                           // 10097
	        compute: function (password, salt) {                                                                          // 10098
	            // Shortcut                                                                                               // 10099
	            var cfg = this.cfg;                                                                                       // 10100
                                                                                                                       // 10101
	            // Init HMAC                                                                                              // 10102
	            var hmac = HMAC.create(cfg.hasher, password);                                                             // 10103
                                                                                                                       // 10104
	            // Initial values                                                                                         // 10105
	            var derivedKey = WordArray.create();                                                                      // 10106
	            var blockIndex = WordArray.create([0x00000001]);                                                          // 10107
                                                                                                                       // 10108
	            // Shortcuts                                                                                              // 10109
	            var derivedKeyWords = derivedKey.words;                                                                   // 10110
	            var blockIndexWords = blockIndex.words;                                                                   // 10111
	            var keySize = cfg.keySize;                                                                                // 10112
	            var iterations = cfg.iterations;                                                                          // 10113
                                                                                                                       // 10114
	            // Generate key                                                                                           // 10115
	            while (derivedKeyWords.length < keySize) {                                                                // 10116
	                var block = hmac.update(salt).finalize(blockIndex);                                                   // 10117
	                hmac.reset();                                                                                         // 10118
                                                                                                                       // 10119
	                // Shortcuts                                                                                          // 10120
	                var blockWords = block.words;                                                                         // 10121
	                var blockWordsLength = blockWords.length;                                                             // 10122
                                                                                                                       // 10123
	                // Iterations                                                                                         // 10124
	                var intermediate = block;                                                                             // 10125
	                for (var i = 1; i < iterations; i++) {                                                                // 10126
	                    intermediate = hmac.finalize(intermediate);                                                       // 10127
	                    hmac.reset();                                                                                     // 10128
                                                                                                                       // 10129
	                    // Shortcut                                                                                       // 10130
	                    var intermediateWords = intermediate.words;                                                       // 10131
                                                                                                                       // 10132
	                    // XOR intermediate with block                                                                    // 10133
	                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 10134
	                        blockWords[j] ^= intermediateWords[j];                                                        // 10135
	                    }                                                                                                 // 10136
	                }                                                                                                     // 10137
                                                                                                                       // 10138
	                derivedKey.concat(block);                                                                             // 10139
	                blockIndexWords[0]++;                                                                                 // 10140
	            }                                                                                                         // 10141
	            derivedKey.sigBytes = keySize * 4;                                                                        // 10142
                                                                                                                       // 10143
	            return derivedKey;                                                                                        // 10144
	        }                                                                                                             // 10145
	    });                                                                                                               // 10146
                                                                                                                       // 10147
	    /**                                                                                                               // 10148
	     * Computes the Password-Based Key Derivation Function 2.                                                         // 10149
	     *                                                                                                                // 10150
	     * @param {WordArray|string} password The password.                                                               // 10151
	     * @param {WordArray|string} salt A salt.                                                                         // 10152
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 10153
	     *                                                                                                                // 10154
	     * @return {WordArray} The derived key.                                                                           // 10155
	     *                                                                                                                // 10156
	     * @static                                                                                                        // 10157
	     *                                                                                                                // 10158
	     * @example                                                                                                       // 10159
	     *                                                                                                                // 10160
	     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 10161
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 10162
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 10163
	     */                                                                                                               // 10164
	    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 10165
	        return PBKDF2.create(cfg).compute(password, salt);                                                            // 10166
	    };                                                                                                                // 10167
	}());                                                                                                                 // 10168
                                                                                                                       // 10169
                                                                                                                       // 10170
	return CryptoJS.PBKDF2;                                                                                               // 10171
                                                                                                                       // 10172
}));                                                                                                                   // 10173
},{"./core":53,"./hmac":58,"./sha1":77}],73:[function(require,module,exports){                                         // 10174
;(function (root, factory, undef) {                                                                                    // 10175
	if (typeof exports === "object") {                                                                                    // 10176
		// CommonJS                                                                                                          // 10177
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10179
	else if (typeof define === "function" && define.amd) {                                                                // 10180
		// AMD                                                                                                               // 10181
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10182
	}                                                                                                                     // 10183
	else {                                                                                                                // 10184
		// Global (browser)                                                                                                  // 10185
		factory(root.CryptoJS);                                                                                              // 10186
	}                                                                                                                     // 10187
}(this, function (CryptoJS) {                                                                                          // 10188
                                                                                                                       // 10189
	(function () {                                                                                                        // 10190
	    // Shortcuts                                                                                                      // 10191
	    var C = CryptoJS;                                                                                                 // 10192
	    var C_lib = C.lib;                                                                                                // 10193
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10194
	    var C_algo = C.algo;                                                                                              // 10195
                                                                                                                       // 10196
	    // Reusable objects                                                                                               // 10197
	    var S  = [];                                                                                                      // 10198
	    var C_ = [];                                                                                                      // 10199
	    var G  = [];                                                                                                      // 10200
                                                                                                                       // 10201
	    /**                                                                                                               // 10202
	     * Rabbit stream cipher algorithm.                                                                                // 10203
	     *                                                                                                                // 10204
	     * This is a legacy version that neglected to convert the key to little-endian.                                   // 10205
	     * This error doesn't affect the cipher's security,                                                               // 10206
	     * but it does affect its compatibility with other implementations.                                               // 10207
	     */                                                                                                               // 10208
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 10209
	        _doReset: function () {                                                                                       // 10210
	            // Shortcuts                                                                                              // 10211
	            var K = this._key.words;                                                                                  // 10212
	            var iv = this.cfg.iv;                                                                                     // 10213
                                                                                                                       // 10214
	            // Generate initial state values                                                                          // 10215
	            var X = this._X = [                                                                                       // 10216
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10217
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10218
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10219
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10220
	            ];                                                                                                        // 10221
                                                                                                                       // 10222
	            // Generate initial counter values                                                                        // 10223
	            var C = this._C = [                                                                                       // 10224
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10225
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10226
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10227
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10228
	            ];                                                                                                        // 10229
                                                                                                                       // 10230
	            // Carry bit                                                                                              // 10231
	            this._b = 0;                                                                                              // 10232
                                                                                                                       // 10233
	            // Iterate the system four times                                                                          // 10234
	            for (var i = 0; i < 4; i++) {                                                                             // 10235
	                nextState.call(this);                                                                                 // 10236
	            }                                                                                                         // 10237
                                                                                                                       // 10238
	            // Modify the counters                                                                                    // 10239
	            for (var i = 0; i < 8; i++) {                                                                             // 10240
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10241
	            }                                                                                                         // 10242
                                                                                                                       // 10243
	            // IV setup                                                                                               // 10244
	            if (iv) {                                                                                                 // 10245
	                // Shortcuts                                                                                          // 10246
	                var IV = iv.words;                                                                                    // 10247
	                var IV_0 = IV[0];                                                                                     // 10248
	                var IV_1 = IV[1];                                                                                     // 10249
                                                                                                                       // 10250
	                // Generate four subvectors                                                                           // 10251
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10254
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10255
                                                                                                                       // 10256
	                // Modify counter values                                                                              // 10257
	                C[0] ^= i0;                                                                                           // 10258
	                C[1] ^= i1;                                                                                           // 10259
	                C[2] ^= i2;                                                                                           // 10260
	                C[3] ^= i3;                                                                                           // 10261
	                C[4] ^= i0;                                                                                           // 10262
	                C[5] ^= i1;                                                                                           // 10263
	                C[6] ^= i2;                                                                                           // 10264
	                C[7] ^= i3;                                                                                           // 10265
                                                                                                                       // 10266
	                // Iterate the system four times                                                                      // 10267
	                for (var i = 0; i < 4; i++) {                                                                         // 10268
	                    nextState.call(this);                                                                             // 10269
	                }                                                                                                     // 10270
	            }                                                                                                         // 10271
	        },                                                                                                            // 10272
                                                                                                                       // 10273
	        _doProcessBlock: function (M, offset) {                                                                       // 10274
	            // Shortcut                                                                                               // 10275
	            var X = this._X;                                                                                          // 10276
                                                                                                                       // 10277
	            // Iterate the system                                                                                     // 10278
	            nextState.call(this);                                                                                     // 10279
                                                                                                                       // 10280
	            // Generate four keystream words                                                                          // 10281
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10282
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10283
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10284
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10285
                                                                                                                       // 10286
	            for (var i = 0; i < 4; i++) {                                                                             // 10287
	                // Swap endian                                                                                        // 10288
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10289
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10290
                                                                                                                       // 10291
	                // Encrypt                                                                                            // 10292
	                M[offset + i] ^= S[i];                                                                                // 10293
	            }                                                                                                         // 10294
	        },                                                                                                            // 10295
                                                                                                                       // 10296
	        blockSize: 128/32,                                                                                            // 10297
                                                                                                                       // 10298
	        ivSize: 64/32                                                                                                 // 10299
	    });                                                                                                               // 10300
                                                                                                                       // 10301
	    function nextState() {                                                                                            // 10302
	        // Shortcuts                                                                                                  // 10303
	        var X = this._X;                                                                                              // 10304
	        var C = this._C;                                                                                              // 10305
                                                                                                                       // 10306
	        // Save old counter values                                                                                    // 10307
	        for (var i = 0; i < 8; i++) {                                                                                 // 10308
	            C_[i] = C[i];                                                                                             // 10309
	        }                                                                                                             // 10310
                                                                                                                       // 10311
	        // Calculate new counter values                                                                               // 10312
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10313
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10314
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10315
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10316
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10317
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10318
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10319
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10320
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10321
                                                                                                                       // 10322
	        // Calculate the g-values                                                                                     // 10323
	        for (var i = 0; i < 8; i++) {                                                                                 // 10324
	            var gx = X[i] + C[i];                                                                                     // 10325
                                                                                                                       // 10326
	            // Construct high and low argument for squaring                                                           // 10327
	            var ga = gx & 0xffff;                                                                                     // 10328
	            var gb = gx >>> 16;                                                                                       // 10329
                                                                                                                       // 10330
	            // Calculate high and low result of squaring                                                              // 10331
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10332
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10333
                                                                                                                       // 10334
	            // High XOR low                                                                                           // 10335
	            G[i] = gh ^ gl;                                                                                           // 10336
	        }                                                                                                             // 10337
                                                                                                                       // 10338
	        // Calculate new state values                                                                                 // 10339
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10340
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10341
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10342
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10343
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10344
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10345
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10346
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10347
	    }                                                                                                                 // 10348
                                                                                                                       // 10349
	    /**                                                                                                               // 10350
	     * Shortcut functions to the cipher's object interface.                                                           // 10351
	     *                                                                                                                // 10352
	     * @example                                                                                                       // 10353
	     *                                                                                                                // 10354
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 10355
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 10356
	     */                                                                                                               // 10357
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 10358
	}());                                                                                                                 // 10359
                                                                                                                       // 10360
                                                                                                                       // 10361
	return CryptoJS.RabbitLegacy;                                                                                         // 10362
                                                                                                                       // 10363
}));                                                                                                                   // 10364
},{"./cipher-core":52,"./core":53,"./enc-base64":54,"./evpkdf":56,"./md5":61}],74:[function(require,module,exports){   // 10365
;(function (root, factory, undef) {                                                                                    // 10366
	if (typeof exports === "object") {                                                                                    // 10367
		// CommonJS                                                                                                          // 10368
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10370
	else if (typeof define === "function" && define.amd) {                                                                // 10371
		// AMD                                                                                                               // 10372
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10373
	}                                                                                                                     // 10374
	else {                                                                                                                // 10375
		// Global (browser)                                                                                                  // 10376
		factory(root.CryptoJS);                                                                                              // 10377
	}                                                                                                                     // 10378
}(this, function (CryptoJS) {                                                                                          // 10379
                                                                                                                       // 10380
	(function () {                                                                                                        // 10381
	    // Shortcuts                                                                                                      // 10382
	    var C = CryptoJS;                                                                                                 // 10383
	    var C_lib = C.lib;                                                                                                // 10384
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10385
	    var C_algo = C.algo;                                                                                              // 10386
                                                                                                                       // 10387
	    // Reusable objects                                                                                               // 10388
	    var S  = [];                                                                                                      // 10389
	    var C_ = [];                                                                                                      // 10390
	    var G  = [];                                                                                                      // 10391
                                                                                                                       // 10392
	    /**                                                                                                               // 10393
	     * Rabbit stream cipher algorithm                                                                                 // 10394
	     */                                                                                                               // 10395
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 10396
	        _doReset: function () {                                                                                       // 10397
	            // Shortcuts                                                                                              // 10398
	            var K = this._key.words;                                                                                  // 10399
	            var iv = this.cfg.iv;                                                                                     // 10400
                                                                                                                       // 10401
	            // Swap endian                                                                                            // 10402
	            for (var i = 0; i < 4; i++) {                                                                             // 10403
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 10404
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 10405
	            }                                                                                                         // 10406
                                                                                                                       // 10407
	            // Generate initial state values                                                                          // 10408
	            var X = this._X = [                                                                                       // 10409
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10410
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10411
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10412
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10413
	            ];                                                                                                        // 10414
                                                                                                                       // 10415
	            // Generate initial counter values                                                                        // 10416
	            var C = this._C = [                                                                                       // 10417
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10418
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10419
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10420
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10421
	            ];                                                                                                        // 10422
                                                                                                                       // 10423
	            // Carry bit                                                                                              // 10424
	            this._b = 0;                                                                                              // 10425
                                                                                                                       // 10426
	            // Iterate the system four times                                                                          // 10427
	            for (var i = 0; i < 4; i++) {                                                                             // 10428
	                nextState.call(this);                                                                                 // 10429
	            }                                                                                                         // 10430
                                                                                                                       // 10431
	            // Modify the counters                                                                                    // 10432
	            for (var i = 0; i < 8; i++) {                                                                             // 10433
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10434
	            }                                                                                                         // 10435
                                                                                                                       // 10436
	            // IV setup                                                                                               // 10437
	            if (iv) {                                                                                                 // 10438
	                // Shortcuts                                                                                          // 10439
	                var IV = iv.words;                                                                                    // 10440
	                var IV_0 = IV[0];                                                                                     // 10441
	                var IV_1 = IV[1];                                                                                     // 10442
                                                                                                                       // 10443
	                // Generate four subvectors                                                                           // 10444
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10447
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10448
                                                                                                                       // 10449
	                // Modify counter values                                                                              // 10450
	                C[0] ^= i0;                                                                                           // 10451
	                C[1] ^= i1;                                                                                           // 10452
	                C[2] ^= i2;                                                                                           // 10453
	                C[3] ^= i3;                                                                                           // 10454
	                C[4] ^= i0;                                                                                           // 10455
	                C[5] ^= i1;                                                                                           // 10456
	                C[6] ^= i2;                                                                                           // 10457
	                C[7] ^= i3;                                                                                           // 10458
                                                                                                                       // 10459
	                // Iterate the system four times                                                                      // 10460
	                for (var i = 0; i < 4; i++) {                                                                         // 10461
	                    nextState.call(this);                                                                             // 10462
	                }                                                                                                     // 10463
	            }                                                                                                         // 10464
	        },                                                                                                            // 10465
                                                                                                                       // 10466
	        _doProcessBlock: function (M, offset) {                                                                       // 10467
	            // Shortcut                                                                                               // 10468
	            var X = this._X;                                                                                          // 10469
                                                                                                                       // 10470
	            // Iterate the system                                                                                     // 10471
	            nextState.call(this);                                                                                     // 10472
                                                                                                                       // 10473
	            // Generate four keystream words                                                                          // 10474
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10475
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10476
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10477
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10478
                                                                                                                       // 10479
	            for (var i = 0; i < 4; i++) {                                                                             // 10480
	                // Swap endian                                                                                        // 10481
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10482
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10483
                                                                                                                       // 10484
	                // Encrypt                                                                                            // 10485
	                M[offset + i] ^= S[i];                                                                                // 10486
	            }                                                                                                         // 10487
	        },                                                                                                            // 10488
                                                                                                                       // 10489
	        blockSize: 128/32,                                                                                            // 10490
                                                                                                                       // 10491
	        ivSize: 64/32                                                                                                 // 10492
	    });                                                                                                               // 10493
                                                                                                                       // 10494
	    function nextState() {                                                                                            // 10495
	        // Shortcuts                                                                                                  // 10496
	        var X = this._X;                                                                                              // 10497
	        var C = this._C;                                                                                              // 10498
                                                                                                                       // 10499
	        // Save old counter values                                                                                    // 10500
	        for (var i = 0; i < 8; i++) {                                                                                 // 10501
	            C_[i] = C[i];                                                                                             // 10502
	        }                                                                                                             // 10503
                                                                                                                       // 10504
	        // Calculate new counter values                                                                               // 10505
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10506
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10507
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10508
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10509
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10510
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10511
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10512
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10513
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10514
                                                                                                                       // 10515
	        // Calculate the g-values                                                                                     // 10516
	        for (var i = 0; i < 8; i++) {                                                                                 // 10517
	            var gx = X[i] + C[i];                                                                                     // 10518
                                                                                                                       // 10519
	            // Construct high and low argument for squaring                                                           // 10520
	            var ga = gx & 0xffff;                                                                                     // 10521
	            var gb = gx >>> 16;                                                                                       // 10522
                                                                                                                       // 10523
	            // Calculate high and low result of squaring                                                              // 10524
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10525
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10526
                                                                                                                       // 10527
	            // High XOR low                                                                                           // 10528
	            G[i] = gh ^ gl;                                                                                           // 10529
	        }                                                                                                             // 10530
                                                                                                                       // 10531
	        // Calculate new state values                                                                                 // 10532
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10533
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10534
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10535
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10536
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10537
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10538
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10539
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10540
	    }                                                                                                                 // 10541
                                                                                                                       // 10542
	    /**                                                                                                               // 10543
	     * Shortcut functions to the cipher's object interface.                                                           // 10544
	     *                                                                                                                // 10545
	     * @example                                                                                                       // 10546
	     *                                                                                                                // 10547
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 10548
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 10549
	     */                                                                                                               // 10550
	    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 10551
	}());                                                                                                                 // 10552
                                                                                                                       // 10553
                                                                                                                       // 10554
	return CryptoJS.Rabbit;                                                                                               // 10555
                                                                                                                       // 10556
}));                                                                                                                   // 10557
},{"./cipher-core":52,"./core":53,"./enc-base64":54,"./evpkdf":56,"./md5":61}],75:[function(require,module,exports){   // 10558
;(function (root, factory, undef) {                                                                                    // 10559
	if (typeof exports === "object") {                                                                                    // 10560
		// CommonJS                                                                                                          // 10561
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10563
	else if (typeof define === "function" && define.amd) {                                                                // 10564
		// AMD                                                                                                               // 10565
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10566
	}                                                                                                                     // 10567
	else {                                                                                                                // 10568
		// Global (browser)                                                                                                  // 10569
		factory(root.CryptoJS);                                                                                              // 10570
	}                                                                                                                     // 10571
}(this, function (CryptoJS) {                                                                                          // 10572
                                                                                                                       // 10573
	(function () {                                                                                                        // 10574
	    // Shortcuts                                                                                                      // 10575
	    var C = CryptoJS;                                                                                                 // 10576
	    var C_lib = C.lib;                                                                                                // 10577
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10578
	    var C_algo = C.algo;                                                                                              // 10579
                                                                                                                       // 10580
	    /**                                                                                                               // 10581
	     * RC4 stream cipher algorithm.                                                                                   // 10582
	     */                                                                                                               // 10583
	    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 10584
	        _doReset: function () {                                                                                       // 10585
	            // Shortcuts                                                                                              // 10586
	            var key = this._key;                                                                                      // 10587
	            var keyWords = key.words;                                                                                 // 10588
	            var keySigBytes = key.sigBytes;                                                                           // 10589
                                                                                                                       // 10590
	            // Init sbox                                                                                              // 10591
	            var S = this._S = [];                                                                                     // 10592
	            for (var i = 0; i < 256; i++) {                                                                           // 10593
	                S[i] = i;                                                                                             // 10594
	            }                                                                                                         // 10595
                                                                                                                       // 10596
	            // Key setup                                                                                              // 10597
	            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 10598
	                var keyByteIndex = i % keySigBytes;                                                                   // 10599
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 10600
                                                                                                                       // 10601
	                j = (j + S[i] + keyByte) % 256;                                                                       // 10602
                                                                                                                       // 10603
	                // Swap                                                                                               // 10604
	                var t = S[i];                                                                                         // 10605
	                S[i] = S[j];                                                                                          // 10606
	                S[j] = t;                                                                                             // 10607
	            }                                                                                                         // 10608
                                                                                                                       // 10609
	            // Counters                                                                                               // 10610
	            this._i = this._j = 0;                                                                                    // 10611
	        },                                                                                                            // 10612
                                                                                                                       // 10613
	        _doProcessBlock: function (M, offset) {                                                                       // 10614
	            M[offset] ^= generateKeystreamWord.call(this);                                                            // 10615
	        },                                                                                                            // 10616
                                                                                                                       // 10617
	        keySize: 256/32,                                                                                              // 10618
                                                                                                                       // 10619
	        ivSize: 0                                                                                                     // 10620
	    });                                                                                                               // 10621
                                                                                                                       // 10622
	    function generateKeystreamWord() {                                                                                // 10623
	        // Shortcuts                                                                                                  // 10624
	        var S = this._S;                                                                                              // 10625
	        var i = this._i;                                                                                              // 10626
	        var j = this._j;                                                                                              // 10627
                                                                                                                       // 10628
	        // Generate keystream word                                                                                    // 10629
	        var keystreamWord = 0;                                                                                        // 10630
	        for (var n = 0; n < 4; n++) {                                                                                 // 10631
	            i = (i + 1) % 256;                                                                                        // 10632
	            j = (j + S[i]) % 256;                                                                                     // 10633
                                                                                                                       // 10634
	            // Swap                                                                                                   // 10635
	            var t = S[i];                                                                                             // 10636
	            S[i] = S[j];                                                                                              // 10637
	            S[j] = t;                                                                                                 // 10638
                                                                                                                       // 10639
	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 10640
	        }                                                                                                             // 10641
                                                                                                                       // 10642
	        // Update counters                                                                                            // 10643
	        this._i = i;                                                                                                  // 10644
	        this._j = j;                                                                                                  // 10645
                                                                                                                       // 10646
	        return keystreamWord;                                                                                         // 10647
	    }                                                                                                                 // 10648
                                                                                                                       // 10649
	    /**                                                                                                               // 10650
	     * Shortcut functions to the cipher's object interface.                                                           // 10651
	     *                                                                                                                // 10652
	     * @example                                                                                                       // 10653
	     *                                                                                                                // 10654
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 10655
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 10656
	     */                                                                                                               // 10657
	    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 10658
                                                                                                                       // 10659
	    /**                                                                                                               // 10660
	     * Modified RC4 stream cipher algorithm.                                                                          // 10661
	     */                                                                                                               // 10662
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 10663
	        /**                                                                                                           // 10664
	         * Configuration options.                                                                                     // 10665
	         *                                                                                                            // 10666
	         * @property {number} drop The number of keystream words to drop. Default 192                                 // 10667
	         */                                                                                                           // 10668
	        cfg: RC4.cfg.extend({                                                                                         // 10669
	            drop: 192                                                                                                 // 10670
	        }),                                                                                                           // 10671
                                                                                                                       // 10672
	        _doReset: function () {                                                                                       // 10673
	            RC4._doReset.call(this);                                                                                  // 10674
                                                                                                                       // 10675
	            // Drop                                                                                                   // 10676
	            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 10677
	                generateKeystreamWord.call(this);                                                                     // 10678
	            }                                                                                                         // 10679
	        }                                                                                                             // 10680
	    });                                                                                                               // 10681
                                                                                                                       // 10682
	    /**                                                                                                               // 10683
	     * Shortcut functions to the cipher's object interface.                                                           // 10684
	     *                                                                                                                // 10685
	     * @example                                                                                                       // 10686
	     *                                                                                                                // 10687
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 10688
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 10689
	     */                                                                                                               // 10690
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 10691
	}());                                                                                                                 // 10692
                                                                                                                       // 10693
                                                                                                                       // 10694
	return CryptoJS.RC4;                                                                                                  // 10695
                                                                                                                       // 10696
}));                                                                                                                   // 10697
},{"./cipher-core":52,"./core":53,"./enc-base64":54,"./evpkdf":56,"./md5":61}],76:[function(require,module,exports){   // 10698
;(function (root, factory) {                                                                                           // 10699
	if (typeof exports === "object") {                                                                                    // 10700
		// CommonJS                                                                                                          // 10701
		module.exports = exports = factory(require("./core"));                                                               // 10702
	}                                                                                                                     // 10703
	else if (typeof define === "function" && define.amd) {                                                                // 10704
		// AMD                                                                                                               // 10705
		define(["./core"], factory);                                                                                         // 10706
	}                                                                                                                     // 10707
	else {                                                                                                                // 10708
		// Global (browser)                                                                                                  // 10709
		factory(root.CryptoJS);                                                                                              // 10710
	}                                                                                                                     // 10711
}(this, function (CryptoJS) {                                                                                          // 10712
                                                                                                                       // 10713
	/** @preserve                                                                                                         // 10714
	(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 10715
                                                                                                                       // 10716
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                                                                                                                       // 10718
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                                                                                                                       // 10721
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/                                                                                                                    // 10723
                                                                                                                       // 10724
	(function (Math) {                                                                                                    // 10725
	    // Shortcuts                                                                                                      // 10726
	    var C = CryptoJS;                                                                                                 // 10727
	    var C_lib = C.lib;                                                                                                // 10728
	    var WordArray = C_lib.WordArray;                                                                                  // 10729
	    var Hasher = C_lib.Hasher;                                                                                        // 10730
	    var C_algo = C.algo;                                                                                              // 10731
                                                                                                                       // 10732
	    // Constants table                                                                                                // 10733
	    var _zl = WordArray.create([                                                                                      // 10734
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 10735
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 10736
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 10737
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 10738
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 10739
	    var _zr = WordArray.create([                                                                                      // 10740
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 10741
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 10742
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 10743
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 10744
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 10745
	    var _sl = WordArray.create([                                                                                      // 10746
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 10747
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 10748
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 10749
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 10750
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 10751
	    var _sr = WordArray.create([                                                                                      // 10752
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 10753
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 10754
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 10755
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 10756
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 10757
                                                                                                                       // 10758
	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 10759
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 10760
                                                                                                                       // 10761
	    /**                                                                                                               // 10762
	     * RIPEMD160 hash algorithm.                                                                                      // 10763
	     */                                                                                                               // 10764
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 10765
	        _doReset: function () {                                                                                       // 10766
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 10767
	        },                                                                                                            // 10768
                                                                                                                       // 10769
	        _doProcessBlock: function (M, offset) {                                                                       // 10770
                                                                                                                       // 10771
	            // Swap endian                                                                                            // 10772
	            for (var i = 0; i < 16; i++) {                                                                            // 10773
	                // Shortcuts                                                                                          // 10774
	                var offset_i = offset + i;                                                                            // 10775
	                var M_offset_i = M[offset_i];                                                                         // 10776
                                                                                                                       // 10777
	                // Swap                                                                                               // 10778
	                M[offset_i] = (                                                                                       // 10779
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 10780
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 10781
	                );                                                                                                    // 10782
	            }                                                                                                         // 10783
	            // Shortcut                                                                                               // 10784
	            var H  = this._hash.words;                                                                                // 10785
	            var hl = _hl.words;                                                                                       // 10786
	            var hr = _hr.words;                                                                                       // 10787
	            var zl = _zl.words;                                                                                       // 10788
	            var zr = _zr.words;                                                                                       // 10789
	            var sl = _sl.words;                                                                                       // 10790
	            var sr = _sr.words;                                                                                       // 10791
                                                                                                                       // 10792
	            // Working variables                                                                                      // 10793
	            var al, bl, cl, dl, el;                                                                                   // 10794
	            var ar, br, cr, dr, er;                                                                                   // 10795
                                                                                                                       // 10796
	            ar = al = H[0];                                                                                           // 10797
	            br = bl = H[1];                                                                                           // 10798
	            cr = cl = H[2];                                                                                           // 10799
	            dr = dl = H[3];                                                                                           // 10800
	            er = el = H[4];                                                                                           // 10801
	            // Computation                                                                                            // 10802
	            var t;                                                                                                    // 10803
	            for (var i = 0; i < 80; i += 1) {                                                                         // 10804
	                t = (al +  M[offset+zl[i]])|0;                                                                        // 10805
	                if (i<16){                                                                                            // 10806
		            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 10807
	                } else if (i<32) {                                                                                    // 10808
		            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 10809
	                } else if (i<48) {                                                                                    // 10810
		            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 10811
	                } else if (i<64) {                                                                                    // 10812
		            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 10813
	                } else {// if (i<80) {                                                                                // 10814
		            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 10815
	                }                                                                                                     // 10816
	                t = t|0;                                                                                              // 10817
	                t =  rotl(t,sl[i]);                                                                                   // 10818
	                t = (t+el)|0;                                                                                         // 10819
	                al = el;                                                                                              // 10820
	                el = dl;                                                                                              // 10821
	                dl = rotl(cl, 10);                                                                                    // 10822
	                cl = bl;                                                                                              // 10823
	                bl = t;                                                                                               // 10824
                                                                                                                       // 10825
	                t = (ar + M[offset+zr[i]])|0;                                                                         // 10826
	                if (i<16){                                                                                            // 10827
		            t +=  f5(br,cr,dr) + hr[0];                                                                              // 10828
	                } else if (i<32) {                                                                                    // 10829
		            t +=  f4(br,cr,dr) + hr[1];                                                                              // 10830
	                } else if (i<48) {                                                                                    // 10831
		            t +=  f3(br,cr,dr) + hr[2];                                                                              // 10832
	                } else if (i<64) {                                                                                    // 10833
		            t +=  f2(br,cr,dr) + hr[3];                                                                              // 10834
	                } else {// if (i<80) {                                                                                // 10835
		            t +=  f1(br,cr,dr) + hr[4];                                                                              // 10836
	                }                                                                                                     // 10837
	                t = t|0;                                                                                              // 10838
	                t =  rotl(t,sr[i]) ;                                                                                  // 10839
	                t = (t+er)|0;                                                                                         // 10840
	                ar = er;                                                                                              // 10841
	                er = dr;                                                                                              // 10842
	                dr = rotl(cr, 10);                                                                                    // 10843
	                cr = br;                                                                                              // 10844
	                br = t;                                                                                               // 10845
	            }                                                                                                         // 10846
	            // Intermediate hash value                                                                                // 10847
	            t    = (H[1] + cl + dr)|0;                                                                                // 10848
	            H[1] = (H[2] + dl + er)|0;                                                                                // 10849
	            H[2] = (H[3] + el + ar)|0;                                                                                // 10850
	            H[3] = (H[4] + al + br)|0;                                                                                // 10851
	            H[4] = (H[0] + bl + cr)|0;                                                                                // 10852
	            H[0] =  t;                                                                                                // 10853
	        },                                                                                                            // 10854
                                                                                                                       // 10855
	        _doFinalize: function () {                                                                                    // 10856
	            // Shortcuts                                                                                              // 10857
	            var data = this._data;                                                                                    // 10858
	            var dataWords = data.words;                                                                               // 10859
                                                                                                                       // 10860
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10861
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10862
                                                                                                                       // 10863
	            // Add padding                                                                                            // 10864
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10865
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 10866
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 10867
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 10868
	            );                                                                                                        // 10869
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 10870
                                                                                                                       // 10871
	            // Hash final blocks                                                                                      // 10872
	            this._process();                                                                                          // 10873
                                                                                                                       // 10874
	            // Shortcuts                                                                                              // 10875
	            var hash = this._hash;                                                                                    // 10876
	            var H = hash.words;                                                                                       // 10877
                                                                                                                       // 10878
	            // Swap endian                                                                                            // 10879
	            for (var i = 0; i < 5; i++) {                                                                             // 10880
	                // Shortcut                                                                                           // 10881
	                var H_i = H[i];                                                                                       // 10882
                                                                                                                       // 10883
	                // Swap                                                                                               // 10884
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 10885
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 10886
	            }                                                                                                         // 10887
                                                                                                                       // 10888
	            // Return final computed hash                                                                             // 10889
	            return hash;                                                                                              // 10890
	        },                                                                                                            // 10891
                                                                                                                       // 10892
	        clone: function () {                                                                                          // 10893
	            var clone = Hasher.clone.call(this);                                                                      // 10894
	            clone._hash = this._hash.clone();                                                                         // 10895
                                                                                                                       // 10896
	            return clone;                                                                                             // 10897
	        }                                                                                                             // 10898
	    });                                                                                                               // 10899
                                                                                                                       // 10900
                                                                                                                       // 10901
	    function f1(x, y, z) {                                                                                            // 10902
	        return ((x) ^ (y) ^ (z));                                                                                     // 10903
                                                                                                                       // 10904
	    }                                                                                                                 // 10905
                                                                                                                       // 10906
	    function f2(x, y, z) {                                                                                            // 10907
	        return (((x)&(y)) | ((~x)&(z)));                                                                              // 10908
	    }                                                                                                                 // 10909
                                                                                                                       // 10910
	    function f3(x, y, z) {                                                                                            // 10911
	        return (((x) | (~(y))) ^ (z));                                                                                // 10912
	    }                                                                                                                 // 10913
                                                                                                                       // 10914
	    function f4(x, y, z) {                                                                                            // 10915
	        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 10916
	    }                                                                                                                 // 10917
                                                                                                                       // 10918
	    function f5(x, y, z) {                                                                                            // 10919
	        return ((x) ^ ((y) |(~(z))));                                                                                 // 10920
                                                                                                                       // 10921
	    }                                                                                                                 // 10922
                                                                                                                       // 10923
	    function rotl(x,n) {                                                                                              // 10924
	        return (x<<n) | (x>>>(32-n));                                                                                 // 10925
	    }                                                                                                                 // 10926
                                                                                                                       // 10927
                                                                                                                       // 10928
	    /**                                                                                                               // 10929
	     * Shortcut function to the hasher's object interface.                                                            // 10930
	     *                                                                                                                // 10931
	     * @param {WordArray|string} message The message to hash.                                                         // 10932
	     *                                                                                                                // 10933
	     * @return {WordArray} The hash.                                                                                  // 10934
	     *                                                                                                                // 10935
	     * @static                                                                                                        // 10936
	     *                                                                                                                // 10937
	     * @example                                                                                                       // 10938
	     *                                                                                                                // 10939
	     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 10940
	     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 10941
	     */                                                                                                               // 10942
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 10943
                                                                                                                       // 10944
	    /**                                                                                                               // 10945
	     * Shortcut function to the HMAC's object interface.                                                              // 10946
	     *                                                                                                                // 10947
	     * @param {WordArray|string} message The message to hash.                                                         // 10948
	     * @param {WordArray|string} key The secret key.                                                                  // 10949
	     *                                                                                                                // 10950
	     * @return {WordArray} The HMAC.                                                                                  // 10951
	     *                                                                                                                // 10952
	     * @static                                                                                                        // 10953
	     *                                                                                                                // 10954
	     * @example                                                                                                       // 10955
	     *                                                                                                                // 10956
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 10957
	     */                                                                                                               // 10958
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 10959
	}(Math));                                                                                                             // 10960
                                                                                                                       // 10961
                                                                                                                       // 10962
	return CryptoJS.RIPEMD160;                                                                                            // 10963
                                                                                                                       // 10964
}));                                                                                                                   // 10965
},{"./core":53}],77:[function(require,module,exports){                                                                 // 10966
;(function (root, factory) {                                                                                           // 10967
	if (typeof exports === "object") {                                                                                    // 10968
		// CommonJS                                                                                                          // 10969
		module.exports = exports = factory(require("./core"));                                                               // 10970
	}                                                                                                                     // 10971
	else if (typeof define === "function" && define.amd) {                                                                // 10972
		// AMD                                                                                                               // 10973
		define(["./core"], factory);                                                                                         // 10974
	}                                                                                                                     // 10975
	else {                                                                                                                // 10976
		// Global (browser)                                                                                                  // 10977
		factory(root.CryptoJS);                                                                                              // 10978
	}                                                                                                                     // 10979
}(this, function (CryptoJS) {                                                                                          // 10980
                                                                                                                       // 10981
	(function () {                                                                                                        // 10982
	    // Shortcuts                                                                                                      // 10983
	    var C = CryptoJS;                                                                                                 // 10984
	    var C_lib = C.lib;                                                                                                // 10985
	    var WordArray = C_lib.WordArray;                                                                                  // 10986
	    var Hasher = C_lib.Hasher;                                                                                        // 10987
	    var C_algo = C.algo;                                                                                              // 10988
                                                                                                                       // 10989
	    // Reusable object                                                                                                // 10990
	    var W = [];                                                                                                       // 10991
                                                                                                                       // 10992
	    /**                                                                                                               // 10993
	     * SHA-1 hash algorithm.                                                                                          // 10994
	     */                                                                                                               // 10995
	    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 10996
	        _doReset: function () {                                                                                       // 10997
	            this._hash = new WordArray.init([                                                                         // 10998
	                0x67452301, 0xefcdab89,                                                                               // 10999
	                0x98badcfe, 0x10325476,                                                                               // 11000
	                0xc3d2e1f0                                                                                            // 11001
	            ]);                                                                                                       // 11002
	        },                                                                                                            // 11003
                                                                                                                       // 11004
	        _doProcessBlock: function (M, offset) {                                                                       // 11005
	            // Shortcut                                                                                               // 11006
	            var H = this._hash.words;                                                                                 // 11007
                                                                                                                       // 11008
	            // Working variables                                                                                      // 11009
	            var a = H[0];                                                                                             // 11010
	            var b = H[1];                                                                                             // 11011
	            var c = H[2];                                                                                             // 11012
	            var d = H[3];                                                                                             // 11013
	            var e = H[4];                                                                                             // 11014
                                                                                                                       // 11015
	            // Computation                                                                                            // 11016
	            for (var i = 0; i < 80; i++) {                                                                            // 11017
	                if (i < 16) {                                                                                         // 11018
	                    W[i] = M[offset + i] | 0;                                                                         // 11019
	                } else {                                                                                              // 11020
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 11021
	                    W[i] = (n << 1) | (n >>> 31);                                                                     // 11022
	                }                                                                                                     // 11023
                                                                                                                       // 11024
	                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 11025
	                if (i < 20) {                                                                                         // 11026
	                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 11027
	                } else if (i < 40) {                                                                                  // 11028
	                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 11029
	                } else if (i < 60) {                                                                                  // 11030
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 11031
	                } else /* if (i < 80) */ {                                                                            // 11032
	                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 11033
	                }                                                                                                     // 11034
                                                                                                                       // 11035
	                e = d;                                                                                                // 11036
	                d = c;                                                                                                // 11037
	                c = (b << 30) | (b >>> 2);                                                                            // 11038
	                b = a;                                                                                                // 11039
	                a = t;                                                                                                // 11040
	            }                                                                                                         // 11041
                                                                                                                       // 11042
	            // Intermediate hash value                                                                                // 11043
	            H[0] = (H[0] + a) | 0;                                                                                    // 11044
	            H[1] = (H[1] + b) | 0;                                                                                    // 11045
	            H[2] = (H[2] + c) | 0;                                                                                    // 11046
	            H[3] = (H[3] + d) | 0;                                                                                    // 11047
	            H[4] = (H[4] + e) | 0;                                                                                    // 11048
	        },                                                                                                            // 11049
                                                                                                                       // 11050
	        _doFinalize: function () {                                                                                    // 11051
	            // Shortcuts                                                                                              // 11052
	            var data = this._data;                                                                                    // 11053
	            var dataWords = data.words;                                                                               // 11054
                                                                                                                       // 11055
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11056
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11057
                                                                                                                       // 11058
	            // Add padding                                                                                            // 11059
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11060
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 11061
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 11062
	            data.sigBytes = dataWords.length * 4;                                                                     // 11063
                                                                                                                       // 11064
	            // Hash final blocks                                                                                      // 11065
	            this._process();                                                                                          // 11066
                                                                                                                       // 11067
	            // Return final computed hash                                                                             // 11068
	            return this._hash;                                                                                        // 11069
	        },                                                                                                            // 11070
                                                                                                                       // 11071
	        clone: function () {                                                                                          // 11072
	            var clone = Hasher.clone.call(this);                                                                      // 11073
	            clone._hash = this._hash.clone();                                                                         // 11074
                                                                                                                       // 11075
	            return clone;                                                                                             // 11076
	        }                                                                                                             // 11077
	    });                                                                                                               // 11078
                                                                                                                       // 11079
	    /**                                                                                                               // 11080
	     * Shortcut function to the hasher's object interface.                                                            // 11081
	     *                                                                                                                // 11082
	     * @param {WordArray|string} message The message to hash.                                                         // 11083
	     *                                                                                                                // 11084
	     * @return {WordArray} The hash.                                                                                  // 11085
	     *                                                                                                                // 11086
	     * @static                                                                                                        // 11087
	     *                                                                                                                // 11088
	     * @example                                                                                                       // 11089
	     *                                                                                                                // 11090
	     *     var hash = CryptoJS.SHA1('message');                                                                       // 11091
	     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 11092
	     */                                                                                                               // 11093
	    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 11094
                                                                                                                       // 11095
	    /**                                                                                                               // 11096
	     * Shortcut function to the HMAC's object interface.                                                              // 11097
	     *                                                                                                                // 11098
	     * @param {WordArray|string} message The message to hash.                                                         // 11099
	     * @param {WordArray|string} key The secret key.                                                                  // 11100
	     *                                                                                                                // 11101
	     * @return {WordArray} The HMAC.                                                                                  // 11102
	     *                                                                                                                // 11103
	     * @static                                                                                                        // 11104
	     *                                                                                                                // 11105
	     * @example                                                                                                       // 11106
	     *                                                                                                                // 11107
	     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 11108
	     */                                                                                                               // 11109
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 11110
	}());                                                                                                                 // 11111
                                                                                                                       // 11112
                                                                                                                       // 11113
	return CryptoJS.SHA1;                                                                                                 // 11114
                                                                                                                       // 11115
}));                                                                                                                   // 11116
},{"./core":53}],78:[function(require,module,exports){                                                                 // 11117
;(function (root, factory, undef) {                                                                                    // 11118
	if (typeof exports === "object") {                                                                                    // 11119
		// CommonJS                                                                                                          // 11120
		module.exports = exports = factory(require("./core"), require("./sha256"));                                          // 11121
	}                                                                                                                     // 11122
	else if (typeof define === "function" && define.amd) {                                                                // 11123
		// AMD                                                                                                               // 11124
		define(["./core", "./sha256"], factory);                                                                             // 11125
	}                                                                                                                     // 11126
	else {                                                                                                                // 11127
		// Global (browser)                                                                                                  // 11128
		factory(root.CryptoJS);                                                                                              // 11129
	}                                                                                                                     // 11130
}(this, function (CryptoJS) {                                                                                          // 11131
                                                                                                                       // 11132
	(function () {                                                                                                        // 11133
	    // Shortcuts                                                                                                      // 11134
	    var C = CryptoJS;                                                                                                 // 11135
	    var C_lib = C.lib;                                                                                                // 11136
	    var WordArray = C_lib.WordArray;                                                                                  // 11137
	    var C_algo = C.algo;                                                                                              // 11138
	    var SHA256 = C_algo.SHA256;                                                                                       // 11139
                                                                                                                       // 11140
	    /**                                                                                                               // 11141
	     * SHA-224 hash algorithm.                                                                                        // 11142
	     */                                                                                                               // 11143
	    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 11144
	        _doReset: function () {                                                                                       // 11145
	            this._hash = new WordArray.init([                                                                         // 11146
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 11147
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 11148
	            ]);                                                                                                       // 11149
	        },                                                                                                            // 11150
                                                                                                                       // 11151
	        _doFinalize: function () {                                                                                    // 11152
	            var hash = SHA256._doFinalize.call(this);                                                                 // 11153
                                                                                                                       // 11154
	            hash.sigBytes -= 4;                                                                                       // 11155
                                                                                                                       // 11156
	            return hash;                                                                                              // 11157
	        }                                                                                                             // 11158
	    });                                                                                                               // 11159
                                                                                                                       // 11160
	    /**                                                                                                               // 11161
	     * Shortcut function to the hasher's object interface.                                                            // 11162
	     *                                                                                                                // 11163
	     * @param {WordArray|string} message The message to hash.                                                         // 11164
	     *                                                                                                                // 11165
	     * @return {WordArray} The hash.                                                                                  // 11166
	     *                                                                                                                // 11167
	     * @static                                                                                                        // 11168
	     *                                                                                                                // 11169
	     * @example                                                                                                       // 11170
	     *                                                                                                                // 11171
	     *     var hash = CryptoJS.SHA224('message');                                                                     // 11172
	     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 11173
	     */                                                                                                               // 11174
	    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 11175
                                                                                                                       // 11176
	    /**                                                                                                               // 11177
	     * Shortcut function to the HMAC's object interface.                                                              // 11178
	     *                                                                                                                // 11179
	     * @param {WordArray|string} message The message to hash.                                                         // 11180
	     * @param {WordArray|string} key The secret key.                                                                  // 11181
	     *                                                                                                                // 11182
	     * @return {WordArray} The HMAC.                                                                                  // 11183
	     *                                                                                                                // 11184
	     * @static                                                                                                        // 11185
	     *                                                                                                                // 11186
	     * @example                                                                                                       // 11187
	     *                                                                                                                // 11188
	     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 11189
	     */                                                                                                               // 11190
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 11191
	}());                                                                                                                 // 11192
                                                                                                                       // 11193
                                                                                                                       // 11194
	return CryptoJS.SHA224;                                                                                               // 11195
                                                                                                                       // 11196
}));                                                                                                                   // 11197
},{"./core":53,"./sha256":79}],79:[function(require,module,exports){                                                   // 11198
;(function (root, factory) {                                                                                           // 11199
	if (typeof exports === "object") {                                                                                    // 11200
		// CommonJS                                                                                                          // 11201
		module.exports = exports = factory(require("./core"));                                                               // 11202
	}                                                                                                                     // 11203
	else if (typeof define === "function" && define.amd) {                                                                // 11204
		// AMD                                                                                                               // 11205
		define(["./core"], factory);                                                                                         // 11206
	}                                                                                                                     // 11207
	else {                                                                                                                // 11208
		// Global (browser)                                                                                                  // 11209
		factory(root.CryptoJS);                                                                                              // 11210
	}                                                                                                                     // 11211
}(this, function (CryptoJS) {                                                                                          // 11212
                                                                                                                       // 11213
	(function (Math) {                                                                                                    // 11214
	    // Shortcuts                                                                                                      // 11215
	    var C = CryptoJS;                                                                                                 // 11216
	    var C_lib = C.lib;                                                                                                // 11217
	    var WordArray = C_lib.WordArray;                                                                                  // 11218
	    var Hasher = C_lib.Hasher;                                                                                        // 11219
	    var C_algo = C.algo;                                                                                              // 11220
                                                                                                                       // 11221
	    // Initialization and round constants tables                                                                      // 11222
	    var H = [];                                                                                                       // 11223
	    var K = [];                                                                                                       // 11224
                                                                                                                       // 11225
	    // Compute constants                                                                                              // 11226
	    (function () {                                                                                                    // 11227
	        function isPrime(n) {                                                                                         // 11228
	            var sqrtN = Math.sqrt(n);                                                                                 // 11229
	            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 11230
	                if (!(n % factor)) {                                                                                  // 11231
	                    return false;                                                                                     // 11232
	                }                                                                                                     // 11233
	            }                                                                                                         // 11234
                                                                                                                       // 11235
	            return true;                                                                                              // 11236
	        }                                                                                                             // 11237
                                                                                                                       // 11238
	        function getFractionalBits(n) {                                                                               // 11239
	            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 11240
	        }                                                                                                             // 11241
                                                                                                                       // 11242
	        var n = 2;                                                                                                    // 11243
	        var nPrime = 0;                                                                                               // 11244
	        while (nPrime < 64) {                                                                                         // 11245
	            if (isPrime(n)) {                                                                                         // 11246
	                if (nPrime < 8) {                                                                                     // 11247
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 11248
	                }                                                                                                     // 11249
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 11250
                                                                                                                       // 11251
	                nPrime++;                                                                                             // 11252
	            }                                                                                                         // 11253
                                                                                                                       // 11254
	            n++;                                                                                                      // 11255
	        }                                                                                                             // 11256
	    }());                                                                                                             // 11257
                                                                                                                       // 11258
	    // Reusable object                                                                                                // 11259
	    var W = [];                                                                                                       // 11260
                                                                                                                       // 11261
	    /**                                                                                                               // 11262
	     * SHA-256 hash algorithm.                                                                                        // 11263
	     */                                                                                                               // 11264
	    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 11265
	        _doReset: function () {                                                                                       // 11266
	            this._hash = new WordArray.init(H.slice(0));                                                              // 11267
	        },                                                                                                            // 11268
                                                                                                                       // 11269
	        _doProcessBlock: function (M, offset) {                                                                       // 11270
	            // Shortcut                                                                                               // 11271
	            var H = this._hash.words;                                                                                 // 11272
                                                                                                                       // 11273
	            // Working variables                                                                                      // 11274
	            var a = H[0];                                                                                             // 11275
	            var b = H[1];                                                                                             // 11276
	            var c = H[2];                                                                                             // 11277
	            var d = H[3];                                                                                             // 11278
	            var e = H[4];                                                                                             // 11279
	            var f = H[5];                                                                                             // 11280
	            var g = H[6];                                                                                             // 11281
	            var h = H[7];                                                                                             // 11282
                                                                                                                       // 11283
	            // Computation                                                                                            // 11284
	            for (var i = 0; i < 64; i++) {                                                                            // 11285
	                if (i < 16) {                                                                                         // 11286
	                    W[i] = M[offset + i] | 0;                                                                         // 11287
	                } else {                                                                                              // 11288
	                    var gamma0x = W[i - 15];                                                                          // 11289
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 11290
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 11291
	                                   (gamma0x >>> 3);                                                                   // 11292
                                                                                                                       // 11293
	                    var gamma1x = W[i - 2];                                                                           // 11294
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 11295
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 11296
	                                   (gamma1x >>> 10);                                                                  // 11297
                                                                                                                       // 11298
	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 11299
	                }                                                                                                     // 11300
                                                                                                                       // 11301
	                var ch  = (e & f) ^ (~e & g);                                                                         // 11302
	                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 11303
                                                                                                                       // 11304
	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 11305
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 11306
                                                                                                                       // 11307
	                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 11308
	                var t2 = sigma0 + maj;                                                                                // 11309
                                                                                                                       // 11310
	                h = g;                                                                                                // 11311
	                g = f;                                                                                                // 11312
	                f = e;                                                                                                // 11313
	                e = (d + t1) | 0;                                                                                     // 11314
	                d = c;                                                                                                // 11315
	                c = b;                                                                                                // 11316
	                b = a;                                                                                                // 11317
	                a = (t1 + t2) | 0;                                                                                    // 11318
	            }                                                                                                         // 11319
                                                                                                                       // 11320
	            // Intermediate hash value                                                                                // 11321
	            H[0] = (H[0] + a) | 0;                                                                                    // 11322
	            H[1] = (H[1] + b) | 0;                                                                                    // 11323
	            H[2] = (H[2] + c) | 0;                                                                                    // 11324
	            H[3] = (H[3] + d) | 0;                                                                                    // 11325
	            H[4] = (H[4] + e) | 0;                                                                                    // 11326
	            H[5] = (H[5] + f) | 0;                                                                                    // 11327
	            H[6] = (H[6] + g) | 0;                                                                                    // 11328
	            H[7] = (H[7] + h) | 0;                                                                                    // 11329
	        },                                                                                                            // 11330
                                                                                                                       // 11331
	        _doFinalize: function () {                                                                                    // 11332
	            // Shortcuts                                                                                              // 11333
	            var data = this._data;                                                                                    // 11334
	            var dataWords = data.words;                                                                               // 11335
                                                                                                                       // 11336
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11337
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11338
                                                                                                                       // 11339
	            // Add padding                                                                                            // 11340
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11341
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 11342
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 11343
	            data.sigBytes = dataWords.length * 4;                                                                     // 11344
                                                                                                                       // 11345
	            // Hash final blocks                                                                                      // 11346
	            this._process();                                                                                          // 11347
                                                                                                                       // 11348
	            // Return final computed hash                                                                             // 11349
	            return this._hash;                                                                                        // 11350
	        },                                                                                                            // 11351
                                                                                                                       // 11352
	        clone: function () {                                                                                          // 11353
	            var clone = Hasher.clone.call(this);                                                                      // 11354
	            clone._hash = this._hash.clone();                                                                         // 11355
                                                                                                                       // 11356
	            return clone;                                                                                             // 11357
	        }                                                                                                             // 11358
	    });                                                                                                               // 11359
                                                                                                                       // 11360
	    /**                                                                                                               // 11361
	     * Shortcut function to the hasher's object interface.                                                            // 11362
	     *                                                                                                                // 11363
	     * @param {WordArray|string} message The message to hash.                                                         // 11364
	     *                                                                                                                // 11365
	     * @return {WordArray} The hash.                                                                                  // 11366
	     *                                                                                                                // 11367
	     * @static                                                                                                        // 11368
	     *                                                                                                                // 11369
	     * @example                                                                                                       // 11370
	     *                                                                                                                // 11371
	     *     var hash = CryptoJS.SHA256('message');                                                                     // 11372
	     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 11373
	     */                                                                                                               // 11374
	    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 11375
                                                                                                                       // 11376
	    /**                                                                                                               // 11377
	     * Shortcut function to the HMAC's object interface.                                                              // 11378
	     *                                                                                                                // 11379
	     * @param {WordArray|string} message The message to hash.                                                         // 11380
	     * @param {WordArray|string} key The secret key.                                                                  // 11381
	     *                                                                                                                // 11382
	     * @return {WordArray} The HMAC.                                                                                  // 11383
	     *                                                                                                                // 11384
	     * @static                                                                                                        // 11385
	     *                                                                                                                // 11386
	     * @example                                                                                                       // 11387
	     *                                                                                                                // 11388
	     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 11389
	     */                                                                                                               // 11390
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 11391
	}(Math));                                                                                                             // 11392
                                                                                                                       // 11393
                                                                                                                       // 11394
	return CryptoJS.SHA256;                                                                                               // 11395
                                                                                                                       // 11396
}));                                                                                                                   // 11397
},{"./core":53}],80:[function(require,module,exports){                                                                 // 11398
;(function (root, factory, undef) {                                                                                    // 11399
	if (typeof exports === "object") {                                                                                    // 11400
		// CommonJS                                                                                                          // 11401
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11402
	}                                                                                                                     // 11403
	else if (typeof define === "function" && define.amd) {                                                                // 11404
		// AMD                                                                                                               // 11405
		define(["./core", "./x64-core"], factory);                                                                           // 11406
	}                                                                                                                     // 11407
	else {                                                                                                                // 11408
		// Global (browser)                                                                                                  // 11409
		factory(root.CryptoJS);                                                                                              // 11410
	}                                                                                                                     // 11411
}(this, function (CryptoJS) {                                                                                          // 11412
                                                                                                                       // 11413
	(function (Math) {                                                                                                    // 11414
	    // Shortcuts                                                                                                      // 11415
	    var C = CryptoJS;                                                                                                 // 11416
	    var C_lib = C.lib;                                                                                                // 11417
	    var WordArray = C_lib.WordArray;                                                                                  // 11418
	    var Hasher = C_lib.Hasher;                                                                                        // 11419
	    var C_x64 = C.x64;                                                                                                // 11420
	    var X64Word = C_x64.Word;                                                                                         // 11421
	    var C_algo = C.algo;                                                                                              // 11422
                                                                                                                       // 11423
	    // Constants tables                                                                                               // 11424
	    var RHO_OFFSETS = [];                                                                                             // 11425
	    var PI_INDEXES  = [];                                                                                             // 11426
	    var ROUND_CONSTANTS = [];                                                                                         // 11427
                                                                                                                       // 11428
	    // Compute Constants                                                                                              // 11429
	    (function () {                                                                                                    // 11430
	        // Compute rho offset constants                                                                               // 11431
	        var x = 1, y = 0;                                                                                             // 11432
	        for (var t = 0; t < 24; t++) {                                                                                // 11433
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 11434
                                                                                                                       // 11435
	            var newX = y % 5;                                                                                         // 11436
	            var newY = (2 * x + 3 * y) % 5;                                                                           // 11437
	            x = newX;                                                                                                 // 11438
	            y = newY;                                                                                                 // 11439
	        }                                                                                                             // 11440
                                                                                                                       // 11441
	        // Compute pi index constants                                                                                 // 11442
	        for (var x = 0; x < 5; x++) {                                                                                 // 11443
	            for (var y = 0; y < 5; y++) {                                                                             // 11444
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 11445
	            }                                                                                                         // 11446
	        }                                                                                                             // 11447
                                                                                                                       // 11448
	        // Compute round constants                                                                                    // 11449
	        var LFSR = 0x01;                                                                                              // 11450
	        for (var i = 0; i < 24; i++) {                                                                                // 11451
	            var roundConstantMsw = 0;                                                                                 // 11452
	            var roundConstantLsw = 0;                                                                                 // 11453
                                                                                                                       // 11454
	            for (var j = 0; j < 7; j++) {                                                                             // 11455
	                if (LFSR & 0x01) {                                                                                    // 11456
	                    var bitPosition = (1 << j) - 1;                                                                   // 11457
	                    if (bitPosition < 32) {                                                                           // 11458
	                        roundConstantLsw ^= 1 << bitPosition;                                                         // 11459
	                    } else /* if (bitPosition >= 32) */ {                                                             // 11460
	                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 11461
	                    }                                                                                                 // 11462
	                }                                                                                                     // 11463
                                                                                                                       // 11464
	                // Compute next LFSR                                                                                  // 11465
	                if (LFSR & 0x80) {                                                                                    // 11466
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 11467
	                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 11468
	                } else {                                                                                              // 11469
	                    LFSR <<= 1;                                                                                       // 11470
	                }                                                                                                     // 11471
	            }                                                                                                         // 11472
                                                                                                                       // 11473
	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 11474
	        }                                                                                                             // 11475
	    }());                                                                                                             // 11476
                                                                                                                       // 11477
	    // Reusable objects for temporary values                                                                          // 11478
	    var T = [];                                                                                                       // 11479
	    (function () {                                                                                                    // 11480
	        for (var i = 0; i < 25; i++) {                                                                                // 11481
	            T[i] = X64Word.create();                                                                                  // 11482
	        }                                                                                                             // 11483
	    }());                                                                                                             // 11484
                                                                                                                       // 11485
	    /**                                                                                                               // 11486
	     * SHA-3 hash algorithm.                                                                                          // 11487
	     */                                                                                                               // 11488
	    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 11489
	        /**                                                                                                           // 11490
	         * Configuration options.                                                                                     // 11491
	         *                                                                                                            // 11492
	         * @property {number} outputLength                                                                            // 11493
	         *   The desired number of bits in the output hash.                                                           // 11494
	         *   Only values permitted are: 224, 256, 384, 512.                                                           // 11495
	         *   Default: 512                                                                                             // 11496
	         */                                                                                                           // 11497
	        cfg: Hasher.cfg.extend({                                                                                      // 11498
	            outputLength: 512                                                                                         // 11499
	        }),                                                                                                           // 11500
                                                                                                                       // 11501
	        _doReset: function () {                                                                                       // 11502
	            var state = this._state = []                                                                              // 11503
	            for (var i = 0; i < 25; i++) {                                                                            // 11504
	                state[i] = new X64Word.init();                                                                        // 11505
	            }                                                                                                         // 11506
                                                                                                                       // 11507
	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 11508
	        },                                                                                                            // 11509
                                                                                                                       // 11510
	        _doProcessBlock: function (M, offset) {                                                                       // 11511
	            // Shortcuts                                                                                              // 11512
	            var state = this._state;                                                                                  // 11513
	            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 11514
                                                                                                                       // 11515
	            // Absorb                                                                                                 // 11516
	            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 11517
	                // Shortcuts                                                                                          // 11518
	                var M2i  = M[offset + 2 * i];                                                                         // 11519
	                var M2i1 = M[offset + 2 * i + 1];                                                                     // 11520
                                                                                                                       // 11521
	                // Swap endian                                                                                        // 11522
	                M2i = (                                                                                               // 11523
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 11524
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 11525
	                );                                                                                                    // 11526
	                M2i1 = (                                                                                              // 11527
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 11528
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 11529
	                );                                                                                                    // 11530
                                                                                                                       // 11531
	                // Absorb message into state                                                                          // 11532
	                var lane = state[i];                                                                                  // 11533
	                lane.high ^= M2i1;                                                                                    // 11534
	                lane.low  ^= M2i;                                                                                     // 11535
	            }                                                                                                         // 11536
                                                                                                                       // 11537
	            // Rounds                                                                                                 // 11538
	            for (var round = 0; round < 24; round++) {                                                                // 11539
	                // Theta                                                                                              // 11540
	                for (var x = 0; x < 5; x++) {                                                                         // 11541
	                    // Mix column lanes                                                                               // 11542
	                    var tMsw = 0, tLsw = 0;                                                                           // 11543
	                    for (var y = 0; y < 5; y++) {                                                                     // 11544
	                        var lane = state[x + 5 * y];                                                                  // 11545
	                        tMsw ^= lane.high;                                                                            // 11546
	                        tLsw ^= lane.low;                                                                             // 11547
	                    }                                                                                                 // 11548
                                                                                                                       // 11549
	                    // Temporary values                                                                               // 11550
	                    var Tx = T[x];                                                                                    // 11551
	                    Tx.high = tMsw;                                                                                   // 11552
	                    Tx.low  = tLsw;                                                                                   // 11553
	                }                                                                                                     // 11554
	                for (var x = 0; x < 5; x++) {                                                                         // 11555
	                    // Shortcuts                                                                                      // 11556
	                    var Tx4 = T[(x + 4) % 5];                                                                         // 11557
	                    var Tx1 = T[(x + 1) % 5];                                                                         // 11558
	                    var Tx1Msw = Tx1.high;                                                                            // 11559
	                    var Tx1Lsw = Tx1.low;                                                                             // 11560
                                                                                                                       // 11561
	                    // Mix surrounding columns                                                                        // 11562
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 11563
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 11564
	                    for (var y = 0; y < 5; y++) {                                                                     // 11565
	                        var lane = state[x + 5 * y];                                                                  // 11566
	                        lane.high ^= tMsw;                                                                            // 11567
	                        lane.low  ^= tLsw;                                                                            // 11568
	                    }                                                                                                 // 11569
	                }                                                                                                     // 11570
                                                                                                                       // 11571
	                // Rho Pi                                                                                             // 11572
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 11573
	                    // Shortcuts                                                                                      // 11574
	                    var lane = state[laneIndex];                                                                      // 11575
	                    var laneMsw = lane.high;                                                                          // 11576
	                    var laneLsw = lane.low;                                                                           // 11577
	                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 11578
                                                                                                                       // 11579
	                    // Rotate lanes                                                                                   // 11580
	                    if (rhoOffset < 32) {                                                                             // 11581
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 11582
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 11583
	                    } else /* if (rhoOffset >= 32) */ {                                                               // 11584
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 11585
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 11586
	                    }                                                                                                 // 11587
                                                                                                                       // 11588
	                    // Transpose lanes                                                                                // 11589
	                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 11590
	                    TPiLane.high = tMsw;                                                                              // 11591
	                    TPiLane.low  = tLsw;                                                                              // 11592
	                }                                                                                                     // 11593
                                                                                                                       // 11594
	                // Rho pi at x = y = 0                                                                                // 11595
	                var T0 = T[0];                                                                                        // 11596
	                var state0 = state[0];                                                                                // 11597
	                T0.high = state0.high;                                                                                // 11598
	                T0.low  = state0.low;                                                                                 // 11599
                                                                                                                       // 11600
	                // Chi                                                                                                // 11601
	                for (var x = 0; x < 5; x++) {                                                                         // 11602
	                    for (var y = 0; y < 5; y++) {                                                                     // 11603
	                        // Shortcuts                                                                                  // 11604
	                        var laneIndex = x + 5 * y;                                                                    // 11605
	                        var lane = state[laneIndex];                                                                  // 11606
	                        var TLane = T[laneIndex];                                                                     // 11607
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 11608
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 11609
                                                                                                                       // 11610
	                        // Mix rows                                                                                   // 11611
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 11612
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 11613
	                    }                                                                                                 // 11614
	                }                                                                                                     // 11615
                                                                                                                       // 11616
	                // Iota                                                                                               // 11617
	                var lane = state[0];                                                                                  // 11618
	                var roundConstant = ROUND_CONSTANTS[round];                                                           // 11619
	                lane.high ^= roundConstant.high;                                                                      // 11620
	                lane.low  ^= roundConstant.low;;                                                                      // 11621
	            }                                                                                                         // 11622
	        },                                                                                                            // 11623
                                                                                                                       // 11624
	        _doFinalize: function () {                                                                                    // 11625
	            // Shortcuts                                                                                              // 11626
	            var data = this._data;                                                                                    // 11627
	            var dataWords = data.words;                                                                               // 11628
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11629
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11630
	            var blockSizeBits = this.blockSize * 32;                                                                  // 11631
                                                                                                                       // 11632
	            // Add padding                                                                                            // 11633
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 11634
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 11635
	            data.sigBytes = dataWords.length * 4;                                                                     // 11636
                                                                                                                       // 11637
	            // Hash final blocks                                                                                      // 11638
	            this._process();                                                                                          // 11639
                                                                                                                       // 11640
	            // Shortcuts                                                                                              // 11641
	            var state = this._state;                                                                                  // 11642
	            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 11643
	            var outputLengthLanes = outputLengthBytes / 8;                                                            // 11644
                                                                                                                       // 11645
	            // Squeeze                                                                                                // 11646
	            var hashWords = [];                                                                                       // 11647
	            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 11648
	                // Shortcuts                                                                                          // 11649
	                var lane = state[i];                                                                                  // 11650
	                var laneMsw = lane.high;                                                                              // 11651
	                var laneLsw = lane.low;                                                                               // 11652
                                                                                                                       // 11653
	                // Swap endian                                                                                        // 11654
	                laneMsw = (                                                                                           // 11655
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 11656
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 11657
	                );                                                                                                    // 11658
	                laneLsw = (                                                                                           // 11659
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 11660
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 11661
	                );                                                                                                    // 11662
                                                                                                                       // 11663
	                // Squeeze state to retrieve hash                                                                     // 11664
	                hashWords.push(laneLsw);                                                                              // 11665
	                hashWords.push(laneMsw);                                                                              // 11666
	            }                                                                                                         // 11667
                                                                                                                       // 11668
	            // Return final computed hash                                                                             // 11669
	            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 11670
	        },                                                                                                            // 11671
                                                                                                                       // 11672
	        clone: function () {                                                                                          // 11673
	            var clone = Hasher.clone.call(this);                                                                      // 11674
                                                                                                                       // 11675
	            var state = clone._state = this._state.slice(0);                                                          // 11676
	            for (var i = 0; i < 25; i++) {                                                                            // 11677
	                state[i] = state[i].clone();                                                                          // 11678
	            }                                                                                                         // 11679
                                                                                                                       // 11680
	            return clone;                                                                                             // 11681
	        }                                                                                                             // 11682
	    });                                                                                                               // 11683
                                                                                                                       // 11684
	    /**                                                                                                               // 11685
	     * Shortcut function to the hasher's object interface.                                                            // 11686
	     *                                                                                                                // 11687
	     * @param {WordArray|string} message The message to hash.                                                         // 11688
	     *                                                                                                                // 11689
	     * @return {WordArray} The hash.                                                                                  // 11690
	     *                                                                                                                // 11691
	     * @static                                                                                                        // 11692
	     *                                                                                                                // 11693
	     * @example                                                                                                       // 11694
	     *                                                                                                                // 11695
	     *     var hash = CryptoJS.SHA3('message');                                                                       // 11696
	     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 11697
	     */                                                                                                               // 11698
	    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 11699
                                                                                                                       // 11700
	    /**                                                                                                               // 11701
	     * Shortcut function to the HMAC's object interface.                                                              // 11702
	     *                                                                                                                // 11703
	     * @param {WordArray|string} message The message to hash.                                                         // 11704
	     * @param {WordArray|string} key The secret key.                                                                  // 11705
	     *                                                                                                                // 11706
	     * @return {WordArray} The HMAC.                                                                                  // 11707
	     *                                                                                                                // 11708
	     * @static                                                                                                        // 11709
	     *                                                                                                                // 11710
	     * @example                                                                                                       // 11711
	     *                                                                                                                // 11712
	     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 11713
	     */                                                                                                               // 11714
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 11715
	}(Math));                                                                                                             // 11716
                                                                                                                       // 11717
                                                                                                                       // 11718
	return CryptoJS.SHA3;                                                                                                 // 11719
                                                                                                                       // 11720
}));                                                                                                                   // 11721
},{"./core":53,"./x64-core":84}],81:[function(require,module,exports){                                                 // 11722
;(function (root, factory, undef) {                                                                                    // 11723
	if (typeof exports === "object") {                                                                                    // 11724
		// CommonJS                                                                                                          // 11725
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));                   // 11726
	}                                                                                                                     // 11727
	else if (typeof define === "function" && define.amd) {                                                                // 11728
		// AMD                                                                                                               // 11729
		define(["./core", "./x64-core", "./sha512"], factory);                                                               // 11730
	}                                                                                                                     // 11731
	else {                                                                                                                // 11732
		// Global (browser)                                                                                                  // 11733
		factory(root.CryptoJS);                                                                                              // 11734
	}                                                                                                                     // 11735
}(this, function (CryptoJS) {                                                                                          // 11736
                                                                                                                       // 11737
	(function () {                                                                                                        // 11738
	    // Shortcuts                                                                                                      // 11739
	    var C = CryptoJS;                                                                                                 // 11740
	    var C_x64 = C.x64;                                                                                                // 11741
	    var X64Word = C_x64.Word;                                                                                         // 11742
	    var X64WordArray = C_x64.WordArray;                                                                               // 11743
	    var C_algo = C.algo;                                                                                              // 11744
	    var SHA512 = C_algo.SHA512;                                                                                       // 11745
                                                                                                                       // 11746
	    /**                                                                                                               // 11747
	     * SHA-384 hash algorithm.                                                                                        // 11748
	     */                                                                                                               // 11749
	    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 11750
	        _doReset: function () {                                                                                       // 11751
	            this._hash = new X64WordArray.init([                                                                      // 11752
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 11753
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 11754
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 11755
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 11756
	            ]);                                                                                                       // 11757
	        },                                                                                                            // 11758
                                                                                                                       // 11759
	        _doFinalize: function () {                                                                                    // 11760
	            var hash = SHA512._doFinalize.call(this);                                                                 // 11761
                                                                                                                       // 11762
	            hash.sigBytes -= 16;                                                                                      // 11763
                                                                                                                       // 11764
	            return hash;                                                                                              // 11765
	        }                                                                                                             // 11766
	    });                                                                                                               // 11767
                                                                                                                       // 11768
	    /**                                                                                                               // 11769
	     * Shortcut function to the hasher's object interface.                                                            // 11770
	     *                                                                                                                // 11771
	     * @param {WordArray|string} message The message to hash.                                                         // 11772
	     *                                                                                                                // 11773
	     * @return {WordArray} The hash.                                                                                  // 11774
	     *                                                                                                                // 11775
	     * @static                                                                                                        // 11776
	     *                                                                                                                // 11777
	     * @example                                                                                                       // 11778
	     *                                                                                                                // 11779
	     *     var hash = CryptoJS.SHA384('message');                                                                     // 11780
	     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 11781
	     */                                                                                                               // 11782
	    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 11783
                                                                                                                       // 11784
	    /**                                                                                                               // 11785
	     * Shortcut function to the HMAC's object interface.                                                              // 11786
	     *                                                                                                                // 11787
	     * @param {WordArray|string} message The message to hash.                                                         // 11788
	     * @param {WordArray|string} key The secret key.                                                                  // 11789
	     *                                                                                                                // 11790
	     * @return {WordArray} The HMAC.                                                                                  // 11791
	     *                                                                                                                // 11792
	     * @static                                                                                                        // 11793
	     *                                                                                                                // 11794
	     * @example                                                                                                       // 11795
	     *                                                                                                                // 11796
	     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 11797
	     */                                                                                                               // 11798
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 11799
	}());                                                                                                                 // 11800
                                                                                                                       // 11801
                                                                                                                       // 11802
	return CryptoJS.SHA384;                                                                                               // 11803
                                                                                                                       // 11804
}));                                                                                                                   // 11805
},{"./core":53,"./sha512":82,"./x64-core":84}],82:[function(require,module,exports){                                   // 11806
;(function (root, factory, undef) {                                                                                    // 11807
	if (typeof exports === "object") {                                                                                    // 11808
		// CommonJS                                                                                                          // 11809
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11810
	}                                                                                                                     // 11811
	else if (typeof define === "function" && define.amd) {                                                                // 11812
		// AMD                                                                                                               // 11813
		define(["./core", "./x64-core"], factory);                                                                           // 11814
	}                                                                                                                     // 11815
	else {                                                                                                                // 11816
		// Global (browser)                                                                                                  // 11817
		factory(root.CryptoJS);                                                                                              // 11818
	}                                                                                                                     // 11819
}(this, function (CryptoJS) {                                                                                          // 11820
                                                                                                                       // 11821
	(function () {                                                                                                        // 11822
	    // Shortcuts                                                                                                      // 11823
	    var C = CryptoJS;                                                                                                 // 11824
	    var C_lib = C.lib;                                                                                                // 11825
	    var Hasher = C_lib.Hasher;                                                                                        // 11826
	    var C_x64 = C.x64;                                                                                                // 11827
	    var X64Word = C_x64.Word;                                                                                         // 11828
	    var X64WordArray = C_x64.WordArray;                                                                               // 11829
	    var C_algo = C.algo;                                                                                              // 11830
                                                                                                                       // 11831
	    function X64Word_create() {                                                                                       // 11832
	        return X64Word.create.apply(X64Word, arguments);                                                              // 11833
	    }                                                                                                                 // 11834
                                                                                                                       // 11835
	    // Constants                                                                                                      // 11836
	    var K = [                                                                                                         // 11837
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 11838
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 11839
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 11840
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 11841
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 11842
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 11843
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 11844
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 11845
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 11846
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 11847
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 11848
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 11849
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 11850
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 11851
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 11852
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 11853
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 11854
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 11855
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 11856
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 11857
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 11858
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 11859
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 11860
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 11861
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 11862
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 11863
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 11864
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 11865
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 11866
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 11867
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 11868
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 11869
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 11870
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 11871
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 11872
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 11873
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 11874
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 11875
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 11876
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 11877
	    ];                                                                                                                // 11878
                                                                                                                       // 11879
	    // Reusable objects                                                                                               // 11880
	    var W = [];                                                                                                       // 11881
	    (function () {                                                                                                    // 11882
	        for (var i = 0; i < 80; i++) {                                                                                // 11883
	            W[i] = X64Word_create();                                                                                  // 11884
	        }                                                                                                             // 11885
	    }());                                                                                                             // 11886
                                                                                                                       // 11887
	    /**                                                                                                               // 11888
	     * SHA-512 hash algorithm.                                                                                        // 11889
	     */                                                                                                               // 11890
	    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 11891
	        _doReset: function () {                                                                                       // 11892
	            this._hash = new X64WordArray.init([                                                                      // 11893
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 11894
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 11895
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 11896
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 11897
	            ]);                                                                                                       // 11898
	        },                                                                                                            // 11899
                                                                                                                       // 11900
	        _doProcessBlock: function (M, offset) {                                                                       // 11901
	            // Shortcuts                                                                                              // 11902
	            var H = this._hash.words;                                                                                 // 11903
                                                                                                                       // 11904
	            var H0 = H[0];                                                                                            // 11905
	            var H1 = H[1];                                                                                            // 11906
	            var H2 = H[2];                                                                                            // 11907
	            var H3 = H[3];                                                                                            // 11908
	            var H4 = H[4];                                                                                            // 11909
	            var H5 = H[5];                                                                                            // 11910
	            var H6 = H[6];                                                                                            // 11911
	            var H7 = H[7];                                                                                            // 11912
                                                                                                                       // 11913
	            var H0h = H0.high;                                                                                        // 11914
	            var H0l = H0.low;                                                                                         // 11915
	            var H1h = H1.high;                                                                                        // 11916
	            var H1l = H1.low;                                                                                         // 11917
	            var H2h = H2.high;                                                                                        // 11918
	            var H2l = H2.low;                                                                                         // 11919
	            var H3h = H3.high;                                                                                        // 11920
	            var H3l = H3.low;                                                                                         // 11921
	            var H4h = H4.high;                                                                                        // 11922
	            var H4l = H4.low;                                                                                         // 11923
	            var H5h = H5.high;                                                                                        // 11924
	            var H5l = H5.low;                                                                                         // 11925
	            var H6h = H6.high;                                                                                        // 11926
	            var H6l = H6.low;                                                                                         // 11927
	            var H7h = H7.high;                                                                                        // 11928
	            var H7l = H7.low;                                                                                         // 11929
                                                                                                                       // 11930
	            // Working variables                                                                                      // 11931
	            var ah = H0h;                                                                                             // 11932
	            var al = H0l;                                                                                             // 11933
	            var bh = H1h;                                                                                             // 11934
	            var bl = H1l;                                                                                             // 11935
	            var ch = H2h;                                                                                             // 11936
	            var cl = H2l;                                                                                             // 11937
	            var dh = H3h;                                                                                             // 11938
	            var dl = H3l;                                                                                             // 11939
	            var eh = H4h;                                                                                             // 11940
	            var el = H4l;                                                                                             // 11941
	            var fh = H5h;                                                                                             // 11942
	            var fl = H5l;                                                                                             // 11943
	            var gh = H6h;                                                                                             // 11944
	            var gl = H6l;                                                                                             // 11945
	            var hh = H7h;                                                                                             // 11946
	            var hl = H7l;                                                                                             // 11947
                                                                                                                       // 11948
	            // Rounds                                                                                                 // 11949
	            for (var i = 0; i < 80; i++) {                                                                            // 11950
	                // Shortcut                                                                                           // 11951
	                var Wi = W[i];                                                                                        // 11952
                                                                                                                       // 11953
	                // Extend message                                                                                     // 11954
	                if (i < 16) {                                                                                         // 11955
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 11956
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 11957
	                } else {                                                                                              // 11958
	                    // Gamma0                                                                                         // 11959
	                    var gamma0x  = W[i - 15];                                                                         // 11960
	                    var gamma0xh = gamma0x.high;                                                                      // 11961
	                    var gamma0xl = gamma0x.low;                                                                       // 11962
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                                                                                                                       // 11965
	                    // Gamma1                                                                                         // 11966
	                    var gamma1x  = W[i - 2];                                                                          // 11967
	                    var gamma1xh = gamma1x.high;                                                                      // 11968
	                    var gamma1xl = gamma1x.low;                                                                       // 11969
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                                                                                                                       // 11972
	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 11973
	                    var Wi7  = W[i - 7];                                                                              // 11974
	                    var Wi7h = Wi7.high;                                                                              // 11975
	                    var Wi7l = Wi7.low;                                                                               // 11976
                                                                                                                       // 11977
	                    var Wi16  = W[i - 16];                                                                            // 11978
	                    var Wi16h = Wi16.high;                                                                            // 11979
	                    var Wi16l = Wi16.low;                                                                             // 11980
                                                                                                                       // 11981
	                    var Wil = gamma0l + Wi7l;                                                                         // 11982
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 11983
	                    var Wil = Wil + gamma1l;                                                                          // 11984
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 11985
	                    var Wil = Wil + Wi16l;                                                                            // 11986
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 11987
                                                                                                                       // 11988
	                    Wi.high = Wih;                                                                                    // 11989
	                    Wi.low  = Wil;                                                                                    // 11990
	                }                                                                                                     // 11991
                                                                                                                       // 11992
	                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 11993
	                var chl  = (el & fl) ^ (~el & gl);                                                                    // 11994
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 11995
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 11996
                                                                                                                       // 11997
	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 11998
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 11999
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 12000
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 12001
                                                                                                                       // 12002
	                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 12003
	                var Ki  = K[i];                                                                                       // 12004
	                var Kih = Ki.high;                                                                                    // 12005
	                var Kil = Ki.low;                                                                                     // 12006
                                                                                                                       // 12007
	                var t1l = hl + sigma1l;                                                                               // 12008
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 12009
	                var t1l = t1l + chl;                                                                                  // 12010
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 12011
	                var t1l = t1l + Kil;                                                                                  // 12012
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 12013
	                var t1l = t1l + Wil;                                                                                  // 12014
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 12015
                                                                                                                       // 12016
	                // t2 = sigma0 + maj                                                                                  // 12017
	                var t2l = sigma0l + majl;                                                                             // 12018
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 12019
                                                                                                                       // 12020
	                // Update working variables                                                                           // 12021
	                hh = gh;                                                                                              // 12022
	                hl = gl;                                                                                              // 12023
	                gh = fh;                                                                                              // 12024
	                gl = fl;                                                                                              // 12025
	                fh = eh;                                                                                              // 12026
	                fl = el;                                                                                              // 12027
	                el = (dl + t1l) | 0;                                                                                  // 12028
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 12029
	                dh = ch;                                                                                              // 12030
	                dl = cl;                                                                                              // 12031
	                ch = bh;                                                                                              // 12032
	                cl = bl;                                                                                              // 12033
	                bh = ah;                                                                                              // 12034
	                bl = al;                                                                                              // 12035
	                al = (t1l + t2l) | 0;                                                                                 // 12036
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 12037
	            }                                                                                                         // 12038
                                                                                                                       // 12039
	            // Intermediate hash value                                                                                // 12040
	            H0l = H0.low  = (H0l + al);                                                                               // 12041
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 12042
	            H1l = H1.low  = (H1l + bl);                                                                               // 12043
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 12044
	            H2l = H2.low  = (H2l + cl);                                                                               // 12045
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 12046
	            H3l = H3.low  = (H3l + dl);                                                                               // 12047
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 12048
	            H4l = H4.low  = (H4l + el);                                                                               // 12049
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 12050
	            H5l = H5.low  = (H5l + fl);                                                                               // 12051
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 12052
	            H6l = H6.low  = (H6l + gl);                                                                               // 12053
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 12054
	            H7l = H7.low  = (H7l + hl);                                                                               // 12055
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 12056
	        },                                                                                                            // 12057
                                                                                                                       // 12058
	        _doFinalize: function () {                                                                                    // 12059
	            // Shortcuts                                                                                              // 12060
	            var data = this._data;                                                                                    // 12061
	            var dataWords = data.words;                                                                               // 12062
                                                                                                                       // 12063
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 12064
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 12065
                                                                                                                       // 12066
	            // Add padding                                                                                            // 12067
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 12068
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 12069
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 12070
	            data.sigBytes = dataWords.length * 4;                                                                     // 12071
                                                                                                                       // 12072
	            // Hash final blocks                                                                                      // 12073
	            this._process();                                                                                          // 12074
                                                                                                                       // 12075
	            // Convert hash to 32-bit word array before returning                                                     // 12076
	            var hash = this._hash.toX32();                                                                            // 12077
                                                                                                                       // 12078
	            // Return final computed hash                                                                             // 12079
	            return hash;                                                                                              // 12080
	        },                                                                                                            // 12081
                                                                                                                       // 12082
	        clone: function () {                                                                                          // 12083
	            var clone = Hasher.clone.call(this);                                                                      // 12084
	            clone._hash = this._hash.clone();                                                                         // 12085
                                                                                                                       // 12086
	            return clone;                                                                                             // 12087
	        },                                                                                                            // 12088
                                                                                                                       // 12089
	        blockSize: 1024/32                                                                                            // 12090
	    });                                                                                                               // 12091
                                                                                                                       // 12092
	    /**                                                                                                               // 12093
	     * Shortcut function to the hasher's object interface.                                                            // 12094
	     *                                                                                                                // 12095
	     * @param {WordArray|string} message The message to hash.                                                         // 12096
	     *                                                                                                                // 12097
	     * @return {WordArray} The hash.                                                                                  // 12098
	     *                                                                                                                // 12099
	     * @static                                                                                                        // 12100
	     *                                                                                                                // 12101
	     * @example                                                                                                       // 12102
	     *                                                                                                                // 12103
	     *     var hash = CryptoJS.SHA512('message');                                                                     // 12104
	     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 12105
	     */                                                                                                               // 12106
	    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 12107
                                                                                                                       // 12108
	    /**                                                                                                               // 12109
	     * Shortcut function to the HMAC's object interface.                                                              // 12110
	     *                                                                                                                // 12111
	     * @param {WordArray|string} message The message to hash.                                                         // 12112
	     * @param {WordArray|string} key The secret key.                                                                  // 12113
	     *                                                                                                                // 12114
	     * @return {WordArray} The HMAC.                                                                                  // 12115
	     *                                                                                                                // 12116
	     * @static                                                                                                        // 12117
	     *                                                                                                                // 12118
	     * @example                                                                                                       // 12119
	     *                                                                                                                // 12120
	     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 12121
	     */                                                                                                               // 12122
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 12123
	}());                                                                                                                 // 12124
                                                                                                                       // 12125
                                                                                                                       // 12126
	return CryptoJS.SHA512;                                                                                               // 12127
                                                                                                                       // 12128
}));                                                                                                                   // 12129
},{"./core":53,"./x64-core":84}],83:[function(require,module,exports){                                                 // 12130
;(function (root, factory, undef) {                                                                                    // 12131
	if (typeof exports === "object") {                                                                                    // 12132
		// CommonJS                                                                                                          // 12133
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 12135
	else if (typeof define === "function" && define.amd) {                                                                // 12136
		// AMD                                                                                                               // 12137
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 12138
	}                                                                                                                     // 12139
	else {                                                                                                                // 12140
		// Global (browser)                                                                                                  // 12141
		factory(root.CryptoJS);                                                                                              // 12142
	}                                                                                                                     // 12143
}(this, function (CryptoJS) {                                                                                          // 12144
                                                                                                                       // 12145
	(function () {                                                                                                        // 12146
	    // Shortcuts                                                                                                      // 12147
	    var C = CryptoJS;                                                                                                 // 12148
	    var C_lib = C.lib;                                                                                                // 12149
	    var WordArray = C_lib.WordArray;                                                                                  // 12150
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 12151
	    var C_algo = C.algo;                                                                                              // 12152
                                                                                                                       // 12153
	    // Permuted Choice 1 constants                                                                                    // 12154
	    var PC1 = [                                                                                                       // 12155
	        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 12156
	        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 12157
	        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 12158
	        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 12159
	        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 12160
	        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 12161
	        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 12162
	    ];                                                                                                                // 12163
                                                                                                                       // 12164
	    // Permuted Choice 2 constants                                                                                    // 12165
	    var PC2 = [                                                                                                       // 12166
	        14, 17, 11, 24, 1,  5,                                                                                        // 12167
	        3,  28, 15, 6,  21, 10,                                                                                       // 12168
	        23, 19, 12, 4,  26, 8,                                                                                        // 12169
	        16, 7,  27, 20, 13, 2,                                                                                        // 12170
	        41, 52, 31, 37, 47, 55,                                                                                       // 12171
	        30, 40, 51, 45, 33, 48,                                                                                       // 12172
	        44, 49, 39, 56, 34, 53,                                                                                       // 12173
	        46, 42, 50, 36, 29, 32                                                                                        // 12174
	    ];                                                                                                                // 12175
                                                                                                                       // 12176
	    // Cumulative bit shift constants                                                                                 // 12177
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 12178
                                                                                                                       // 12179
	    // SBOXes and round permutation constants                                                                         // 12180
	    var SBOX_P = [                                                                                                    // 12181
	        {                                                                                                             // 12182
	            0x0: 0x808200,                                                                                            // 12183
	            0x10000000: 0x8000,                                                                                       // 12184
	            0x20000000: 0x808002,                                                                                     // 12185
	            0x30000000: 0x2,                                                                                          // 12186
	            0x40000000: 0x200,                                                                                        // 12187
	            0x50000000: 0x808202,                                                                                     // 12188
	            0x60000000: 0x800202,                                                                                     // 12189
	            0x70000000: 0x800000,                                                                                     // 12190
	            0x80000000: 0x202,                                                                                        // 12191
	            0x90000000: 0x800200,                                                                                     // 12192
	            0xa0000000: 0x8200,                                                                                       // 12193
	            0xb0000000: 0x808000,                                                                                     // 12194
	            0xc0000000: 0x8002,                                                                                       // 12195
	            0xd0000000: 0x800002,                                                                                     // 12196
	            0xe0000000: 0x0,                                                                                          // 12197
	            0xf0000000: 0x8202,                                                                                       // 12198
	            0x8000000: 0x0,                                                                                           // 12199
	            0x18000000: 0x808202,                                                                                     // 12200
	            0x28000000: 0x8202,                                                                                       // 12201
	            0x38000000: 0x8000,                                                                                       // 12202
	            0x48000000: 0x808200,                                                                                     // 12203
	            0x58000000: 0x200,                                                                                        // 12204
	            0x68000000: 0x808002,                                                                                     // 12205
	            0x78000000: 0x2,                                                                                          // 12206
	            0x88000000: 0x800200,                                                                                     // 12207
	            0x98000000: 0x8200,                                                                                       // 12208
	            0xa8000000: 0x808000,                                                                                     // 12209
	            0xb8000000: 0x800202,                                                                                     // 12210
	            0xc8000000: 0x800002,                                                                                     // 12211
	            0xd8000000: 0x8002,                                                                                       // 12212
	            0xe8000000: 0x202,                                                                                        // 12213
	            0xf8000000: 0x800000,                                                                                     // 12214
	            0x1: 0x8000,                                                                                              // 12215
	            0x10000001: 0x2,                                                                                          // 12216
	            0x20000001: 0x808200,                                                                                     // 12217
	            0x30000001: 0x800000,                                                                                     // 12218
	            0x40000001: 0x808002,                                                                                     // 12219
	            0x50000001: 0x8200,                                                                                       // 12220
	            0x60000001: 0x200,                                                                                        // 12221
	            0x70000001: 0x800202,                                                                                     // 12222
	            0x80000001: 0x808202,                                                                                     // 12223
	            0x90000001: 0x808000,                                                                                     // 12224
	            0xa0000001: 0x800002,                                                                                     // 12225
	            0xb0000001: 0x8202,                                                                                       // 12226
	            0xc0000001: 0x202,                                                                                        // 12227
	            0xd0000001: 0x800200,                                                                                     // 12228
	            0xe0000001: 0x8002,                                                                                       // 12229
	            0xf0000001: 0x0,                                                                                          // 12230
	            0x8000001: 0x808202,                                                                                      // 12231
	            0x18000001: 0x808000,                                                                                     // 12232
	            0x28000001: 0x800000,                                                                                     // 12233
	            0x38000001: 0x200,                                                                                        // 12234
	            0x48000001: 0x8000,                                                                                       // 12235
	            0x58000001: 0x800002,                                                                                     // 12236
	            0x68000001: 0x2,                                                                                          // 12237
	            0x78000001: 0x8202,                                                                                       // 12238
	            0x88000001: 0x8002,                                                                                       // 12239
	            0x98000001: 0x800202,                                                                                     // 12240
	            0xa8000001: 0x202,                                                                                        // 12241
	            0xb8000001: 0x808200,                                                                                     // 12242
	            0xc8000001: 0x800200,                                                                                     // 12243
	            0xd8000001: 0x0,                                                                                          // 12244
	            0xe8000001: 0x8200,                                                                                       // 12245
	            0xf8000001: 0x808002                                                                                      // 12246
	        },                                                                                                            // 12247
	        {                                                                                                             // 12248
	            0x0: 0x40084010,                                                                                          // 12249
	            0x1000000: 0x4000,                                                                                        // 12250
	            0x2000000: 0x80000,                                                                                       // 12251
	            0x3000000: 0x40080010,                                                                                    // 12252
	            0x4000000: 0x40000010,                                                                                    // 12253
	            0x5000000: 0x40084000,                                                                                    // 12254
	            0x6000000: 0x40004000,                                                                                    // 12255
	            0x7000000: 0x10,                                                                                          // 12256
	            0x8000000: 0x84000,                                                                                       // 12257
	            0x9000000: 0x40004010,                                                                                    // 12258
	            0xa000000: 0x40000000,                                                                                    // 12259
	            0xb000000: 0x84010,                                                                                       // 12260
	            0xc000000: 0x80010,                                                                                       // 12261
	            0xd000000: 0x0,                                                                                           // 12262
	            0xe000000: 0x4010,                                                                                        // 12263
	            0xf000000: 0x40080000,                                                                                    // 12264
	            0x800000: 0x40004000,                                                                                     // 12265
	            0x1800000: 0x84010,                                                                                       // 12266
	            0x2800000: 0x10,                                                                                          // 12267
	            0x3800000: 0x40004010,                                                                                    // 12268
	            0x4800000: 0x40084010,                                                                                    // 12269
	            0x5800000: 0x40000000,                                                                                    // 12270
	            0x6800000: 0x80000,                                                                                       // 12271
	            0x7800000: 0x40080010,                                                                                    // 12272
	            0x8800000: 0x80010,                                                                                       // 12273
	            0x9800000: 0x0,                                                                                           // 12274
	            0xa800000: 0x4000,                                                                                        // 12275
	            0xb800000: 0x40080000,                                                                                    // 12276
	            0xc800000: 0x40000010,                                                                                    // 12277
	            0xd800000: 0x84000,                                                                                       // 12278
	            0xe800000: 0x40084000,                                                                                    // 12279
	            0xf800000: 0x4010,                                                                                        // 12280
	            0x10000000: 0x0,                                                                                          // 12281
	            0x11000000: 0x40080010,                                                                                   // 12282
	            0x12000000: 0x40004010,                                                                                   // 12283
	            0x13000000: 0x40084000,                                                                                   // 12284
	            0x14000000: 0x40080000,                                                                                   // 12285
	            0x15000000: 0x10,                                                                                         // 12286
	            0x16000000: 0x84010,                                                                                      // 12287
	            0x17000000: 0x4000,                                                                                       // 12288
	            0x18000000: 0x4010,                                                                                       // 12289
	            0x19000000: 0x80000,                                                                                      // 12290
	            0x1a000000: 0x80010,                                                                                      // 12291
	            0x1b000000: 0x40000010,                                                                                   // 12292
	            0x1c000000: 0x84000,                                                                                      // 12293
	            0x1d000000: 0x40004000,                                                                                   // 12294
	            0x1e000000: 0x40000000,                                                                                   // 12295
	            0x1f000000: 0x40084010,                                                                                   // 12296
	            0x10800000: 0x84010,                                                                                      // 12297
	            0x11800000: 0x80000,                                                                                      // 12298
	            0x12800000: 0x40080000,                                                                                   // 12299
	            0x13800000: 0x4000,                                                                                       // 12300
	            0x14800000: 0x40004000,                                                                                   // 12301
	            0x15800000: 0x40084010,                                                                                   // 12302
	            0x16800000: 0x10,                                                                                         // 12303
	            0x17800000: 0x40000000,                                                                                   // 12304
	            0x18800000: 0x40084000,                                                                                   // 12305
	            0x19800000: 0x40000010,                                                                                   // 12306
	            0x1a800000: 0x40004010,                                                                                   // 12307
	            0x1b800000: 0x80010,                                                                                      // 12308
	            0x1c800000: 0x0,                                                                                          // 12309
	            0x1d800000: 0x4010,                                                                                       // 12310
	            0x1e800000: 0x40080010,                                                                                   // 12311
	            0x1f800000: 0x84000                                                                                       // 12312
	        },                                                                                                            // 12313
	        {                                                                                                             // 12314
	            0x0: 0x104,                                                                                               // 12315
	            0x100000: 0x0,                                                                                            // 12316
	            0x200000: 0x4000100,                                                                                      // 12317
	            0x300000: 0x10104,                                                                                        // 12318
	            0x400000: 0x10004,                                                                                        // 12319
	            0x500000: 0x4000004,                                                                                      // 12320
	            0x600000: 0x4010104,                                                                                      // 12321
	            0x700000: 0x4010000,                                                                                      // 12322
	            0x800000: 0x4000000,                                                                                      // 12323
	            0x900000: 0x4010100,                                                                                      // 12324
	            0xa00000: 0x10100,                                                                                        // 12325
	            0xb00000: 0x4010004,                                                                                      // 12326
	            0xc00000: 0x4000104,                                                                                      // 12327
	            0xd00000: 0x10000,                                                                                        // 12328
	            0xe00000: 0x4,                                                                                            // 12329
	            0xf00000: 0x100,                                                                                          // 12330
	            0x80000: 0x4010100,                                                                                       // 12331
	            0x180000: 0x4010004,                                                                                      // 12332
	            0x280000: 0x0,                                                                                            // 12333
	            0x380000: 0x4000100,                                                                                      // 12334
	            0x480000: 0x4000004,                                                                                      // 12335
	            0x580000: 0x10000,                                                                                        // 12336
	            0x680000: 0x10004,                                                                                        // 12337
	            0x780000: 0x104,                                                                                          // 12338
	            0x880000: 0x4,                                                                                            // 12339
	            0x980000: 0x100,                                                                                          // 12340
	            0xa80000: 0x4010000,                                                                                      // 12341
	            0xb80000: 0x10104,                                                                                        // 12342
	            0xc80000: 0x10100,                                                                                        // 12343
	            0xd80000: 0x4000104,                                                                                      // 12344
	            0xe80000: 0x4010104,                                                                                      // 12345
	            0xf80000: 0x4000000,                                                                                      // 12346
	            0x1000000: 0x4010100,                                                                                     // 12347
	            0x1100000: 0x10004,                                                                                       // 12348
	            0x1200000: 0x10000,                                                                                       // 12349
	            0x1300000: 0x4000100,                                                                                     // 12350
	            0x1400000: 0x100,                                                                                         // 12351
	            0x1500000: 0x4010104,                                                                                     // 12352
	            0x1600000: 0x4000004,                                                                                     // 12353
	            0x1700000: 0x0,                                                                                           // 12354
	            0x1800000: 0x4000104,                                                                                     // 12355
	            0x1900000: 0x4000000,                                                                                     // 12356
	            0x1a00000: 0x4,                                                                                           // 12357
	            0x1b00000: 0x10100,                                                                                       // 12358
	            0x1c00000: 0x4010000,                                                                                     // 12359
	            0x1d00000: 0x104,                                                                                         // 12360
	            0x1e00000: 0x10104,                                                                                       // 12361
	            0x1f00000: 0x4010004,                                                                                     // 12362
	            0x1080000: 0x4000000,                                                                                     // 12363
	            0x1180000: 0x104,                                                                                         // 12364
	            0x1280000: 0x4010100,                                                                                     // 12365
	            0x1380000: 0x0,                                                                                           // 12366
	            0x1480000: 0x10004,                                                                                       // 12367
	            0x1580000: 0x4000100,                                                                                     // 12368
	            0x1680000: 0x100,                                                                                         // 12369
	            0x1780000: 0x4010004,                                                                                     // 12370
	            0x1880000: 0x10000,                                                                                       // 12371
	            0x1980000: 0x4010104,                                                                                     // 12372
	            0x1a80000: 0x10104,                                                                                       // 12373
	            0x1b80000: 0x4000004,                                                                                     // 12374
	            0x1c80000: 0x4000104,                                                                                     // 12375
	            0x1d80000: 0x4010000,                                                                                     // 12376
	            0x1e80000: 0x4,                                                                                           // 12377
	            0x1f80000: 0x10100                                                                                        // 12378
	        },                                                                                                            // 12379
	        {                                                                                                             // 12380
	            0x0: 0x80401000,                                                                                          // 12381
	            0x10000: 0x80001040,                                                                                      // 12382
	            0x20000: 0x401040,                                                                                        // 12383
	            0x30000: 0x80400000,                                                                                      // 12384
	            0x40000: 0x0,                                                                                             // 12385
	            0x50000: 0x401000,                                                                                        // 12386
	            0x60000: 0x80000040,                                                                                      // 12387
	            0x70000: 0x400040,                                                                                        // 12388
	            0x80000: 0x80000000,                                                                                      // 12389
	            0x90000: 0x400000,                                                                                        // 12390
	            0xa0000: 0x40,                                                                                            // 12391
	            0xb0000: 0x80001000,                                                                                      // 12392
	            0xc0000: 0x80400040,                                                                                      // 12393
	            0xd0000: 0x1040,                                                                                          // 12394
	            0xe0000: 0x1000,                                                                                          // 12395
	            0xf0000: 0x80401040,                                                                                      // 12396
	            0x8000: 0x80001040,                                                                                       // 12397
	            0x18000: 0x40,                                                                                            // 12398
	            0x28000: 0x80400040,                                                                                      // 12399
	            0x38000: 0x80001000,                                                                                      // 12400
	            0x48000: 0x401000,                                                                                        // 12401
	            0x58000: 0x80401040,                                                                                      // 12402
	            0x68000: 0x0,                                                                                             // 12403
	            0x78000: 0x80400000,                                                                                      // 12404
	            0x88000: 0x1000,                                                                                          // 12405
	            0x98000: 0x80401000,                                                                                      // 12406
	            0xa8000: 0x400000,                                                                                        // 12407
	            0xb8000: 0x1040,                                                                                          // 12408
	            0xc8000: 0x80000000,                                                                                      // 12409
	            0xd8000: 0x400040,                                                                                        // 12410
	            0xe8000: 0x401040,                                                                                        // 12411
	            0xf8000: 0x80000040,                                                                                      // 12412
	            0x100000: 0x400040,                                                                                       // 12413
	            0x110000: 0x401000,                                                                                       // 12414
	            0x120000: 0x80000040,                                                                                     // 12415
	            0x130000: 0x0,                                                                                            // 12416
	            0x140000: 0x1040,                                                                                         // 12417
	            0x150000: 0x80400040,                                                                                     // 12418
	            0x160000: 0x80401000,                                                                                     // 12419
	            0x170000: 0x80001040,                                                                                     // 12420
	            0x180000: 0x80401040,                                                                                     // 12421
	            0x190000: 0x80000000,                                                                                     // 12422
	            0x1a0000: 0x80400000,                                                                                     // 12423
	            0x1b0000: 0x401040,                                                                                       // 12424
	            0x1c0000: 0x80001000,                                                                                     // 12425
	            0x1d0000: 0x400000,                                                                                       // 12426
	            0x1e0000: 0x40,                                                                                           // 12427
	            0x1f0000: 0x1000,                                                                                         // 12428
	            0x108000: 0x80400000,                                                                                     // 12429
	            0x118000: 0x80401040,                                                                                     // 12430
	            0x128000: 0x0,                                                                                            // 12431
	            0x138000: 0x401000,                                                                                       // 12432
	            0x148000: 0x400040,                                                                                       // 12433
	            0x158000: 0x80000000,                                                                                     // 12434
	            0x168000: 0x80001040,                                                                                     // 12435
	            0x178000: 0x40,                                                                                           // 12436
	            0x188000: 0x80000040,                                                                                     // 12437
	            0x198000: 0x1000,                                                                                         // 12438
	            0x1a8000: 0x80001000,                                                                                     // 12439
	            0x1b8000: 0x80400040,                                                                                     // 12440
	            0x1c8000: 0x1040,                                                                                         // 12441
	            0x1d8000: 0x80401000,                                                                                     // 12442
	            0x1e8000: 0x400000,                                                                                       // 12443
	            0x1f8000: 0x401040                                                                                        // 12444
	        },                                                                                                            // 12445
	        {                                                                                                             // 12446
	            0x0: 0x80,                                                                                                // 12447
	            0x1000: 0x1040000,                                                                                        // 12448
	            0x2000: 0x40000,                                                                                          // 12449
	            0x3000: 0x20000000,                                                                                       // 12450
	            0x4000: 0x20040080,                                                                                       // 12451
	            0x5000: 0x1000080,                                                                                        // 12452
	            0x6000: 0x21000080,                                                                                       // 12453
	            0x7000: 0x40080,                                                                                          // 12454
	            0x8000: 0x1000000,                                                                                        // 12455
	            0x9000: 0x20040000,                                                                                       // 12456
	            0xa000: 0x20000080,                                                                                       // 12457
	            0xb000: 0x21040080,                                                                                       // 12458
	            0xc000: 0x21040000,                                                                                       // 12459
	            0xd000: 0x0,                                                                                              // 12460
	            0xe000: 0x1040080,                                                                                        // 12461
	            0xf000: 0x21000000,                                                                                       // 12462
	            0x800: 0x1040080,                                                                                         // 12463
	            0x1800: 0x21000080,                                                                                       // 12464
	            0x2800: 0x80,                                                                                             // 12465
	            0x3800: 0x1040000,                                                                                        // 12466
	            0x4800: 0x40000,                                                                                          // 12467
	            0x5800: 0x20040080,                                                                                       // 12468
	            0x6800: 0x21040000,                                                                                       // 12469
	            0x7800: 0x20000000,                                                                                       // 12470
	            0x8800: 0x20040000,                                                                                       // 12471
	            0x9800: 0x0,                                                                                              // 12472
	            0xa800: 0x21040080,                                                                                       // 12473
	            0xb800: 0x1000080,                                                                                        // 12474
	            0xc800: 0x20000080,                                                                                       // 12475
	            0xd800: 0x21000000,                                                                                       // 12476
	            0xe800: 0x1000000,                                                                                        // 12477
	            0xf800: 0x40080,                                                                                          // 12478
	            0x10000: 0x40000,                                                                                         // 12479
	            0x11000: 0x80,                                                                                            // 12480
	            0x12000: 0x20000000,                                                                                      // 12481
	            0x13000: 0x21000080,                                                                                      // 12482
	            0x14000: 0x1000080,                                                                                       // 12483
	            0x15000: 0x21040000,                                                                                      // 12484
	            0x16000: 0x20040080,                                                                                      // 12485
	            0x17000: 0x1000000,                                                                                       // 12486
	            0x18000: 0x21040080,                                                                                      // 12487
	            0x19000: 0x21000000,                                                                                      // 12488
	            0x1a000: 0x1040000,                                                                                       // 12489
	            0x1b000: 0x20040000,                                                                                      // 12490
	            0x1c000: 0x40080,                                                                                         // 12491
	            0x1d000: 0x20000080,                                                                                      // 12492
	            0x1e000: 0x0,                                                                                             // 12493
	            0x1f000: 0x1040080,                                                                                       // 12494
	            0x10800: 0x21000080,                                                                                      // 12495
	            0x11800: 0x1000000,                                                                                       // 12496
	            0x12800: 0x1040000,                                                                                       // 12497
	            0x13800: 0x20040080,                                                                                      // 12498
	            0x14800: 0x20000000,                                                                                      // 12499
	            0x15800: 0x1040080,                                                                                       // 12500
	            0x16800: 0x80,                                                                                            // 12501
	            0x17800: 0x21040000,                                                                                      // 12502
	            0x18800: 0x40080,                                                                                         // 12503
	            0x19800: 0x21040080,                                                                                      // 12504
	            0x1a800: 0x0,                                                                                             // 12505
	            0x1b800: 0x21000000,                                                                                      // 12506
	            0x1c800: 0x1000080,                                                                                       // 12507
	            0x1d800: 0x40000,                                                                                         // 12508
	            0x1e800: 0x20040000,                                                                                      // 12509
	            0x1f800: 0x20000080                                                                                       // 12510
	        },                                                                                                            // 12511
	        {                                                                                                             // 12512
	            0x0: 0x10000008,                                                                                          // 12513
	            0x100: 0x2000,                                                                                            // 12514
	            0x200: 0x10200000,                                                                                        // 12515
	            0x300: 0x10202008,                                                                                        // 12516
	            0x400: 0x10002000,                                                                                        // 12517
	            0x500: 0x200000,                                                                                          // 12518
	            0x600: 0x200008,                                                                                          // 12519
	            0x700: 0x10000000,                                                                                        // 12520
	            0x800: 0x0,                                                                                               // 12521
	            0x900: 0x10002008,                                                                                        // 12522
	            0xa00: 0x202000,                                                                                          // 12523
	            0xb00: 0x8,                                                                                               // 12524
	            0xc00: 0x10200008,                                                                                        // 12525
	            0xd00: 0x202008,                                                                                          // 12526
	            0xe00: 0x2008,                                                                                            // 12527
	            0xf00: 0x10202000,                                                                                        // 12528
	            0x80: 0x10200000,                                                                                         // 12529
	            0x180: 0x10202008,                                                                                        // 12530
	            0x280: 0x8,                                                                                               // 12531
	            0x380: 0x200000,                                                                                          // 12532
	            0x480: 0x202008,                                                                                          // 12533
	            0x580: 0x10000008,                                                                                        // 12534
	            0x680: 0x10002000,                                                                                        // 12535
	            0x780: 0x2008,                                                                                            // 12536
	            0x880: 0x200008,                                                                                          // 12537
	            0x980: 0x2000,                                                                                            // 12538
	            0xa80: 0x10002008,                                                                                        // 12539
	            0xb80: 0x10200008,                                                                                        // 12540
	            0xc80: 0x0,                                                                                               // 12541
	            0xd80: 0x10202000,                                                                                        // 12542
	            0xe80: 0x202000,                                                                                          // 12543
	            0xf80: 0x10000000,                                                                                        // 12544
	            0x1000: 0x10002000,                                                                                       // 12545
	            0x1100: 0x10200008,                                                                                       // 12546
	            0x1200: 0x10202008,                                                                                       // 12547
	            0x1300: 0x2008,                                                                                           // 12548
	            0x1400: 0x200000,                                                                                         // 12549
	            0x1500: 0x10000000,                                                                                       // 12550
	            0x1600: 0x10000008,                                                                                       // 12551
	            0x1700: 0x202000,                                                                                         // 12552
	            0x1800: 0x202008,                                                                                         // 12553
	            0x1900: 0x0,                                                                                              // 12554
	            0x1a00: 0x8,                                                                                              // 12555
	            0x1b00: 0x10200000,                                                                                       // 12556
	            0x1c00: 0x2000,                                                                                           // 12557
	            0x1d00: 0x10002008,                                                                                       // 12558
	            0x1e00: 0x10202000,                                                                                       // 12559
	            0x1f00: 0x200008,                                                                                         // 12560
	            0x1080: 0x8,                                                                                              // 12561
	            0x1180: 0x202000,                                                                                         // 12562
	            0x1280: 0x200000,                                                                                         // 12563
	            0x1380: 0x10000008,                                                                                       // 12564
	            0x1480: 0x10002000,                                                                                       // 12565
	            0x1580: 0x2008,                                                                                           // 12566
	            0x1680: 0x10202008,                                                                                       // 12567
	            0x1780: 0x10200000,                                                                                       // 12568
	            0x1880: 0x10202000,                                                                                       // 12569
	            0x1980: 0x10200008,                                                                                       // 12570
	            0x1a80: 0x2000,                                                                                           // 12571
	            0x1b80: 0x202008,                                                                                         // 12572
	            0x1c80: 0x200008,                                                                                         // 12573
	            0x1d80: 0x0,                                                                                              // 12574
	            0x1e80: 0x10000000,                                                                                       // 12575
	            0x1f80: 0x10002008                                                                                        // 12576
	        },                                                                                                            // 12577
	        {                                                                                                             // 12578
	            0x0: 0x100000,                                                                                            // 12579
	            0x10: 0x2000401,                                                                                          // 12580
	            0x20: 0x400,                                                                                              // 12581
	            0x30: 0x100401,                                                                                           // 12582
	            0x40: 0x2100401,                                                                                          // 12583
	            0x50: 0x0,                                                                                                // 12584
	            0x60: 0x1,                                                                                                // 12585
	            0x70: 0x2100001,                                                                                          // 12586
	            0x80: 0x2000400,                                                                                          // 12587
	            0x90: 0x100001,                                                                                           // 12588
	            0xa0: 0x2000001,                                                                                          // 12589
	            0xb0: 0x2100400,                                                                                          // 12590
	            0xc0: 0x2100000,                                                                                          // 12591
	            0xd0: 0x401,                                                                                              // 12592
	            0xe0: 0x100400,                                                                                           // 12593
	            0xf0: 0x2000000,                                                                                          // 12594
	            0x8: 0x2100001,                                                                                           // 12595
	            0x18: 0x0,                                                                                                // 12596
	            0x28: 0x2000401,                                                                                          // 12597
	            0x38: 0x2100400,                                                                                          // 12598
	            0x48: 0x100000,                                                                                           // 12599
	            0x58: 0x2000001,                                                                                          // 12600
	            0x68: 0x2000000,                                                                                          // 12601
	            0x78: 0x401,                                                                                              // 12602
	            0x88: 0x100401,                                                                                           // 12603
	            0x98: 0x2000400,                                                                                          // 12604
	            0xa8: 0x2100000,                                                                                          // 12605
	            0xb8: 0x100001,                                                                                           // 12606
	            0xc8: 0x400,                                                                                              // 12607
	            0xd8: 0x2100401,                                                                                          // 12608
	            0xe8: 0x1,                                                                                                // 12609
	            0xf8: 0x100400,                                                                                           // 12610
	            0x100: 0x2000000,                                                                                         // 12611
	            0x110: 0x100000,                                                                                          // 12612
	            0x120: 0x2000401,                                                                                         // 12613
	            0x130: 0x2100001,                                                                                         // 12614
	            0x140: 0x100001,                                                                                          // 12615
	            0x150: 0x2000400,                                                                                         // 12616
	            0x160: 0x2100400,                                                                                         // 12617
	            0x170: 0x100401,                                                                                          // 12618
	            0x180: 0x401,                                                                                             // 12619
	            0x190: 0x2100401,                                                                                         // 12620
	            0x1a0: 0x100400,                                                                                          // 12621
	            0x1b0: 0x1,                                                                                               // 12622
	            0x1c0: 0x0,                                                                                               // 12623
	            0x1d0: 0x2100000,                                                                                         // 12624
	            0x1e0: 0x2000001,                                                                                         // 12625
	            0x1f0: 0x400,                                                                                             // 12626
	            0x108: 0x100400,                                                                                          // 12627
	            0x118: 0x2000401,                                                                                         // 12628
	            0x128: 0x2100001,                                                                                         // 12629
	            0x138: 0x1,                                                                                               // 12630
	            0x148: 0x2000000,                                                                                         // 12631
	            0x158: 0x100000,                                                                                          // 12632
	            0x168: 0x401,                                                                                             // 12633
	            0x178: 0x2100400,                                                                                         // 12634
	            0x188: 0x2000001,                                                                                         // 12635
	            0x198: 0x2100000,                                                                                         // 12636
	            0x1a8: 0x0,                                                                                               // 12637
	            0x1b8: 0x2100401,                                                                                         // 12638
	            0x1c8: 0x100401,                                                                                          // 12639
	            0x1d8: 0x400,                                                                                             // 12640
	            0x1e8: 0x2000400,                                                                                         // 12641
	            0x1f8: 0x100001                                                                                           // 12642
	        },                                                                                                            // 12643
	        {                                                                                                             // 12644
	            0x0: 0x8000820,                                                                                           // 12645
	            0x1: 0x20000,                                                                                             // 12646
	            0x2: 0x8000000,                                                                                           // 12647
	            0x3: 0x20,                                                                                                // 12648
	            0x4: 0x20020,                                                                                             // 12649
	            0x5: 0x8020820,                                                                                           // 12650
	            0x6: 0x8020800,                                                                                           // 12651
	            0x7: 0x800,                                                                                               // 12652
	            0x8: 0x8020000,                                                                                           // 12653
	            0x9: 0x8000800,                                                                                           // 12654
	            0xa: 0x20800,                                                                                             // 12655
	            0xb: 0x8020020,                                                                                           // 12656
	            0xc: 0x820,                                                                                               // 12657
	            0xd: 0x0,                                                                                                 // 12658
	            0xe: 0x8000020,                                                                                           // 12659
	            0xf: 0x20820,                                                                                             // 12660
	            0x80000000: 0x800,                                                                                        // 12661
	            0x80000001: 0x8020820,                                                                                    // 12662
	            0x80000002: 0x8000820,                                                                                    // 12663
	            0x80000003: 0x8000000,                                                                                    // 12664
	            0x80000004: 0x8020000,                                                                                    // 12665
	            0x80000005: 0x20800,                                                                                      // 12666
	            0x80000006: 0x20820,                                                                                      // 12667
	            0x80000007: 0x20,                                                                                         // 12668
	            0x80000008: 0x8000020,                                                                                    // 12669
	            0x80000009: 0x820,                                                                                        // 12670
	            0x8000000a: 0x20020,                                                                                      // 12671
	            0x8000000b: 0x8020800,                                                                                    // 12672
	            0x8000000c: 0x0,                                                                                          // 12673
	            0x8000000d: 0x8020020,                                                                                    // 12674
	            0x8000000e: 0x8000800,                                                                                    // 12675
	            0x8000000f: 0x20000,                                                                                      // 12676
	            0x10: 0x20820,                                                                                            // 12677
	            0x11: 0x8020800,                                                                                          // 12678
	            0x12: 0x20,                                                                                               // 12679
	            0x13: 0x800,                                                                                              // 12680
	            0x14: 0x8000800,                                                                                          // 12681
	            0x15: 0x8000020,                                                                                          // 12682
	            0x16: 0x8020020,                                                                                          // 12683
	            0x17: 0x20000,                                                                                            // 12684
	            0x18: 0x0,                                                                                                // 12685
	            0x19: 0x20020,                                                                                            // 12686
	            0x1a: 0x8020000,                                                                                          // 12687
	            0x1b: 0x8000820,                                                                                          // 12688
	            0x1c: 0x8020820,                                                                                          // 12689
	            0x1d: 0x20800,                                                                                            // 12690
	            0x1e: 0x820,                                                                                              // 12691
	            0x1f: 0x8000000,                                                                                          // 12692
	            0x80000010: 0x20000,                                                                                      // 12693
	            0x80000011: 0x800,                                                                                        // 12694
	            0x80000012: 0x8020020,                                                                                    // 12695
	            0x80000013: 0x20820,                                                                                      // 12696
	            0x80000014: 0x20,                                                                                         // 12697
	            0x80000015: 0x8020000,                                                                                    // 12698
	            0x80000016: 0x8000000,                                                                                    // 12699
	            0x80000017: 0x8000820,                                                                                    // 12700
	            0x80000018: 0x8020820,                                                                                    // 12701
	            0x80000019: 0x8000020,                                                                                    // 12702
	            0x8000001a: 0x8000800,                                                                                    // 12703
	            0x8000001b: 0x0,                                                                                          // 12704
	            0x8000001c: 0x20800,                                                                                      // 12705
	            0x8000001d: 0x820,                                                                                        // 12706
	            0x8000001e: 0x20020,                                                                                      // 12707
	            0x8000001f: 0x8020800                                                                                     // 12708
	        }                                                                                                             // 12709
	    ];                                                                                                                // 12710
                                                                                                                       // 12711
	    // Masks that select the SBOX input                                                                               // 12712
	    var SBOX_MASK = [                                                                                                 // 12713
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 12714
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 12715
	    ];                                                                                                                // 12716
                                                                                                                       // 12717
	    /**                                                                                                               // 12718
	     * DES block cipher algorithm.                                                                                    // 12719
	     */                                                                                                               // 12720
	    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 12721
	        _doReset: function () {                                                                                       // 12722
	            // Shortcuts                                                                                              // 12723
	            var key = this._key;                                                                                      // 12724
	            var keyWords = key.words;                                                                                 // 12725
                                                                                                                       // 12726
	            // Select 56 bits according to PC1                                                                        // 12727
	            var keyBits = [];                                                                                         // 12728
	            for (var i = 0; i < 56; i++) {                                                                            // 12729
	                var keyBitPos = PC1[i] - 1;                                                                           // 12730
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 12731
	            }                                                                                                         // 12732
                                                                                                                       // 12733
	            // Assemble 16 subkeys                                                                                    // 12734
	            var subKeys = this._subKeys = [];                                                                         // 12735
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 12736
	                // Create subkey                                                                                      // 12737
	                var subKey = subKeys[nSubKey] = [];                                                                   // 12738
                                                                                                                       // 12739
	                // Shortcut                                                                                           // 12740
	                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 12741
                                                                                                                       // 12742
	                // Select 48 bits according to PC2                                                                    // 12743
	                for (var i = 0; i < 24; i++) {                                                                        // 12744
	                    // Select from the left 28 key bits                                                               // 12745
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 12746
                                                                                                                       // 12747
	                    // Select from the right 28 key bits                                                              // 12748
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }                                                                                                     // 12750
                                                                                                                       // 12751
	                // Since each subkey is applied to an expanded 32-bit input,                                          // 12752
	                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 12753
	                // which allows the key to be used without expansion                                                  // 12754
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 12755
	                for (var i = 1; i < 7; i++) {                                                                         // 12756
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 12757
	                }                                                                                                     // 12758
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 12759
	            }                                                                                                         // 12760
                                                                                                                       // 12761
	            // Compute inverse subkeys                                                                                // 12762
	            var invSubKeys = this._invSubKeys = [];                                                                   // 12763
	            for (var i = 0; i < 16; i++) {                                                                            // 12764
	                invSubKeys[i] = subKeys[15 - i];                                                                      // 12765
	            }                                                                                                         // 12766
	        },                                                                                                            // 12767
                                                                                                                       // 12768
	        encryptBlock: function (M, offset) {                                                                          // 12769
	            this._doCryptBlock(M, offset, this._subKeys);                                                             // 12770
	        },                                                                                                            // 12771
                                                                                                                       // 12772
	        decryptBlock: function (M, offset) {                                                                          // 12773
	            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 12774
	        },                                                                                                            // 12775
                                                                                                                       // 12776
	        _doCryptBlock: function (M, offset, subKeys) {                                                                // 12777
	            // Get input                                                                                              // 12778
	            this._lBlock = M[offset];                                                                                 // 12779
	            this._rBlock = M[offset + 1];                                                                             // 12780
                                                                                                                       // 12781
	            // Initial permutation                                                                                    // 12782
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12783
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12784
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12785
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12786
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12787
                                                                                                                       // 12788
	            // Rounds                                                                                                 // 12789
	            for (var round = 0; round < 16; round++) {                                                                // 12790
	                // Shortcuts                                                                                          // 12791
	                var subKey = subKeys[round];                                                                          // 12792
	                var lBlock = this._lBlock;                                                                            // 12793
	                var rBlock = this._rBlock;                                                                            // 12794
                                                                                                                       // 12795
	                // Feistel function                                                                                   // 12796
	                var f = 0;                                                                                            // 12797
	                for (var i = 0; i < 8; i++) {                                                                         // 12798
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 12799
	                }                                                                                                     // 12800
	                this._lBlock = rBlock;                                                                                // 12801
	                this._rBlock = lBlock ^ f;                                                                            // 12802
	            }                                                                                                         // 12803
                                                                                                                       // 12804
	            // Undo swap from last round                                                                              // 12805
	            var t = this._lBlock;                                                                                     // 12806
	            this._lBlock = this._rBlock;                                                                              // 12807
	            this._rBlock = t;                                                                                         // 12808
                                                                                                                       // 12809
	            // Final permutation                                                                                      // 12810
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12811
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12812
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12813
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12814
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12815
                                                                                                                       // 12816
	            // Set output                                                                                             // 12817
	            M[offset] = this._lBlock;                                                                                 // 12818
	            M[offset + 1] = this._rBlock;                                                                             // 12819
	        },                                                                                                            // 12820
                                                                                                                       // 12821
	        keySize: 64/32,                                                                                               // 12822
                                                                                                                       // 12823
	        ivSize: 64/32,                                                                                                // 12824
                                                                                                                       // 12825
	        blockSize: 64/32                                                                                              // 12826
	    });                                                                                                               // 12827
                                                                                                                       // 12828
	    // Swap bits across the left and right words                                                                      // 12829
	    function exchangeLR(offset, mask) {                                                                               // 12830
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 12831
	        this._rBlock ^= t;                                                                                            // 12832
	        this._lBlock ^= t << offset;                                                                                  // 12833
	    }                                                                                                                 // 12834
                                                                                                                       // 12835
	    function exchangeRL(offset, mask) {                                                                               // 12836
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 12837
	        this._lBlock ^= t;                                                                                            // 12838
	        this._rBlock ^= t << offset;                                                                                  // 12839
	    }                                                                                                                 // 12840
                                                                                                                       // 12841
	    /**                                                                                                               // 12842
	     * Shortcut functions to the cipher's object interface.                                                           // 12843
	     *                                                                                                                // 12844
	     * @example                                                                                                       // 12845
	     *                                                                                                                // 12846
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 12847
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 12848
	     */                                                                                                               // 12849
	    C.DES = BlockCipher._createHelper(DES);                                                                           // 12850
                                                                                                                       // 12851
	    /**                                                                                                               // 12852
	     * Triple-DES block cipher algorithm.                                                                             // 12853
	     */                                                                                                               // 12854
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 12855
	        _doReset: function () {                                                                                       // 12856
	            // Shortcuts                                                                                              // 12857
	            var key = this._key;                                                                                      // 12858
	            var keyWords = key.words;                                                                                 // 12859
                                                                                                                       // 12860
	            // Create DES instances                                                                                   // 12861
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 12862
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 12863
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 12864
	        },                                                                                                            // 12865
                                                                                                                       // 12866
	        encryptBlock: function (M, offset) {                                                                          // 12867
	            this._des1.encryptBlock(M, offset);                                                                       // 12868
	            this._des2.decryptBlock(M, offset);                                                                       // 12869
	            this._des3.encryptBlock(M, offset);                                                                       // 12870
	        },                                                                                                            // 12871
                                                                                                                       // 12872
	        decryptBlock: function (M, offset) {                                                                          // 12873
	            this._des3.decryptBlock(M, offset);                                                                       // 12874
	            this._des2.encryptBlock(M, offset);                                                                       // 12875
	            this._des1.decryptBlock(M, offset);                                                                       // 12876
	        },                                                                                                            // 12877
                                                                                                                       // 12878
	        keySize: 192/32,                                                                                              // 12879
                                                                                                                       // 12880
	        ivSize: 64/32,                                                                                                // 12881
                                                                                                                       // 12882
	        blockSize: 64/32                                                                                              // 12883
	    });                                                                                                               // 12884
                                                                                                                       // 12885
	    /**                                                                                                               // 12886
	     * Shortcut functions to the cipher's object interface.                                                           // 12887
	     *                                                                                                                // 12888
	     * @example                                                                                                       // 12889
	     *                                                                                                                // 12890
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 12891
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 12892
	     */                                                                                                               // 12893
	    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 12894
	}());                                                                                                                 // 12895
                                                                                                                       // 12896
                                                                                                                       // 12897
	return CryptoJS.TripleDES;                                                                                            // 12898
                                                                                                                       // 12899
}));                                                                                                                   // 12900
},{"./cipher-core":52,"./core":53,"./enc-base64":54,"./evpkdf":56,"./md5":61}],84:[function(require,module,exports){   // 12901
;(function (root, factory) {                                                                                           // 12902
	if (typeof exports === "object") {                                                                                    // 12903
		// CommonJS                                                                                                          // 12904
		module.exports = exports = factory(require("./core"));                                                               // 12905
	}                                                                                                                     // 12906
	else if (typeof define === "function" && define.amd) {                                                                // 12907
		// AMD                                                                                                               // 12908
		define(["./core"], factory);                                                                                         // 12909
	}                                                                                                                     // 12910
	else {                                                                                                                // 12911
		// Global (browser)                                                                                                  // 12912
		factory(root.CryptoJS);                                                                                              // 12913
	}                                                                                                                     // 12914
}(this, function (CryptoJS) {                                                                                          // 12915
                                                                                                                       // 12916
	(function (undefined) {                                                                                               // 12917
	    // Shortcuts                                                                                                      // 12918
	    var C = CryptoJS;                                                                                                 // 12919
	    var C_lib = C.lib;                                                                                                // 12920
	    var Base = C_lib.Base;                                                                                            // 12921
	    var X32WordArray = C_lib.WordArray;                                                                               // 12922
                                                                                                                       // 12923
	    /**                                                                                                               // 12924
	     * x64 namespace.                                                                                                 // 12925
	     */                                                                                                               // 12926
	    var C_x64 = C.x64 = {};                                                                                           // 12927
                                                                                                                       // 12928
	    /**                                                                                                               // 12929
	     * A 64-bit word.                                                                                                 // 12930
	     */                                                                                                               // 12931
	    var X64Word = C_x64.Word = Base.extend({                                                                          // 12932
	        /**                                                                                                           // 12933
	         * Initializes a newly created 64-bit word.                                                                   // 12934
	         *                                                                                                            // 12935
	         * @param {number} high The high 32 bits.                                                                     // 12936
	         * @param {number} low The low 32 bits.                                                                       // 12937
	         *                                                                                                            // 12938
	         * @example                                                                                                   // 12939
	         *                                                                                                            // 12940
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 12941
	         */                                                                                                           // 12942
	        init: function (high, low) {                                                                                  // 12943
	            this.high = high;                                                                                         // 12944
	            this.low = low;                                                                                           // 12945
	        }                                                                                                             // 12946
                                                                                                                       // 12947
	        /**                                                                                                           // 12948
	         * Bitwise NOTs this word.                                                                                    // 12949
	         *                                                                                                            // 12950
	         * @return {X64Word} A new x64-Word object after negating.                                                    // 12951
	         *                                                                                                            // 12952
	         * @example                                                                                                   // 12953
	         *                                                                                                            // 12954
	         *     var negated = x64Word.not();                                                                           // 12955
	         */                                                                                                           // 12956
	        // not: function () {                                                                                         // 12957
	            // var high = ~this.high;                                                                                 // 12958
	            // var low = ~this.low;                                                                                   // 12959
                                                                                                                       // 12960
	            // return X64Word.create(high, low);                                                                      // 12961
	        // },                                                                                                         // 12962
                                                                                                                       // 12963
	        /**                                                                                                           // 12964
	         * Bitwise ANDs this word with the passed word.                                                               // 12965
	         *                                                                                                            // 12966
	         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 12967
	         *                                                                                                            // 12968
	         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 12969
	         *                                                                                                            // 12970
	         * @example                                                                                                   // 12971
	         *                                                                                                            // 12972
	         *     var anded = x64Word.and(anotherX64Word);                                                               // 12973
	         */                                                                                                           // 12974
	        // and: function (word) {                                                                                     // 12975
	            // var high = this.high & word.high;                                                                      // 12976
	            // var low = this.low & word.low;                                                                         // 12977
                                                                                                                       // 12978
	            // return X64Word.create(high, low);                                                                      // 12979
	        // },                                                                                                         // 12980
                                                                                                                       // 12981
	        /**                                                                                                           // 12982
	         * Bitwise ORs this word with the passed word.                                                                // 12983
	         *                                                                                                            // 12984
	         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 12985
	         *                                                                                                            // 12986
	         * @return {X64Word} A new x64-Word object after ORing.                                                       // 12987
	         *                                                                                                            // 12988
	         * @example                                                                                                   // 12989
	         *                                                                                                            // 12990
	         *     var ored = x64Word.or(anotherX64Word);                                                                 // 12991
	         */                                                                                                           // 12992
	        // or: function (word) {                                                                                      // 12993
	            // var high = this.high | word.high;                                                                      // 12994
	            // var low = this.low | word.low;                                                                         // 12995
                                                                                                                       // 12996
	            // return X64Word.create(high, low);                                                                      // 12997
	        // },                                                                                                         // 12998
                                                                                                                       // 12999
	        /**                                                                                                           // 13000
	         * Bitwise XORs this word with the passed word.                                                               // 13001
	         *                                                                                                            // 13002
	         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 13003
	         *                                                                                                            // 13004
	         * @return {X64Word} A new x64-Word object after XORing.                                                      // 13005
	         *                                                                                                            // 13006
	         * @example                                                                                                   // 13007
	         *                                                                                                            // 13008
	         *     var xored = x64Word.xor(anotherX64Word);                                                               // 13009
	         */                                                                                                           // 13010
	        // xor: function (word) {                                                                                     // 13011
	            // var high = this.high ^ word.high;                                                                      // 13012
	            // var low = this.low ^ word.low;                                                                         // 13013
                                                                                                                       // 13014
	            // return X64Word.create(high, low);                                                                      // 13015
	        // },                                                                                                         // 13016
                                                                                                                       // 13017
	        /**                                                                                                           // 13018
	         * Shifts this word n bits to the left.                                                                       // 13019
	         *                                                                                                            // 13020
	         * @param {number} n The number of bits to shift.                                                             // 13021
	         *                                                                                                            // 13022
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 13023
	         *                                                                                                            // 13024
	         * @example                                                                                                   // 13025
	         *                                                                                                            // 13026
	         *     var shifted = x64Word.shiftL(25);                                                                      // 13027
	         */                                                                                                           // 13028
	        // shiftL: function (n) {                                                                                     // 13029
	            // if (n < 32) {                                                                                          // 13030
	                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 13031
	                // var low = this.low << n;                                                                           // 13032
	            // } else {                                                                                               // 13033
	                // var high = this.low << (n - 32);                                                                   // 13034
	                // var low = 0;                                                                                       // 13035
	            // }                                                                                                      // 13036
                                                                                                                       // 13037
	            // return X64Word.create(high, low);                                                                      // 13038
	        // },                                                                                                         // 13039
                                                                                                                       // 13040
	        /**                                                                                                           // 13041
	         * Shifts this word n bits to the right.                                                                      // 13042
	         *                                                                                                            // 13043
	         * @param {number} n The number of bits to shift.                                                             // 13044
	         *                                                                                                            // 13045
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 13046
	         *                                                                                                            // 13047
	         * @example                                                                                                   // 13048
	         *                                                                                                            // 13049
	         *     var shifted = x64Word.shiftR(7);                                                                       // 13050
	         */                                                                                                           // 13051
	        // shiftR: function (n) {                                                                                     // 13052
	            // if (n < 32) {                                                                                          // 13053
	                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 13054
	                // var high = this.high >>> n;                                                                        // 13055
	            // } else {                                                                                               // 13056
	                // var low = this.high >>> (n - 32);                                                                  // 13057
	                // var high = 0;                                                                                      // 13058
	            // }                                                                                                      // 13059
                                                                                                                       // 13060
	            // return X64Word.create(high, low);                                                                      // 13061
	        // },                                                                                                         // 13062
                                                                                                                       // 13063
	        /**                                                                                                           // 13064
	         * Rotates this word n bits to the left.                                                                      // 13065
	         *                                                                                                            // 13066
	         * @param {number} n The number of bits to rotate.                                                            // 13067
	         *                                                                                                            // 13068
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 13069
	         *                                                                                                            // 13070
	         * @example                                                                                                   // 13071
	         *                                                                                                            // 13072
	         *     var rotated = x64Word.rotL(25);                                                                        // 13073
	         */                                                                                                           // 13074
	        // rotL: function (n) {                                                                                       // 13075
	            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 13076
	        // },                                                                                                         // 13077
                                                                                                                       // 13078
	        /**                                                                                                           // 13079
	         * Rotates this word n bits to the right.                                                                     // 13080
	         *                                                                                                            // 13081
	         * @param {number} n The number of bits to rotate.                                                            // 13082
	         *                                                                                                            // 13083
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 13084
	         *                                                                                                            // 13085
	         * @example                                                                                                   // 13086
	         *                                                                                                            // 13087
	         *     var rotated = x64Word.rotR(7);                                                                         // 13088
	         */                                                                                                           // 13089
	        // rotR: function (n) {                                                                                       // 13090
	            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 13091
	        // },                                                                                                         // 13092
                                                                                                                       // 13093
	        /**                                                                                                           // 13094
	         * Adds this word with the passed word.                                                                       // 13095
	         *                                                                                                            // 13096
	         * @param {X64Word} word The x64-Word to add with this word.                                                  // 13097
	         *                                                                                                            // 13098
	         * @return {X64Word} A new x64-Word object after adding.                                                      // 13099
	         *                                                                                                            // 13100
	         * @example                                                                                                   // 13101
	         *                                                                                                            // 13102
	         *     var added = x64Word.add(anotherX64Word);                                                               // 13103
	         */                                                                                                           // 13104
	        // add: function (word) {                                                                                     // 13105
	            // var low = (this.low + word.low) | 0;                                                                   // 13106
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 13107
	            // var high = (this.high + word.high + carry) | 0;                                                        // 13108
                                                                                                                       // 13109
	            // return X64Word.create(high, low);                                                                      // 13110
	        // }                                                                                                          // 13111
	    });                                                                                                               // 13112
                                                                                                                       // 13113
	    /**                                                                                                               // 13114
	     * An array of 64-bit words.                                                                                      // 13115
	     *                                                                                                                // 13116
	     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 13117
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 13118
	     */                                                                                                               // 13119
	    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 13120
	        /**                                                                                                           // 13121
	         * Initializes a newly created word array.                                                                    // 13122
	         *                                                                                                            // 13123
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 13124
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 13125
	         *                                                                                                            // 13126
	         * @example                                                                                                   // 13127
	         *                                                                                                            // 13128
	         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 13129
	         *                                                                                                            // 13130
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 13131
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 13132
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 13133
	         *     ]);                                                                                                    // 13134
	         *                                                                                                            // 13135
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 13136
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 13137
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 13138
	         *     ], 10);                                                                                                // 13139
	         */                                                                                                           // 13140
	        init: function (words, sigBytes) {                                                                            // 13141
	            words = this.words = words || [];                                                                         // 13142
                                                                                                                       // 13143
	            if (sigBytes != undefined) {                                                                              // 13144
	                this.sigBytes = sigBytes;                                                                             // 13145
	            } else {                                                                                                  // 13146
	                this.sigBytes = words.length * 8;                                                                     // 13147
	            }                                                                                                         // 13148
	        },                                                                                                            // 13149
                                                                                                                       // 13150
	        /**                                                                                                           // 13151
	         * Converts this 64-bit word array to a 32-bit word array.                                                    // 13152
	         *                                                                                                            // 13153
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 13154
	         *                                                                                                            // 13155
	         * @example                                                                                                   // 13156
	         *                                                                                                            // 13157
	         *     var x32WordArray = x64WordArray.toX32();                                                               // 13158
	         */                                                                                                           // 13159
	        toX32: function () {                                                                                          // 13160
	            // Shortcuts                                                                                              // 13161
	            var x64Words = this.words;                                                                                // 13162
	            var x64WordsLength = x64Words.length;                                                                     // 13163
                                                                                                                       // 13164
	            // Convert                                                                                                // 13165
	            var x32Words = [];                                                                                        // 13166
	            for (var i = 0; i < x64WordsLength; i++) {                                                                // 13167
	                var x64Word = x64Words[i];                                                                            // 13168
	                x32Words.push(x64Word.high);                                                                          // 13169
	                x32Words.push(x64Word.low);                                                                           // 13170
	            }                                                                                                         // 13171
                                                                                                                       // 13172
	            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 13173
	        },                                                                                                            // 13174
                                                                                                                       // 13175
	        /**                                                                                                           // 13176
	         * Creates a copy of this word array.                                                                         // 13177
	         *                                                                                                            // 13178
	         * @return {X64WordArray} The clone.                                                                          // 13179
	         *                                                                                                            // 13180
	         * @example                                                                                                   // 13181
	         *                                                                                                            // 13182
	         *     var clone = x64WordArray.clone();                                                                      // 13183
	         */                                                                                                           // 13184
	        clone: function () {                                                                                          // 13185
	            var clone = Base.clone.call(this);                                                                        // 13186
                                                                                                                       // 13187
	            // Clone "words" array                                                                                    // 13188
	            var words = clone.words = this.words.slice(0);                                                            // 13189
                                                                                                                       // 13190
	            // Clone each X64Word object                                                                              // 13191
	            var wordsLength = words.length;                                                                           // 13192
	            for (var i = 0; i < wordsLength; i++) {                                                                   // 13193
	                words[i] = words[i].clone();                                                                          // 13194
	            }                                                                                                         // 13195
                                                                                                                       // 13196
	            return clone;                                                                                             // 13197
	        }                                                                                                             // 13198
	    });                                                                                                               // 13199
	}());                                                                                                                 // 13200
                                                                                                                       // 13201
                                                                                                                       // 13202
	return CryptoJS;                                                                                                      // 13203
                                                                                                                       // 13204
}));                                                                                                                   // 13205
},{"./core":53}],85:[function(require,module,exports){                                                                 // 13206
/*! https://mths.be/utf8js v2.1.2 by @mathias */                                                                       // 13207
;(function(root) {                                                                                                     // 13208
                                                                                                                       // 13209
	// Detect free variables `exports`                                                                                    // 13210
	var freeExports = typeof exports == 'object' && exports;                                                              // 13211
                                                                                                                       // 13212
	// Detect free variable `module`                                                                                      // 13213
	var freeModule = typeof module == 'object' && module &&                                                               // 13214
		module.exports == freeExports && module;                                                                             // 13215
                                                                                                                       // 13216
	// Detect free variable `global`, from Node.js or Browserified code,                                                  // 13217
	// and use it as `root`                                                                                               // 13218
	var freeGlobal = typeof global == 'object' && global;                                                                 // 13219
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 13220
		root = freeGlobal;                                                                                                   // 13221
	}                                                                                                                     // 13222
                                                                                                                       // 13223
	/*--------------------------------------------------------------------------*/                                        // 13224
                                                                                                                       // 13225
	var stringFromCharCode = String.fromCharCode;                                                                         // 13226
                                                                                                                       // 13227
	// Taken from https://mths.be/punycode                                                                                // 13228
	function ucs2decode(string) {                                                                                         // 13229
		var output = [];                                                                                                     // 13230
		var counter = 0;                                                                                                     // 13231
		var length = string.length;                                                                                          // 13232
		var value;                                                                                                           // 13233
		var extra;                                                                                                           // 13234
		while (counter < length) {                                                                                           // 13235
			value = string.charCodeAt(counter++);                                                                               // 13236
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 13237
				// high surrogate, and there is a next character                                                                   // 13238
				extra = string.charCodeAt(counter++);                                                                              // 13239
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 13240
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 13241
				} else {                                                                                                           // 13242
					// unmatched surrogate; only append this code unit, in case the next                                              // 13243
					// code unit is the high surrogate of a surrogate pair                                                            // 13244
					output.push(value);                                                                                               // 13245
					counter--;                                                                                                        // 13246
				}                                                                                                                  // 13247
			} else {                                                                                                            // 13248
				output.push(value);                                                                                                // 13249
			}                                                                                                                   // 13250
		}                                                                                                                    // 13251
		return output;                                                                                                       // 13252
	}                                                                                                                     // 13253
                                                                                                                       // 13254
	// Taken from https://mths.be/punycode                                                                                // 13255
	function ucs2encode(array) {                                                                                          // 13256
		var length = array.length;                                                                                           // 13257
		var index = -1;                                                                                                      // 13258
		var value;                                                                                                           // 13259
		var output = '';                                                                                                     // 13260
		while (++index < length) {                                                                                           // 13261
			value = array[index];                                                                                               // 13262
			if (value > 0xFFFF) {                                                                                               // 13263
				value -= 0x10000;                                                                                                  // 13264
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 13265
				value = 0xDC00 | value & 0x3FF;                                                                                    // 13266
			}                                                                                                                   // 13267
			output += stringFromCharCode(value);                                                                                // 13268
		}                                                                                                                    // 13269
		return output;                                                                                                       // 13270
	}                                                                                                                     // 13271
                                                                                                                       // 13272
	function checkScalarValue(codePoint) {                                                                                // 13273
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 13274
			throw Error(                                                                                                        // 13275
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 13276
				' is not a scalar value'                                                                                           // 13277
			);                                                                                                                  // 13278
		}                                                                                                                    // 13279
	}                                                                                                                     // 13280
	/*--------------------------------------------------------------------------*/                                        // 13281
                                                                                                                       // 13282
	function createByte(codePoint, shift) {                                                                               // 13283
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 13284
	}                                                                                                                     // 13285
                                                                                                                       // 13286
	function encodeCodePoint(codePoint) {                                                                                 // 13287
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 13288
			return stringFromCharCode(codePoint);                                                                               // 13289
		}                                                                                                                    // 13290
		var symbol = '';                                                                                                     // 13291
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 13292
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 13293
		}                                                                                                                    // 13294
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 13295
			checkScalarValue(codePoint);                                                                                        // 13296
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 13297
			symbol += createByte(codePoint, 6);                                                                                 // 13298
		}                                                                                                                    // 13299
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 13300
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 13301
			symbol += createByte(codePoint, 12);                                                                                // 13302
			symbol += createByte(codePoint, 6);                                                                                 // 13303
		}                                                                                                                    // 13304
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 13305
		return symbol;                                                                                                       // 13306
	}                                                                                                                     // 13307
                                                                                                                       // 13308
	function utf8encode(string) {                                                                                         // 13309
		var codePoints = ucs2decode(string);                                                                                 // 13310
		var length = codePoints.length;                                                                                      // 13311
		var index = -1;                                                                                                      // 13312
		var codePoint;                                                                                                       // 13313
		var byteString = '';                                                                                                 // 13314
		while (++index < length) {                                                                                           // 13315
			codePoint = codePoints[index];                                                                                      // 13316
			byteString += encodeCodePoint(codePoint);                                                                           // 13317
		}                                                                                                                    // 13318
		return byteString;                                                                                                   // 13319
	}                                                                                                                     // 13320
                                                                                                                       // 13321
	/*--------------------------------------------------------------------------*/                                        // 13322
                                                                                                                       // 13323
	function readContinuationByte() {                                                                                     // 13324
		if (byteIndex >= byteCount) {                                                                                        // 13325
			throw Error('Invalid byte index');                                                                                  // 13326
		}                                                                                                                    // 13327
                                                                                                                       // 13328
		var continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 13329
		byteIndex++;                                                                                                         // 13330
                                                                                                                       // 13331
		if ((continuationByte & 0xC0) == 0x80) {                                                                             // 13332
			return continuationByte & 0x3F;                                                                                     // 13333
		}                                                                                                                    // 13334
                                                                                                                       // 13335
		// If we end up here, it’s not a continuation byte                                                                   // 13336
		throw Error('Invalid continuation byte');                                                                            // 13337
	}                                                                                                                     // 13338
                                                                                                                       // 13339
	function decodeSymbol() {                                                                                             // 13340
		var byte1;                                                                                                           // 13341
		var byte2;                                                                                                           // 13342
		var byte3;                                                                                                           // 13343
		var byte4;                                                                                                           // 13344
		var codePoint;                                                                                                       // 13345
                                                                                                                       // 13346
		if (byteIndex > byteCount) {                                                                                         // 13347
			throw Error('Invalid byte index');                                                                                  // 13348
		}                                                                                                                    // 13349
                                                                                                                       // 13350
		if (byteIndex == byteCount) {                                                                                        // 13351
			return false;                                                                                                       // 13352
		}                                                                                                                    // 13353
                                                                                                                       // 13354
		// Read first byte                                                                                                   // 13355
		byte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 13356
		byteIndex++;                                                                                                         // 13357
                                                                                                                       // 13358
		// 1-byte sequence (no continuation bytes)                                                                           // 13359
		if ((byte1 & 0x80) == 0) {                                                                                           // 13360
			return byte1;                                                                                                       // 13361
		}                                                                                                                    // 13362
                                                                                                                       // 13363
		// 2-byte sequence                                                                                                   // 13364
		if ((byte1 & 0xE0) == 0xC0) {                                                                                        // 13365
			byte2 = readContinuationByte();                                                                                     // 13366
			codePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 13367
			if (codePoint >= 0x80) {                                                                                            // 13368
				return codePoint;                                                                                                  // 13369
			} else {                                                                                                            // 13370
				throw Error('Invalid continuation byte');                                                                          // 13371
			}                                                                                                                   // 13372
		}                                                                                                                    // 13373
                                                                                                                       // 13374
		// 3-byte sequence (may include unpaired surrogates)                                                                 // 13375
		if ((byte1 & 0xF0) == 0xE0) {                                                                                        // 13376
			byte2 = readContinuationByte();                                                                                     // 13377
			byte3 = readContinuationByte();                                                                                     // 13378
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 13379
			if (codePoint >= 0x0800) {                                                                                          // 13380
				checkScalarValue(codePoint);                                                                                       // 13381
				return codePoint;                                                                                                  // 13382
			} else {                                                                                                            // 13383
				throw Error('Invalid continuation byte');                                                                          // 13384
			}                                                                                                                   // 13385
		}                                                                                                                    // 13386
                                                                                                                       // 13387
		// 4-byte sequence                                                                                                   // 13388
		if ((byte1 & 0xF8) == 0xF0) {                                                                                        // 13389
			byte2 = readContinuationByte();                                                                                     // 13390
			byte3 = readContinuationByte();                                                                                     // 13391
			byte4 = readContinuationByte();                                                                                     // 13392
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |                                                            // 13393
				(byte3 << 0x06) | byte4;                                                                                           // 13394
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 13395
				return codePoint;                                                                                                  // 13396
			}                                                                                                                   // 13397
		}                                                                                                                    // 13398
                                                                                                                       // 13399
		throw Error('Invalid UTF-8 detected');                                                                               // 13400
	}                                                                                                                     // 13401
                                                                                                                       // 13402
	var byteArray;                                                                                                        // 13403
	var byteCount;                                                                                                        // 13404
	var byteIndex;                                                                                                        // 13405
	function utf8decode(byteString) {                                                                                     // 13406
		byteArray = ucs2decode(byteString);                                                                                  // 13407
		byteCount = byteArray.length;                                                                                        // 13408
		byteIndex = 0;                                                                                                       // 13409
		var codePoints = [];                                                                                                 // 13410
		var tmp;                                                                                                             // 13411
		while ((tmp = decodeSymbol()) !== false) {                                                                           // 13412
			codePoints.push(tmp);                                                                                               // 13413
		}                                                                                                                    // 13414
		return ucs2encode(codePoints);                                                                                       // 13415
	}                                                                                                                     // 13416
                                                                                                                       // 13417
	/*--------------------------------------------------------------------------*/                                        // 13418
                                                                                                                       // 13419
	var utf8 = {                                                                                                          // 13420
		'version': '2.1.2',                                                                                                  // 13421
		'encode': utf8encode,                                                                                                // 13422
		'decode': utf8decode                                                                                                 // 13423
	};                                                                                                                    // 13424
                                                                                                                       // 13425
	// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 13426
	// like the following:                                                                                                // 13427
	if (                                                                                                                  // 13428
		typeof define == 'function' &&                                                                                       // 13429
		typeof define.amd == 'object' &&                                                                                     // 13430
		define.amd                                                                                                           // 13431
	) {                                                                                                                   // 13432
		define(function() {                                                                                                  // 13433
			return utf8;                                                                                                        // 13434
		});                                                                                                                  // 13435
	}	else if (freeExports && !freeExports.nodeType) {                                                                    // 13436
		if (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 13437
			freeModule.exports = utf8;                                                                                          // 13438
		} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 13439
			var object = {};                                                                                                    // 13440
			var hasOwnProperty = object.hasOwnProperty;                                                                         // 13441
			for (var key in utf8) {                                                                                             // 13442
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 13443
			}                                                                                                                   // 13444
		}                                                                                                                    // 13445
	} else { // in Rhino or a web browser                                                                                 // 13446
		root.utf8 = utf8;                                                                                                    // 13447
	}                                                                                                                     // 13448
                                                                                                                       // 13449
}(this));                                                                                                              // 13450
                                                                                                                       // 13451
},{}],86:[function(require,module,exports){                                                                            // 13452
module.exports = XMLHttpRequest;                                                                                       // 13453
                                                                                                                       // 13454
},{}],"bignumber.js":[function(require,module,exports){                                                                // 13455
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 13456
                                                                                                                       // 13457
;(function (global) {                                                                                                  // 13458
    'use strict';                                                                                                      // 13459
                                                                                                                       // 13460
    /*                                                                                                                 // 13461
      bignumber.js v2.0.7                                                                                              // 13462
      A JavaScript library for arbitrary-precision arithmetic.                                                         // 13463
      https://github.com/MikeMcl/bignumber.js                                                                          // 13464
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 13465
      MIT Expat Licence                                                                                                // 13466
    */                                                                                                                 // 13467
                                                                                                                       // 13468
                                                                                                                       // 13469
    var BigNumber, crypto, parseNumeric,                                                                               // 13470
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                            // 13471
        mathceil = Math.ceil,                                                                                          // 13472
        mathfloor = Math.floor,                                                                                        // 13473
        notBool = ' not a boolean or binary digit',                                                                    // 13474
        roundingMode = 'rounding mode',                                                                                // 13475
        tooManyDigits = 'number type has more than 15 significant digits',                                             // 13476
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 13477
        BASE = 1e14,                                                                                                   // 13478
        LOG_BASE = 14,                                                                                                 // 13479
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 13480
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 13481
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 13482
        SQRT_BASE = 1e7,                                                                                               // 13483
                                                                                                                       // 13484
        /*                                                                                                             // 13485
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 13486
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 13487
         * exception is thrown (if ERRORS is true).                                                                    // 13488
         */                                                                                                            // 13489
        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 13490
                                                                                                                       // 13491
                                                                                                                       // 13492
    /*                                                                                                                 // 13493
     * Create and return a BigNumber constructor.                                                                      // 13494
     */                                                                                                                // 13495
    function another(configObj) {                                                                                      // 13496
        var div,                                                                                                       // 13497
                                                                                                                       // 13498
            // id tracks the caller function, so its name can be included in error messages.                           // 13499
            id = 0,                                                                                                    // 13500
            P = BigNumber.prototype,                                                                                   // 13501
            ONE = new BigNumber(1),                                                                                    // 13502
                                                                                                                       // 13503
                                                                                                                       // 13504
            /********************************* EDITABLE DEFAULTS **********************************/                   // 13505
                                                                                                                       // 13506
                                                                                                                       // 13507
            /*                                                                                                         // 13508
             * The default values below must be integers within the inclusive ranges stated.                           // 13509
             * The values can also be changed at run-time using BigNumber.config.                                      // 13510
             */                                                                                                        // 13511
                                                                                                                       // 13512
            // The maximum number of decimal places for operations involving division.                                 // 13513
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 13514
                                                                                                                       // 13515
            /*                                                                                                         // 13516
             * The rounding mode used when rounding to the above decimal places, and when using                        // 13517
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 13518
             * UP         0 Away from zero.                                                                            // 13519
             * DOWN       1 Towards zero.                                                                              // 13520
             * CEIL       2 Towards +Infinity.                                                                         // 13521
             * FLOOR      3 Towards -Infinity.                                                                         // 13522
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 13523
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 13524
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 13525
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 13526
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 13527
             */                                                                                                        // 13528
            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 13529
                                                                                                                       // 13530
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 13531
                                                                                                                       // 13532
            // The exponent value at and beneath which toString returns exponential notation.                          // 13533
            // Number type: -7                                                                                         // 13534
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 13535
                                                                                                                       // 13536
            // The exponent value at and above which toString returns exponential notation.                            // 13537
            // Number type: 21                                                                                         // 13538
            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 13539
                                                                                                                       // 13540
            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 13541
                                                                                                                       // 13542
            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 13543
            // Number type: -324  (5e-324)                                                                             // 13544
            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 13545
                                                                                                                       // 13546
            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 13547
            // Number type:  308  (1.7976931348623157e+308)                                                            // 13548
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 13549
            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 13550
                                                                                                                       // 13551
            // Whether BigNumber Errors are ever thrown.                                                               // 13552
            ERRORS = true,                           // true or false                                                  // 13553
                                                                                                                       // 13554
            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 13555
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 13556
                                                                                                                       // 13557
            // Whether to use cryptographically-secure random number generation, if available.                         // 13558
            CRYPTO = false,                          // true or false                                                  // 13559
                                                                                                                       // 13560
            /*                                                                                                         // 13561
             * The modulo mode used when calculating the modulus: a mod n.                                             // 13562
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 13563
             * The remainder (r) is calculated as: r = a - n * q.                                                      // 13564
             *                                                                                                         // 13565
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 13566
             * DOWN      1 The remainder has the same sign as the dividend.                                            // 13567
             *             This modulo mode is commonly known as 'truncated division' and is                           // 13568
             *             equivalent to (a % n) in JavaScript.                                                        // 13569
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 13570
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 13571
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 13572
             *             The remainder is always positive.                                                           // 13573
             *                                                                                                         // 13574
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 13575
             * modes are commonly used for the modulus operation.                                                      // 13576
             * Although the other rounding modes can also be used, they may not give useful results.                   // 13577
             */                                                                                                        // 13578
            MODULO_MODE = 1,                         // 0 to 9                                                         // 13579
                                                                                                                       // 13580
            // The maximum number of significant digits of the result of the toPower operation.                        // 13581
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 13582
            POW_PRECISION = 100,                     // 0 to MAX                                                       // 13583
                                                                                                                       // 13584
            // The format specification used by the BigNumber.prototype.toFormat method.                               // 13585
            FORMAT = {                                                                                                 // 13586
                decimalSeparator: '.',                                                                                 // 13587
                groupSeparator: ',',                                                                                   // 13588
                groupSize: 3,                                                                                          // 13589
                secondaryGroupSize: 0,                                                                                 // 13590
                fractionGroupSeparator: '\xA0',      // non-breaking space                                             // 13591
                fractionGroupSize: 0                                                                                   // 13592
            };                                                                                                         // 13593
                                                                                                                       // 13594
                                                                                                                       // 13595
        /******************************************************************************************/                   // 13596
                                                                                                                       // 13597
                                                                                                                       // 13598
        // CONSTRUCTOR                                                                                                 // 13599
                                                                                                                       // 13600
                                                                                                                       // 13601
        /*                                                                                                             // 13602
         * The BigNumber constructor and exported function.                                                            // 13603
         * Create and return a new instance of a BigNumber object.                                                     // 13604
         *                                                                                                             // 13605
         * n {number|string|BigNumber} A numeric value.                                                                // 13606
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 13607
         */                                                                                                            // 13608
        function BigNumber( n, b ) {                                                                                   // 13609
            var c, e, i, num, len, str,                                                                                // 13610
                x = this;                                                                                              // 13611
                                                                                                                       // 13612
            // Enable constructor usage without new.                                                                   // 13613
            if ( !( x instanceof BigNumber ) ) {                                                                       // 13614
                                                                                                                       // 13615
                // 'BigNumber() constructor call without new: {n}'                                                     // 13616
                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 13617
                return new BigNumber( n, b );                                                                          // 13618
            }                                                                                                          // 13619
                                                                                                                       // 13620
            // 'new BigNumber() base not an integer: {b}'                                                              // 13621
            // 'new BigNumber() base out of range: {b}'                                                                // 13622
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 13623
                                                                                                                       // 13624
                // Duplicate.                                                                                          // 13625
                if ( n instanceof BigNumber ) {                                                                        // 13626
                    x.s = n.s;                                                                                         // 13627
                    x.e = n.e;                                                                                         // 13628
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 13629
                    id = 0;                                                                                            // 13630
                    return;                                                                                            // 13631
                }                                                                                                      // 13632
                                                                                                                       // 13633
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 13634
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 13635
                                                                                                                       // 13636
                    // Fast path for integers.                                                                         // 13637
                    if ( n === ~~n ) {                                                                                 // 13638
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 13639
                        x.e = e;                                                                                       // 13640
                        x.c = [n];                                                                                     // 13641
                        id = 0;                                                                                        // 13642
                        return;                                                                                        // 13643
                    }                                                                                                  // 13644
                                                                                                                       // 13645
                    str = n + '';                                                                                      // 13646
                } else {                                                                                               // 13647
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 13648
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13649
                }                                                                                                      // 13650
            } else {                                                                                                   // 13651
                b = b | 0;                                                                                             // 13652
                str = n + '';                                                                                          // 13653
                                                                                                                       // 13654
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 13655
                // Allow exponential notation to be used with base 10 argument.                                        // 13656
                if ( b == 10 ) {                                                                                       // 13657
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 13658
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 13659
                }                                                                                                      // 13660
                                                                                                                       // 13661
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 13662
                // Any number in exponential form will fail due to the [Ee][+-].                                       // 13663
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 13664
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 13665
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 13666
                    return parseNumeric( x, str, num, b );                                                             // 13667
                }                                                                                                      // 13668
                                                                                                                       // 13669
                if (num) {                                                                                             // 13670
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 13671
                                                                                                                       // 13672
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                      // 13673
                                                                                                                       // 13674
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 13675
                        raise( id, tooManyDigits, n );                                                                 // 13676
                    }                                                                                                  // 13677
                                                                                                                       // 13678
                    // Prevent later check for length on converted number.                                             // 13679
                    num = false;                                                                                       // 13680
                } else {                                                                                               // 13681
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13682
                }                                                                                                      // 13683
                                                                                                                       // 13684
                str = convertBase( str, 10, b, x.s );                                                                  // 13685
            }                                                                                                          // 13686
                                                                                                                       // 13687
            // Decimal point?                                                                                          // 13688
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 13689
                                                                                                                       // 13690
            // Exponential form?                                                                                       // 13691
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 13692
                                                                                                                       // 13693
                // Determine exponent.                                                                                 // 13694
                if ( e < 0 ) e = i;                                                                                    // 13695
                e += +str.slice( i + 1 );                                                                              // 13696
                str = str.substring( 0, i );                                                                           // 13697
            } else if ( e < 0 ) {                                                                                      // 13698
                                                                                                                       // 13699
                // Integer.                                                                                            // 13700
                e = str.length;                                                                                        // 13701
            }                                                                                                          // 13702
                                                                                                                       // 13703
            // Determine leading zeros.                                                                                // 13704
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 13705
                                                                                                                       // 13706
            // Determine trailing zeros.                                                                               // 13707
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 13708
            str = str.slice( i, len + 1 );                                                                             // 13709
                                                                                                                       // 13710
            if (str) {                                                                                                 // 13711
                len = str.length;                                                                                      // 13712
                                                                                                                       // 13713
                // Disallow numbers with over 15 significant digits if number type.                                    // 13714
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 13715
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                  // 13716
                                                                                                                       // 13717
                e = e - i - 1;                                                                                         // 13718
                                                                                                                       // 13719
                 // Overflow?                                                                                          // 13720
                if ( e > MAX_EXP ) {                                                                                   // 13721
                                                                                                                       // 13722
                    // Infinity.                                                                                       // 13723
                    x.c = x.e = null;                                                                                  // 13724
                                                                                                                       // 13725
                // Underflow?                                                                                          // 13726
                } else if ( e < MIN_EXP ) {                                                                            // 13727
                                                                                                                       // 13728
                    // Zero.                                                                                           // 13729
                    x.c = [ x.e = 0 ];                                                                                 // 13730
                } else {                                                                                               // 13731
                    x.e = e;                                                                                           // 13732
                    x.c = [];                                                                                          // 13733
                                                                                                                       // 13734
                    // Transform base                                                                                  // 13735
                                                                                                                       // 13736
                    // e is the base 10 exponent.                                                                      // 13737
                    // i is where to slice str to get the first element of the coefficient array.                      // 13738
                    i = ( e + 1 ) % LOG_BASE;                                                                          // 13739
                    if ( e < 0 ) i += LOG_BASE;                                                                        // 13740
                                                                                                                       // 13741
                    if ( i < len ) {                                                                                   // 13742
                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 13743
                                                                                                                       // 13744
                        for ( len -= LOG_BASE; i < len; ) {                                                            // 13745
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 13746
                        }                                                                                              // 13747
                                                                                                                       // 13748
                        str = str.slice(i);                                                                            // 13749
                        i = LOG_BASE - str.length;                                                                     // 13750
                    } else {                                                                                           // 13751
                        i -= len;                                                                                      // 13752
                    }                                                                                                  // 13753
                                                                                                                       // 13754
                    for ( ; i--; str += '0' );                                                                         // 13755
                    x.c.push( +str );                                                                                  // 13756
                }                                                                                                      // 13757
            } else {                                                                                                   // 13758
                                                                                                                       // 13759
                // Zero.                                                                                               // 13760
                x.c = [ x.e = 0 ];                                                                                     // 13761
            }                                                                                                          // 13762
                                                                                                                       // 13763
            id = 0;                                                                                                    // 13764
        }                                                                                                              // 13765
                                                                                                                       // 13766
                                                                                                                       // 13767
        // CONSTRUCTOR PROPERTIES                                                                                      // 13768
                                                                                                                       // 13769
                                                                                                                       // 13770
        BigNumber.another = another;                                                                                   // 13771
                                                                                                                       // 13772
        BigNumber.ROUND_UP = 0;                                                                                        // 13773
        BigNumber.ROUND_DOWN = 1;                                                                                      // 13774
        BigNumber.ROUND_CEIL = 2;                                                                                      // 13775
        BigNumber.ROUND_FLOOR = 3;                                                                                     // 13776
        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 13777
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 13778
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 13779
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 13780
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 13781
        BigNumber.EUCLID = 9;                                                                                          // 13782
                                                                                                                       // 13783
                                                                                                                       // 13784
        /*                                                                                                             // 13785
         * Configure infrequently-changing library-wide settings.                                                      // 13786
         *                                                                                                             // 13787
         * Accept an object or an argument list, with one or many of the following properties or                       // 13788
         * parameters respectively:                                                                                    // 13789
         *                                                                                                             // 13790
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 13791
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 13792
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 13793
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 13794
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 13795
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 13796
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 13797
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 13798
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 13799
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 13800
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 13801
         *      decimalSeparator       {string}                                                                        // 13802
         *      groupSeparator         {string}                                                                        // 13803
         *      groupSize              {number}                                                                        // 13804
         *      secondaryGroupSize     {number}                                                                        // 13805
         *      fractionGroupSeparator {string}                                                                        // 13806
         *      fractionGroupSize      {number}                                                                        // 13807
         *                                                                                                             // 13808
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 13809
         *                                                                                                             // 13810
         * E.g.                                                                                                        // 13811
         * BigNumber.config(20, 4) is equivalent to                                                                    // 13812
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 13813
         *                                                                                                             // 13814
         * Ignore properties/parameters set to null or undefined.                                                      // 13815
         * Return an object with the properties current values.                                                        // 13816
         */                                                                                                            // 13817
        BigNumber.config = function () {                                                                               // 13818
            var v, p,                                                                                                  // 13819
                i = 0,                                                                                                 // 13820
                r = {},                                                                                                // 13821
                a = arguments,                                                                                         // 13822
                o = a[0],                                                                                              // 13823
                has = o && typeof o == 'object'                                                                        // 13824
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 13825
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 13826
                                                                                                                       // 13827
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 13828
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 13829
            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 13830
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 13831
                DECIMAL_PLACES = v | 0;                                                                                // 13832
            }                                                                                                          // 13833
            r[p] = DECIMAL_PLACES;                                                                                     // 13834
                                                                                                                       // 13835
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 13836
            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 13837
            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 13838
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 13839
                ROUNDING_MODE = v | 0;                                                                                 // 13840
            }                                                                                                          // 13841
            r[p] = ROUNDING_MODE;                                                                                      // 13842
                                                                                                                       // 13843
            // EXPONENTIAL_AT {number|number[]}                                                                        // 13844
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 13845
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 13846
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 13847
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 13848
                                                                                                                       // 13849
                if ( isArray(v) ) {                                                                                    // 13850
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 13851
                        TO_EXP_NEG = v[0] | 0;                                                                         // 13852
                        TO_EXP_POS = v[1] | 0;                                                                         // 13853
                    }                                                                                                  // 13854
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13855
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 13856
                }                                                                                                      // 13857
            }                                                                                                          // 13858
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 13859
                                                                                                                       // 13860
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 13861
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 13862
            // 'config() RANGE not an integer: {v}'                                                                    // 13863
            // 'config() RANGE cannot be zero: {v}'                                                                    // 13864
            // 'config() RANGE out of range: {v}'                                                                      // 13865
            if ( has( p = 'RANGE' ) ) {                                                                                // 13866
                                                                                                                       // 13867
                if ( isArray(v) ) {                                                                                    // 13868
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 13869
                        MIN_EXP = v[0] | 0;                                                                            // 13870
                        MAX_EXP = v[1] | 0;                                                                            // 13871
                    }                                                                                                  // 13872
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13873
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 13874
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 13875
                }                                                                                                      // 13876
            }                                                                                                          // 13877
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 13878
                                                                                                                       // 13879
            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 13880
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 13881
            if ( has( p = 'ERRORS' ) ) {                                                                               // 13882
                                                                                                                       // 13883
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13884
                    id = 0;                                                                                            // 13885
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 13886
                } else if (ERRORS) {                                                                                   // 13887
                    raise( 2, p + notBool, v );                                                                        // 13888
                }                                                                                                      // 13889
            }                                                                                                          // 13890
            r[p] = ERRORS;                                                                                             // 13891
                                                                                                                       // 13892
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 13893
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 13894
            // 'config() crypto unavailable: {crypto}'                                                                 // 13895
            if ( has( p = 'CRYPTO' ) ) {                                                                               // 13896
                                                                                                                       // 13897
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13898
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                           // 13899
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                            // 13900
                } else if (ERRORS) {                                                                                   // 13901
                    raise( 2, p + notBool, v );                                                                        // 13902
                }                                                                                                      // 13903
            }                                                                                                          // 13904
            r[p] = CRYPTO;                                                                                             // 13905
                                                                                                                       // 13906
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 13907
            // 'config() MODULO_MODE not an integer: {v}'                                                              // 13908
            // 'config() MODULO_MODE out of range: {v}'                                                                // 13909
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 13910
                MODULO_MODE = v | 0;                                                                                   // 13911
            }                                                                                                          // 13912
            r[p] = MODULO_MODE;                                                                                        // 13913
                                                                                                                       // 13914
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 13915
            // 'config() POW_PRECISION not an integer: {v}'                                                            // 13916
            // 'config() POW_PRECISION out of range: {v}'                                                              // 13917
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 13918
                POW_PRECISION = v | 0;                                                                                 // 13919
            }                                                                                                          // 13920
            r[p] = POW_PRECISION;                                                                                      // 13921
                                                                                                                       // 13922
            // FORMAT {object}                                                                                         // 13923
            // 'config() FORMAT not an object: {v}'                                                                    // 13924
            if ( has( p = 'FORMAT' ) ) {                                                                               // 13925
                                                                                                                       // 13926
                if ( typeof v == 'object' ) {                                                                          // 13927
                    FORMAT = v;                                                                                        // 13928
                } else if (ERRORS) {                                                                                   // 13929
                    raise( 2, p + ' not an object', v );                                                               // 13930
                }                                                                                                      // 13931
            }                                                                                                          // 13932
            r[p] = FORMAT;                                                                                             // 13933
                                                                                                                       // 13934
            return r;                                                                                                  // 13935
        };                                                                                                             // 13936
                                                                                                                       // 13937
                                                                                                                       // 13938
        /*                                                                                                             // 13939
         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 13940
         *                                                                                                             // 13941
         * arguments {number|string|BigNumber}                                                                         // 13942
         */                                                                                                            // 13943
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 13944
                                                                                                                       // 13945
                                                                                                                       // 13946
        /*                                                                                                             // 13947
         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 13948
         *                                                                                                             // 13949
         * arguments {number|string|BigNumber}                                                                         // 13950
         */                                                                                                            // 13951
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 13952
                                                                                                                       // 13953
                                                                                                                       // 13954
        /*                                                                                                             // 13955
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 13956
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 13957
         * zeros are produced).                                                                                        // 13958
         *                                                                                                             // 13959
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 13960
         *                                                                                                             // 13961
         * 'random() decimal places not an integer: {dp}'                                                              // 13962
         * 'random() decimal places out of range: {dp}'                                                                // 13963
         * 'random() crypto unavailable: {crypto}'                                                                     // 13964
         */                                                                                                            // 13965
        BigNumber.random = (function () {                                                                              // 13966
            var pow2_53 = 0x20000000000000;                                                                            // 13967
                                                                                                                       // 13968
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 13969
            // Check if Math.random() produces more than 32 bits of randomness.                                        // 13970
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 13971
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 13972
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 13973
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 13974
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 13975
                  (Math.random() * 0x800000 | 0); };                                                                   // 13976
                                                                                                                       // 13977
            return function (dp) {                                                                                     // 13978
                var a, b, e, k, v,                                                                                     // 13979
                    i = 0,                                                                                             // 13980
                    c = [],                                                                                            // 13981
                    rand = new BigNumber(ONE);                                                                         // 13982
                                                                                                                       // 13983
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 13984
                k = mathceil( dp / LOG_BASE );                                                                         // 13985
                                                                                                                       // 13986
                if (CRYPTO) {                                                                                          // 13987
                                                                                                                       // 13988
                    // Browsers supporting crypto.getRandomValues.                                                     // 13989
                    if ( crypto && crypto.getRandomValues ) {                                                          // 13990
                                                                                                                       // 13991
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 13992
                                                                                                                       // 13993
                        for ( ; i < k; ) {                                                                             // 13994
                                                                                                                       // 13995
                            // 53 bits:                                                                                // 13996
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 13997
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 13998
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 13999
                            //                                     11111 11111111 11111111                             // 14000
                            // 0x20000 is 2^21.                                                                        // 14001
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 14002
                                                                                                                       // 14003
                            // Rejection sampling:                                                                     // 14004
                            // 0 <= v < 9007199254740992                                                               // 14005
                            // Probability that v >= 9e15, is                                                          // 14006
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 14007
                            if ( v >= 9e15 ) {                                                                         // 14008
                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 14009
                                a[i] = b[0];                                                                           // 14010
                                a[i + 1] = b[1];                                                                       // 14011
                            } else {                                                                                   // 14012
                                                                                                                       // 14013
                                // 0 <= v <= 8999999999999999                                                          // 14014
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 14015
                                c.push( v % 1e14 );                                                                    // 14016
                                i += 2;                                                                                // 14017
                            }                                                                                          // 14018
                        }                                                                                              // 14019
                        i = k / 2;                                                                                     // 14020
                                                                                                                       // 14021
                    // Node.js supporting crypto.randomBytes.                                                          // 14022
                    } else if ( crypto && crypto.randomBytes ) {                                                       // 14023
                                                                                                                       // 14024
                        // buffer                                                                                      // 14025
                        a = crypto.randomBytes( k *= 7 );                                                              // 14026
                                                                                                                       // 14027
                        for ( ; i < k; ) {                                                                             // 14028
                                                                                                                       // 14029
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 14030
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 14031
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 14032
                            // 0 <= v < 9007199254740992                                                               // 14033
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 14034
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 14035
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 14036
                                                                                                                       // 14037
                            if ( v >= 9e15 ) {                                                                         // 14038
                                crypto.randomBytes(7).copy( a, i );                                                    // 14039
                            } else {                                                                                   // 14040
                                                                                                                       // 14041
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 14042
                                c.push( v % 1e14 );                                                                    // 14043
                                i += 7;                                                                                // 14044
                            }                                                                                          // 14045
                        }                                                                                              // 14046
                        i = k / 7;                                                                                     // 14047
                    } else if (ERRORS) {                                                                               // 14048
                        raise( 14, 'crypto unavailable', crypto );                                                     // 14049
                    }                                                                                                  // 14050
                }                                                                                                      // 14051
                                                                                                                       // 14052
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                      // 14053
                if (!i) {                                                                                              // 14054
                                                                                                                       // 14055
                    for ( ; i < k; ) {                                                                                 // 14056
                        v = random53bitInt();                                                                          // 14057
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 14058
                    }                                                                                                  // 14059
                }                                                                                                      // 14060
                                                                                                                       // 14061
                k = c[--i];                                                                                            // 14062
                dp %= LOG_BASE;                                                                                        // 14063
                                                                                                                       // 14064
                // Convert trailing digits to zeros according to dp.                                                   // 14065
                if ( k && dp ) {                                                                                       // 14066
                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 14067
                    c[i] = mathfloor( k / v ) * v;                                                                     // 14068
                }                                                                                                      // 14069
                                                                                                                       // 14070
                // Remove trailing elements which are zero.                                                            // 14071
                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 14072
                                                                                                                       // 14073
                // Zero?                                                                                               // 14074
                if ( i < 0 ) {                                                                                         // 14075
                    c = [ e = 0 ];                                                                                     // 14076
                } else {                                                                                               // 14077
                                                                                                                       // 14078
                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 14079
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 14080
                                                                                                                       // 14081
                    // Count the digits of the first element of c to determine leading zeros, and...                   // 14082
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 14083
                                                                                                                       // 14084
                    // adjust the exponent accordingly.                                                                // 14085
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 14086
                }                                                                                                      // 14087
                                                                                                                       // 14088
                rand.e = e;                                                                                            // 14089
                rand.c = c;                                                                                            // 14090
                return rand;                                                                                           // 14091
            };                                                                                                         // 14092
        })();                                                                                                          // 14093
                                                                                                                       // 14094
                                                                                                                       // 14095
        // PRIVATE FUNCTIONS                                                                                           // 14096
                                                                                                                       // 14097
                                                                                                                       // 14098
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 14099
        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 14100
            var d, e, k, r, x, xc, y,                                                                                  // 14101
                i = str.indexOf( '.' ),                                                                                // 14102
                dp = DECIMAL_PLACES,                                                                                   // 14103
                rm = ROUNDING_MODE;                                                                                    // 14104
                                                                                                                       // 14105
            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 14106
                                                                                                                       // 14107
            // Non-integer.                                                                                            // 14108
            if ( i >= 0 ) {                                                                                            // 14109
                k = POW_PRECISION;                                                                                     // 14110
                                                                                                                       // 14111
                // Unlimited precision.                                                                                // 14112
                POW_PRECISION = 0;                                                                                     // 14113
                str = str.replace( '.', '' );                                                                          // 14114
                y = new BigNumber(baseIn);                                                                             // 14115
                x = y.pow( str.length - i );                                                                           // 14116
                POW_PRECISION = k;                                                                                     // 14117
                                                                                                                       // 14118
                // Convert str as if an integer, then restore the fraction part by dividing the                        // 14119
                // result by its base raised to a power.                                                               // 14120
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 14121
                y.e = y.c.length;                                                                                      // 14122
            }                                                                                                          // 14123
                                                                                                                       // 14124
            // Convert the number as integer.                                                                          // 14125
            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 14126
            e = k = xc.length;                                                                                         // 14127
                                                                                                                       // 14128
            // Remove trailing zeros.                                                                                  // 14129
            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 14130
            if ( !xc[0] ) return '0';                                                                                  // 14131
                                                                                                                       // 14132
            if ( i < 0 ) {                                                                                             // 14133
                --e;                                                                                                   // 14134
            } else {                                                                                                   // 14135
                x.c = xc;                                                                                              // 14136
                x.e = e;                                                                                               // 14137
                                                                                                                       // 14138
                // sign is needed for correct rounding.                                                                // 14139
                x.s = sign;                                                                                            // 14140
                x = div( x, y, dp, rm, baseOut );                                                                      // 14141
                xc = x.c;                                                                                              // 14142
                r = x.r;                                                                                               // 14143
                e = x.e;                                                                                               // 14144
            }                                                                                                          // 14145
                                                                                                                       // 14146
            d = e + dp + 1;                                                                                            // 14147
                                                                                                                       // 14148
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 14149
            i = xc[d];                                                                                                 // 14150
            k = baseOut / 2;                                                                                           // 14151
            r = r || d < 0 || xc[d + 1] != null;                                                                       // 14152
                                                                                                                       // 14153
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 14154
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 14155
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 14156
                                                                                                                       // 14157
            if ( d < 1 || !xc[0] ) {                                                                                   // 14158
                                                                                                                       // 14159
                // 1^-dp or 0.                                                                                         // 14160
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 14161
            } else {                                                                                                   // 14162
                xc.length = d;                                                                                         // 14163
                                                                                                                       // 14164
                if (r) {                                                                                               // 14165
                                                                                                                       // 14166
                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 14167
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 14168
                        xc[d] = 0;                                                                                     // 14169
                                                                                                                       // 14170
                        if ( !d ) {                                                                                    // 14171
                            ++e;                                                                                       // 14172
                            xc.unshift(1);                                                                             // 14173
                        }                                                                                              // 14174
                    }                                                                                                  // 14175
                }                                                                                                      // 14176
                                                                                                                       // 14177
                // Determine trailing zeros.                                                                           // 14178
                for ( k = xc.length; !xc[--k]; );                                                                      // 14179
                                                                                                                       // 14180
                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 14181
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 14182
                str = toFixedPoint( str, e );                                                                          // 14183
            }                                                                                                          // 14184
                                                                                                                       // 14185
            // The caller will add the sign.                                                                           // 14186
            return str;                                                                                                // 14187
        }                                                                                                              // 14188
                                                                                                                       // 14189
                                                                                                                       // 14190
        // Perform division in the specified base. Called by div and convertBase.                                      // 14191
        div = (function () {                                                                                           // 14192
                                                                                                                       // 14193
            // Assume non-zero x and k.                                                                                // 14194
            function multiply( x, k, base ) {                                                                          // 14195
                var m, temp, xlo, xhi,                                                                                 // 14196
                    carry = 0,                                                                                         // 14197
                    i = x.length,                                                                                      // 14198
                    klo = k % SQRT_BASE,                                                                               // 14199
                    khi = k / SQRT_BASE | 0;                                                                           // 14200
                                                                                                                       // 14201
                for ( x = x.slice(); i--; ) {                                                                          // 14202
                    xlo = x[i] % SQRT_BASE;                                                                            // 14203
                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 14204
                    m = khi * xlo + xhi * klo;                                                                         // 14205
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 14206
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 14207
                    x[i] = temp % base;                                                                                // 14208
                }                                                                                                      // 14209
                                                                                                                       // 14210
                if (carry) x.unshift(carry);                                                                           // 14211
                                                                                                                       // 14212
                return x;                                                                                              // 14213
            }                                                                                                          // 14214
                                                                                                                       // 14215
            function compare( a, b, aL, bL ) {                                                                         // 14216
                var i, cmp;                                                                                            // 14217
                                                                                                                       // 14218
                if ( aL != bL ) {                                                                                      // 14219
                    cmp = aL > bL ? 1 : -1;                                                                            // 14220
                } else {                                                                                               // 14221
                                                                                                                       // 14222
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 14223
                                                                                                                       // 14224
                        if ( a[i] != b[i] ) {                                                                          // 14225
                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 14226
                            break;                                                                                     // 14227
                        }                                                                                              // 14228
                    }                                                                                                  // 14229
                }                                                                                                      // 14230
                return cmp;                                                                                            // 14231
            }                                                                                                          // 14232
                                                                                                                       // 14233
            function subtract( a, b, aL, base ) {                                                                      // 14234
                var i = 0;                                                                                             // 14235
                                                                                                                       // 14236
                // Subtract b from a.                                                                                  // 14237
                for ( ; aL--; ) {                                                                                      // 14238
                    a[aL] -= i;                                                                                        // 14239
                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 14240
                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 14241
                }                                                                                                      // 14242
                                                                                                                       // 14243
                // Remove leading zeros.                                                                               // 14244
                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 14245
            }                                                                                                          // 14246
                                                                                                                       // 14247
            // x: dividend, y: divisor.                                                                                // 14248
            return function ( x, y, dp, rm, base ) {                                                                   // 14249
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 14250
                    yL, yz,                                                                                            // 14251
                    s = x.s == y.s ? 1 : -1,                                                                           // 14252
                    xc = x.c,                                                                                          // 14253
                    yc = y.c;                                                                                          // 14254
                                                                                                                       // 14255
                // Either NaN, Infinity or 0?                                                                          // 14256
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 14257
                                                                                                                       // 14258
                    return new BigNumber(                                                                              // 14259
                                                                                                                       // 14260
                      // Return NaN if either NaN, or both Infinity or 0.                                              // 14261
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 14262
                                                                                                                       // 14263
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 14264
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 14265
                    );                                                                                                 // 14266
                }                                                                                                      // 14267
                                                                                                                       // 14268
                q = new BigNumber(s);                                                                                  // 14269
                qc = q.c = [];                                                                                         // 14270
                e = x.e - y.e;                                                                                         // 14271
                s = dp + e + 1;                                                                                        // 14272
                                                                                                                       // 14273
                if ( !base ) {                                                                                         // 14274
                    base = BASE;                                                                                       // 14275
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 14276
                    s = s / LOG_BASE | 0;                                                                              // 14277
                }                                                                                                      // 14278
                                                                                                                       // 14279
                // Result exponent may be one less then the current value of e.                                        // 14280
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 14281
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 14282
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 14283
                                                                                                                       // 14284
                if ( s < 0 ) {                                                                                         // 14285
                    qc.push(1);                                                                                        // 14286
                    more = true;                                                                                       // 14287
                } else {                                                                                               // 14288
                    xL = xc.length;                                                                                    // 14289
                    yL = yc.length;                                                                                    // 14290
                    i = 0;                                                                                             // 14291
                    s += 2;                                                                                            // 14292
                                                                                                                       // 14293
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 14294
                                                                                                                       // 14295
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 14296
                                                                                                                       // 14297
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 14298
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 14299
                    if ( n > 1 ) {                                                                                     // 14300
                        yc = multiply( yc, n, base );                                                                  // 14301
                        xc = multiply( xc, n, base );                                                                  // 14302
                        yL = yc.length;                                                                                // 14303
                        xL = xc.length;                                                                                // 14304
                    }                                                                                                  // 14305
                                                                                                                       // 14306
                    xi = yL;                                                                                           // 14307
                    rem = xc.slice( 0, yL );                                                                           // 14308
                    remL = rem.length;                                                                                 // 14309
                                                                                                                       // 14310
                    // Add zeros to make remainder as long as divisor.                                                 // 14311
                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 14312
                    yz = yc.slice();                                                                                   // 14313
                    yz.unshift(0);                                                                                     // 14314
                    yc0 = yc[0];                                                                                       // 14315
                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 14316
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 14317
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 14318
                                                                                                                       // 14319
                    do {                                                                                               // 14320
                        n = 0;                                                                                         // 14321
                                                                                                                       // 14322
                        // Compare divisor and remainder.                                                              // 14323
                        cmp = compare( yc, rem, yL, remL );                                                            // 14324
                                                                                                                       // 14325
                        // If divisor < remainder.                                                                     // 14326
                        if ( cmp < 0 ) {                                                                               // 14327
                                                                                                                       // 14328
                            // Calculate trial digit, n.                                                               // 14329
                                                                                                                       // 14330
                            rem0 = rem[0];                                                                             // 14331
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 14332
                                                                                                                       // 14333
                            // n is how many times the divisor goes into the current remainder.                        // 14334
                            n = mathfloor( rem0 / yc0 );                                                               // 14335
                                                                                                                       // 14336
                            //  Algorithm:                                                                             // 14337
                            //  1. product = divisor * trial digit (n)                                                 // 14338
                            //  2. if product > remainder: product -= divisor, n--                                     // 14339
                            //  3. remainder -= product                                                                // 14340
                            //  4. if product was < remainder at 2:                                                    // 14341
                            //    5. compare new remainder and divisor                                                 // 14342
                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 14343
                                                                                                                       // 14344
                            if ( n > 1 ) {                                                                             // 14345
                                                                                                                       // 14346
                                // n may be > base only when base is 3.                                                // 14347
                                if (n >= base) n = base - 1;                                                           // 14348
                                                                                                                       // 14349
                                // product = divisor * trial digit.                                                    // 14350
                                prod = multiply( yc, n, base );                                                        // 14351
                                prodL = prod.length;                                                                   // 14352
                                remL = rem.length;                                                                     // 14353
                                                                                                                       // 14354
                                // Compare product and remainder.                                                      // 14355
                                // If product > remainder.                                                             // 14356
                                // Trial digit n too high.                                                             // 14357
                                // n is 1 too high about 5% of the time, and is not known to have                      // 14358
                                // ever been more than 1 too high.                                                     // 14359
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 14360
                                    n--;                                                                               // 14361
                                                                                                                       // 14362
                                    // Subtract divisor from product.                                                  // 14363
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 14364
                                    prodL = prod.length;                                                               // 14365
                                    cmp = 1;                                                                           // 14366
                                }                                                                                      // 14367
                            } else {                                                                                   // 14368
                                                                                                                       // 14369
                                // n is 0 or 1, cmp is -1.                                                             // 14370
                                // If n is 0, there is no need to compare yc and rem again below,                      // 14371
                                // so change cmp to 1 to avoid it.                                                     // 14372
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 14373
                                if ( n == 0 ) {                                                                        // 14374
                                                                                                                       // 14375
                                    // divisor < remainder, so n must be at least 1.                                   // 14376
                                    cmp = n = 1;                                                                       // 14377
                                }                                                                                      // 14378
                                                                                                                       // 14379
                                // product = divisor                                                                   // 14380
                                prod = yc.slice();                                                                     // 14381
                                prodL = prod.length;                                                                   // 14382
                            }                                                                                          // 14383
                                                                                                                       // 14384
                            if ( prodL < remL ) prod.unshift(0);                                                       // 14385
                                                                                                                       // 14386
                            // Subtract product from remainder.                                                        // 14387
                            subtract( rem, prod, remL, base );                                                         // 14388
                            remL = rem.length;                                                                         // 14389
                                                                                                                       // 14390
                             // If product was < remainder.                                                            // 14391
                            if ( cmp == -1 ) {                                                                         // 14392
                                                                                                                       // 14393
                                // Compare divisor and new remainder.                                                  // 14394
                                // If divisor < new remainder, subtract divisor from remainder.                        // 14395
                                // Trial digit n too low.                                                              // 14396
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 14397
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 14398
                                    n++;                                                                               // 14399
                                                                                                                       // 14400
                                    // Subtract divisor from remainder.                                                // 14401
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 14402
                                    remL = rem.length;                                                                 // 14403
                                }                                                                                      // 14404
                            }                                                                                          // 14405
                        } else if ( cmp === 0 ) {                                                                      // 14406
                            n++;                                                                                       // 14407
                            rem = [0];                                                                                 // 14408
                        } // else cmp === 1 and n will be 0                                                            // 14409
                                                                                                                       // 14410
                        // Add the next digit, n, to the result array.                                                 // 14411
                        qc[i++] = n;                                                                                   // 14412
                                                                                                                       // 14413
                        // Update the remainder.                                                                       // 14414
                        if ( rem[0] ) {                                                                                // 14415
                            rem[remL++] = xc[xi] || 0;                                                                 // 14416
                        } else {                                                                                       // 14417
                            rem = [ xc[xi] ];                                                                          // 14418
                            remL = 1;                                                                                  // 14419
                        }                                                                                              // 14420
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 14421
                                                                                                                       // 14422
                    more = rem[0] != null;                                                                             // 14423
                                                                                                                       // 14424
                    // Leading zero?                                                                                   // 14425
                    if ( !qc[0] ) qc.shift();                                                                          // 14426
                }                                                                                                      // 14427
                                                                                                                       // 14428
                if ( base == BASE ) {                                                                                  // 14429
                                                                                                                       // 14430
                    // To calculate q.e, first get the number of digits of qc[0].                                      // 14431
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 14432
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 14433
                                                                                                                       // 14434
                // Caller is convertBase.                                                                              // 14435
                } else {                                                                                               // 14436
                    q.e = e;                                                                                           // 14437
                    q.r = +more;                                                                                       // 14438
                }                                                                                                      // 14439
                                                                                                                       // 14440
                return q;                                                                                              // 14441
            };                                                                                                         // 14442
        })();                                                                                                          // 14443
                                                                                                                       // 14444
                                                                                                                       // 14445
        /*                                                                                                             // 14446
         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 14447
         * notation rounded to the specified decimal places or significant digits.                                     // 14448
         *                                                                                                             // 14449
         * n is a BigNumber.                                                                                           // 14450
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 14451
         * rm is the rounding mode.                                                                                    // 14452
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 14453
         */                                                                                                            // 14454
        function format( n, i, rm, caller ) {                                                                          // 14455
            var c0, e, ne, len, str;                                                                                   // 14456
                                                                                                                       // 14457
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 14458
              ? rm | 0 : ROUNDING_MODE;                                                                                // 14459
                                                                                                                       // 14460
            if ( !n.c ) return n.toString();                                                                           // 14461
            c0 = n.c[0];                                                                                               // 14462
            ne = n.e;                                                                                                  // 14463
                                                                                                                       // 14464
            if ( i == null ) {                                                                                         // 14465
                str = coeffToString( n.c );                                                                            // 14466
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 14467
                  ? toExponential( str, ne )                                                                           // 14468
                  : toFixedPoint( str, ne );                                                                           // 14469
            } else {                                                                                                   // 14470
                n = round( new BigNumber(n), i, rm );                                                                  // 14471
                                                                                                                       // 14472
                // n.e may have changed if the value was rounded up.                                                   // 14473
                e = n.e;                                                                                               // 14474
                                                                                                                       // 14475
                str = coeffToString( n.c );                                                                            // 14476
                len = str.length;                                                                                      // 14477
                                                                                                                       // 14478
                // toPrecision returns exponential notation if the number of significant digits                        // 14479
                // specified is less than the number of digits necessary to represent the integer                      // 14480
                // part of the value in fixed-point notation.                                                          // 14481
                                                                                                                       // 14482
                // Exponential notation.                                                                               // 14483
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 14484
                                                                                                                       // 14485
                    // Append zeros?                                                                                   // 14486
                    for ( ; len < i; str += '0', len++ );                                                              // 14487
                    str = toExponential( str, e );                                                                     // 14488
                                                                                                                       // 14489
                // Fixed-point notation.                                                                               // 14490
                } else {                                                                                               // 14491
                    i -= ne;                                                                                           // 14492
                    str = toFixedPoint( str, e );                                                                      // 14493
                                                                                                                       // 14494
                    // Append zeros?                                                                                   // 14495
                    if ( e + 1 > len ) {                                                                               // 14496
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 14497
                    } else {                                                                                           // 14498
                        i += e - len;                                                                                  // 14499
                        if ( i > 0 ) {                                                                                 // 14500
                            if ( e + 1 == len ) str += '.';                                                            // 14501
                            for ( ; i--; str += '0' );                                                                 // 14502
                        }                                                                                              // 14503
                    }                                                                                                  // 14504
                }                                                                                                      // 14505
            }                                                                                                          // 14506
                                                                                                                       // 14507
            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 14508
        }                                                                                                              // 14509
                                                                                                                       // 14510
                                                                                                                       // 14511
        // Handle BigNumber.max and BigNumber.min.                                                                     // 14512
        function maxOrMin( args, method ) {                                                                            // 14513
            var m, n,                                                                                                  // 14514
                i = 0;                                                                                                 // 14515
                                                                                                                       // 14516
            if ( isArray( args[0] ) ) args = args[0];                                                                  // 14517
            m = new BigNumber( args[0] );                                                                              // 14518
                                                                                                                       // 14519
            for ( ; ++i < args.length; ) {                                                                             // 14520
                n = new BigNumber( args[i] );                                                                          // 14521
                                                                                                                       // 14522
                // If any number is NaN, return NaN.                                                                   // 14523
                if ( !n.s ) {                                                                                          // 14524
                    m = n;                                                                                             // 14525
                    break;                                                                                             // 14526
                } else if ( method.call( m, n ) ) {                                                                    // 14527
                    m = n;                                                                                             // 14528
                }                                                                                                      // 14529
            }                                                                                                          // 14530
                                                                                                                       // 14531
            return m;                                                                                                  // 14532
        }                                                                                                              // 14533
                                                                                                                       // 14534
                                                                                                                       // 14535
        /*                                                                                                             // 14536
         * Return true if n is an integer in range, otherwise throw.                                                   // 14537
         * Use for argument validation when ERRORS is true.                                                            // 14538
         */                                                                                                            // 14539
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 14540
            if ( n < min || n > max || n != truncate(n) ) {                                                            // 14541
                raise( caller, ( name || 'decimal places' ) +                                                          // 14542
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 14543
            }                                                                                                          // 14544
                                                                                                                       // 14545
            return true;                                                                                               // 14546
        }                                                                                                              // 14547
                                                                                                                       // 14548
                                                                                                                       // 14549
        /*                                                                                                             // 14550
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 14551
         * Called by minus, plus and times.                                                                            // 14552
         */                                                                                                            // 14553
        function normalise( n, c, e ) {                                                                                // 14554
            var i = 1,                                                                                                 // 14555
                j = c.length;                                                                                          // 14556
                                                                                                                       // 14557
             // Remove trailing zeros.                                                                                 // 14558
            for ( ; !c[--j]; c.pop() );                                                                                // 14559
                                                                                                                       // 14560
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 14561
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 14562
                                                                                                                       // 14563
            // Overflow?                                                                                               // 14564
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 14565
                                                                                                                       // 14566
                // Infinity.                                                                                           // 14567
                n.c = n.e = null;                                                                                      // 14568
                                                                                                                       // 14569
            // Underflow?                                                                                              // 14570
            } else if ( e < MIN_EXP ) {                                                                                // 14571
                                                                                                                       // 14572
                // Zero.                                                                                               // 14573
                n.c = [ n.e = 0 ];                                                                                     // 14574
            } else {                                                                                                   // 14575
                n.e = e;                                                                                               // 14576
                n.c = c;                                                                                               // 14577
            }                                                                                                          // 14578
                                                                                                                       // 14579
            return n;                                                                                                  // 14580
        }                                                                                                              // 14581
                                                                                                                       // 14582
                                                                                                                       // 14583
        // Handle values that fail the validity test in BigNumber.                                                     // 14584
        parseNumeric = (function () {                                                                                  // 14585
            var basePrefix = /^(-?)0([xbo])/i,                                                                         // 14586
                dotAfter = /^([^.]+)\.$/,                                                                              // 14587
                dotBefore = /^\.([^.]+)$/,                                                                             // 14588
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 14589
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;                                                                // 14590
                                                                                                                       // 14591
            return function ( x, str, num, b ) {                                                                       // 14592
                var base,                                                                                              // 14593
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 14594
                                                                                                                       // 14595
                // No exception on ±Infinity or NaN.                                                                   // 14596
                if ( isInfinityOrNaN.test(s) ) {                                                                       // 14597
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 14598
                } else {                                                                                               // 14599
                    if ( !num ) {                                                                                      // 14600
                                                                                                                       // 14601
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                  // 14602
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 14603
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 14604
                            return !b || b == base ? p1 : m;                                                           // 14605
                        });                                                                                            // 14606
                                                                                                                       // 14607
                        if (b) {                                                                                       // 14608
                            base = b;                                                                                  // 14609
                                                                                                                       // 14610
                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 14611
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 14612
                        }                                                                                              // 14613
                                                                                                                       // 14614
                        if ( str != s ) return new BigNumber( s, base );                                               // 14615
                    }                                                                                                  // 14616
                                                                                                                       // 14617
                    // 'new BigNumber() not a number: {n}'                                                             // 14618
                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 14619
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 14620
                    x.s = null;                                                                                        // 14621
                }                                                                                                      // 14622
                                                                                                                       // 14623
                x.c = x.e = null;                                                                                      // 14624
                id = 0;                                                                                                // 14625
            }                                                                                                          // 14626
        })();                                                                                                          // 14627
                                                                                                                       // 14628
                                                                                                                       // 14629
        // Throw a BigNumber Error.                                                                                    // 14630
        function raise( caller, msg, val ) {                                                                           // 14631
            var error = new Error( [                                                                                   // 14632
                'new BigNumber',     // 0                                                                              // 14633
                'cmp',               // 1                                                                              // 14634
                'config',            // 2                                                                              // 14635
                'div',               // 3                                                                              // 14636
                'divToInt',          // 4                                                                              // 14637
                'eq',                // 5                                                                              // 14638
                'gt',                // 6                                                                              // 14639
                'gte',               // 7                                                                              // 14640
                'lt',                // 8                                                                              // 14641
                'lte',               // 9                                                                              // 14642
                'minus',             // 10                                                                             // 14643
                'mod',               // 11                                                                             // 14644
                'plus',              // 12                                                                             // 14645
                'precision',         // 13                                                                             // 14646
                'random',            // 14                                                                             // 14647
                'round',             // 15                                                                             // 14648
                'shift',             // 16                                                                             // 14649
                'times',             // 17                                                                             // 14650
                'toDigits',          // 18                                                                             // 14651
                'toExponential',     // 19                                                                             // 14652
                'toFixed',           // 20                                                                             // 14653
                'toFormat',          // 21                                                                             // 14654
                'toFraction',        // 22                                                                             // 14655
                'pow',               // 23                                                                             // 14656
                'toPrecision',       // 24                                                                             // 14657
                'toString',          // 25                                                                             // 14658
                'BigNumber'          // 26                                                                             // 14659
            ][caller] + '() ' + msg + ': ' + val );                                                                    // 14660
                                                                                                                       // 14661
            error.name = 'BigNumber Error';                                                                            // 14662
            id = 0;                                                                                                    // 14663
            throw error;                                                                                               // 14664
        }                                                                                                              // 14665
                                                                                                                       // 14666
                                                                                                                       // 14667
        /*                                                                                                             // 14668
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 14669
         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 14670
         */                                                                                                            // 14671
        function round( x, sd, rm, r ) {                                                                               // 14672
            var d, i, j, k, n, ni, rd,                                                                                 // 14673
                xc = x.c,                                                                                              // 14674
                pows10 = POWS_TEN;                                                                                     // 14675
                                                                                                                       // 14676
            // if x is not Infinity or NaN...                                                                          // 14677
            if (xc) {                                                                                                  // 14678
                                                                                                                       // 14679
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 14680
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 14681
                // ni is the index of n within x.c.                                                                    // 14682
                // d is the number of digits of n.                                                                     // 14683
                // i is the index of rd within n including leading zeros.                                              // 14684
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 14685
                out: {                                                                                                 // 14686
                                                                                                                       // 14687
                    // Get the number of digits of the first element of xc.                                            // 14688
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 14689
                    i = sd - d;                                                                                        // 14690
                                                                                                                       // 14691
                    // If the rounding digit is in the first element of xc...                                          // 14692
                    if ( i < 0 ) {                                                                                     // 14693
                        i += LOG_BASE;                                                                                 // 14694
                        j = sd;                                                                                        // 14695
                        n = xc[ ni = 0 ];                                                                              // 14696
                                                                                                                       // 14697
                        // Get the rounding digit at index j of n.                                                     // 14698
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 14699
                    } else {                                                                                           // 14700
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 14701
                                                                                                                       // 14702
                        if ( ni >= xc.length ) {                                                                       // 14703
                                                                                                                       // 14704
                            if (r) {                                                                                   // 14705
                                                                                                                       // 14706
                                // Needed by sqrt.                                                                     // 14707
                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 14708
                                n = rd = 0;                                                                            // 14709
                                d = 1;                                                                                 // 14710
                                i %= LOG_BASE;                                                                         // 14711
                                j = i - LOG_BASE + 1;                                                                  // 14712
                            } else {                                                                                   // 14713
                                break out;                                                                             // 14714
                            }                                                                                          // 14715
                        } else {                                                                                       // 14716
                            n = k = xc[ni];                                                                            // 14717
                                                                                                                       // 14718
                            // Get the number of digits of n.                                                          // 14719
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 14720
                                                                                                                       // 14721
                            // Get the index of rd within n.                                                           // 14722
                            i %= LOG_BASE;                                                                             // 14723
                                                                                                                       // 14724
                            // Get the index of rd within n, adjusted for leading zeros.                               // 14725
                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 14726
                            j = i - LOG_BASE + d;                                                                      // 14727
                                                                                                                       // 14728
                            // Get the rounding digit at index j of n.                                                 // 14729
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 14730
                        }                                                                                              // 14731
                    }                                                                                                  // 14732
                                                                                                                       // 14733
                    r = r || sd < 0 ||                                                                                 // 14734
                                                                                                                       // 14735
                    // Are there any non-zero digits after the rounding digit?                                         // 14736
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 14737
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 14738
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 14739
                                                                                                                       // 14740
                    r = rm < 4                                                                                         // 14741
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 14742
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 14743
                                                                                                                       // 14744
                        // Check whether the digit to the left of the rounding digit is odd.                           // 14745
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 14746
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 14747
                                                                                                                       // 14748
                    if ( sd < 1 || !xc[0] ) {                                                                          // 14749
                        xc.length = 0;                                                                                 // 14750
                                                                                                                       // 14751
                        if (r) {                                                                                       // 14752
                                                                                                                       // 14753
                            // Convert sd to decimal places.                                                           // 14754
                            sd -= x.e + 1;                                                                             // 14755
                                                                                                                       // 14756
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 14757
                            xc[0] = pows10[ sd % LOG_BASE ];                                                           // 14758
                            x.e = -sd || 0;                                                                            // 14759
                        } else {                                                                                       // 14760
                                                                                                                       // 14761
                            // Zero.                                                                                   // 14762
                            xc[0] = x.e = 0;                                                                           // 14763
                        }                                                                                              // 14764
                                                                                                                       // 14765
                        return x;                                                                                      // 14766
                    }                                                                                                  // 14767
                                                                                                                       // 14768
                    // Remove excess digits.                                                                           // 14769
                    if ( i == 0 ) {                                                                                    // 14770
                        xc.length = ni;                                                                                // 14771
                        k = 1;                                                                                         // 14772
                        ni--;                                                                                          // 14773
                    } else {                                                                                           // 14774
                        xc.length = ni + 1;                                                                            // 14775
                        k = pows10[ LOG_BASE - i ];                                                                    // 14776
                                                                                                                       // 14777
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 14778
                        // j > 0 means i > number of leading zeros of n.                                               // 14779
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 14780
                    }                                                                                                  // 14781
                                                                                                                       // 14782
                    // Round up?                                                                                       // 14783
                    if (r) {                                                                                           // 14784
                                                                                                                       // 14785
                        for ( ; ; ) {                                                                                  // 14786
                                                                                                                       // 14787
                            // If the digit to be rounded up is in the first element of xc...                          // 14788
                            if ( ni == 0 ) {                                                                           // 14789
                                                                                                                       // 14790
                                // i will be the length of xc[0] before k is added.                                    // 14791
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 14792
                                j = xc[0] += k;                                                                        // 14793
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 14794
                                                                                                                       // 14795
                                // if i != k the length has increased.                                                 // 14796
                                if ( i != k ) {                                                                        // 14797
                                    x.e++;                                                                             // 14798
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 14799
                                }                                                                                      // 14800
                                                                                                                       // 14801
                                break;                                                                                 // 14802
                            } else {                                                                                   // 14803
                                xc[ni] += k;                                                                           // 14804
                                if ( xc[ni] != BASE ) break;                                                           // 14805
                                xc[ni--] = 0;                                                                          // 14806
                                k = 1;                                                                                 // 14807
                            }                                                                                          // 14808
                        }                                                                                              // 14809
                    }                                                                                                  // 14810
                                                                                                                       // 14811
                    // Remove trailing zeros.                                                                          // 14812
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 14813
                }                                                                                                      // 14814
                                                                                                                       // 14815
                // Overflow? Infinity.                                                                                 // 14816
                if ( x.e > MAX_EXP ) {                                                                                 // 14817
                    x.c = x.e = null;                                                                                  // 14818
                                                                                                                       // 14819
                // Underflow? Zero.                                                                                    // 14820
                } else if ( x.e < MIN_EXP ) {                                                                          // 14821
                    x.c = [ x.e = 0 ];                                                                                 // 14822
                }                                                                                                      // 14823
            }                                                                                                          // 14824
                                                                                                                       // 14825
            return x;                                                                                                  // 14826
        }                                                                                                              // 14827
                                                                                                                       // 14828
                                                                                                                       // 14829
        // PROTOTYPE/INSTANCE METHODS                                                                                  // 14830
                                                                                                                       // 14831
                                                                                                                       // 14832
        /*                                                                                                             // 14833
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 14834
         */                                                                                                            // 14835
        P.absoluteValue = P.abs = function () {                                                                        // 14836
            var x = new BigNumber(this);                                                                               // 14837
            if ( x.s < 0 ) x.s = 1;                                                                                    // 14838
            return x;                                                                                                  // 14839
        };                                                                                                             // 14840
                                                                                                                       // 14841
                                                                                                                       // 14842
        /*                                                                                                             // 14843
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14844
         * number in the direction of Infinity.                                                                        // 14845
         */                                                                                                            // 14846
        P.ceil = function () {                                                                                         // 14847
            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 14848
        };                                                                                                             // 14849
                                                                                                                       // 14850
                                                                                                                       // 14851
        /*                                                                                                             // 14852
         * Return                                                                                                      // 14853
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 14854
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 14855
         * 0 if they have the same value,                                                                              // 14856
         * or null if the value of either is NaN.                                                                      // 14857
         */                                                                                                            // 14858
        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 14859
            id = 1;                                                                                                    // 14860
            return compare( this, new BigNumber( y, b ) );                                                             // 14861
        };                                                                                                             // 14862
                                                                                                                       // 14863
                                                                                                                       // 14864
        /*                                                                                                             // 14865
         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 14866
         * of this BigNumber is ±Infinity or NaN.                                                                      // 14867
         */                                                                                                            // 14868
        P.decimalPlaces = P.dp = function () {                                                                         // 14869
            var n, v,                                                                                                  // 14870
                c = this.c;                                                                                            // 14871
                                                                                                                       // 14872
            if ( !c ) return null;                                                                                     // 14873
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 14874
                                                                                                                       // 14875
            // Subtract the number of trailing zeros of the last number.                                               // 14876
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 14877
            if ( n < 0 ) n = 0;                                                                                        // 14878
                                                                                                                       // 14879
            return n;                                                                                                  // 14880
        };                                                                                                             // 14881
                                                                                                                       // 14882
                                                                                                                       // 14883
        /*                                                                                                             // 14884
         *  n / 0 = I                                                                                                  // 14885
         *  n / N = N                                                                                                  // 14886
         *  n / I = 0                                                                                                  // 14887
         *  0 / n = 0                                                                                                  // 14888
         *  0 / 0 = N                                                                                                  // 14889
         *  0 / N = N                                                                                                  // 14890
         *  0 / I = 0                                                                                                  // 14891
         *  N / n = N                                                                                                  // 14892
         *  N / 0 = N                                                                                                  // 14893
         *  N / N = N                                                                                                  // 14894
         *  N / I = N                                                                                                  // 14895
         *  I / n = I                                                                                                  // 14896
         *  I / 0 = I                                                                                                  // 14897
         *  I / N = N                                                                                                  // 14898
         *  I / I = N                                                                                                  // 14899
         *                                                                                                             // 14900
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 14901
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 14902
         */                                                                                                            // 14903
        P.dividedBy = P.div = function ( y, b ) {                                                                      // 14904
            id = 3;                                                                                                    // 14905
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 14906
        };                                                                                                             // 14907
                                                                                                                       // 14908
                                                                                                                       // 14909
        /*                                                                                                             // 14910
         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 14911
         * BigNumber by the value of BigNumber(y, b).                                                                  // 14912
         */                                                                                                            // 14913
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 14914
            id = 4;                                                                                                    // 14915
            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 14916
        };                                                                                                             // 14917
                                                                                                                       // 14918
                                                                                                                       // 14919
        /*                                                                                                             // 14920
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 14921
         * otherwise returns false.                                                                                    // 14922
         */                                                                                                            // 14923
        P.equals = P.eq = function ( y, b ) {                                                                          // 14924
            id = 5;                                                                                                    // 14925
            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 14926
        };                                                                                                             // 14927
                                                                                                                       // 14928
                                                                                                                       // 14929
        /*                                                                                                             // 14930
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14931
         * number in the direction of -Infinity.                                                                       // 14932
         */                                                                                                            // 14933
        P.floor = function () {                                                                                        // 14934
            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 14935
        };                                                                                                             // 14936
                                                                                                                       // 14937
                                                                                                                       // 14938
        /*                                                                                                             // 14939
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 14940
         * otherwise returns false.                                                                                    // 14941
         */                                                                                                            // 14942
        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 14943
            id = 6;                                                                                                    // 14944
            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 14945
        };                                                                                                             // 14946
                                                                                                                       // 14947
                                                                                                                       // 14948
        /*                                                                                                             // 14949
         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 14950
         * BigNumber(y, b), otherwise returns false.                                                                   // 14951
         */                                                                                                            // 14952
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 14953
            id = 7;                                                                                                    // 14954
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 14955
                                                                                                                       // 14956
        };                                                                                                             // 14957
                                                                                                                       // 14958
                                                                                                                       // 14959
        /*                                                                                                             // 14960
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 14961
         */                                                                                                            // 14962
        P.isFinite = function () {                                                                                     // 14963
            return !!this.c;                                                                                           // 14964
        };                                                                                                             // 14965
                                                                                                                       // 14966
                                                                                                                       // 14967
        /*                                                                                                             // 14968
         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 14969
         */                                                                                                            // 14970
        P.isInteger = P.isInt = function () {                                                                          // 14971
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 14972
        };                                                                                                             // 14973
                                                                                                                       // 14974
                                                                                                                       // 14975
        /*                                                                                                             // 14976
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 14977
         */                                                                                                            // 14978
        P.isNaN = function () {                                                                                        // 14979
            return !this.s;                                                                                            // 14980
        };                                                                                                             // 14981
                                                                                                                       // 14982
                                                                                                                       // 14983
        /*                                                                                                             // 14984
         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 14985
         */                                                                                                            // 14986
        P.isNegative = P.isNeg = function () {                                                                         // 14987
            return this.s < 0;                                                                                         // 14988
        };                                                                                                             // 14989
                                                                                                                       // 14990
                                                                                                                       // 14991
        /*                                                                                                             // 14992
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 14993
         */                                                                                                            // 14994
        P.isZero = function () {                                                                                       // 14995
            return !!this.c && this.c[0] == 0;                                                                         // 14996
        };                                                                                                             // 14997
                                                                                                                       // 14998
                                                                                                                       // 14999
        /*                                                                                                             // 15000
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 15001
         * otherwise returns false.                                                                                    // 15002
         */                                                                                                            // 15003
        P.lessThan = P.lt = function ( y, b ) {                                                                        // 15004
            id = 8;                                                                                                    // 15005
            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 15006
        };                                                                                                             // 15007
                                                                                                                       // 15008
                                                                                                                       // 15009
        /*                                                                                                             // 15010
         * Return true if the value of this BigNumber is less than or equal to the value of                            // 15011
         * BigNumber(y, b), otherwise returns false.                                                                   // 15012
         */                                                                                                            // 15013
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 15014
            id = 9;                                                                                                    // 15015
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 15016
        };                                                                                                             // 15017
                                                                                                                       // 15018
                                                                                                                       // 15019
        /*                                                                                                             // 15020
         *  n - 0 = n                                                                                                  // 15021
         *  n - N = N                                                                                                  // 15022
         *  n - I = -I                                                                                                 // 15023
         *  0 - n = -n                                                                                                 // 15024
         *  0 - 0 = 0                                                                                                  // 15025
         *  0 - N = N                                                                                                  // 15026
         *  0 - I = -I                                                                                                 // 15027
         *  N - n = N                                                                                                  // 15028
         *  N - 0 = N                                                                                                  // 15029
         *  N - N = N                                                                                                  // 15030
         *  N - I = N                                                                                                  // 15031
         *  I - n = I                                                                                                  // 15032
         *  I - 0 = I                                                                                                  // 15033
         *  I - N = N                                                                                                  // 15034
         *  I - I = N                                                                                                  // 15035
         *                                                                                                             // 15036
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 15037
         * BigNumber(y, b).                                                                                            // 15038
         */                                                                                                            // 15039
        P.minus = P.sub = function ( y, b ) {                                                                          // 15040
            var i, j, t, xLTy,                                                                                         // 15041
                x = this,                                                                                              // 15042
                a = x.s;                                                                                               // 15043
                                                                                                                       // 15044
            id = 10;                                                                                                   // 15045
            y = new BigNumber( y, b );                                                                                 // 15046
            b = y.s;                                                                                                   // 15047
                                                                                                                       // 15048
            // Either NaN?                                                                                             // 15049
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 15050
                                                                                                                       // 15051
            // Signs differ?                                                                                           // 15052
            if ( a != b ) {                                                                                            // 15053
                y.s = -b;                                                                                              // 15054
                return x.plus(y);                                                                                      // 15055
            }                                                                                                          // 15056
                                                                                                                       // 15057
            var xe = x.e / LOG_BASE,                                                                                   // 15058
                ye = y.e / LOG_BASE,                                                                                   // 15059
                xc = x.c,                                                                                              // 15060
                yc = y.c;                                                                                              // 15061
                                                                                                                       // 15062
            if ( !xe || !ye ) {                                                                                        // 15063
                                                                                                                       // 15064
                // Either Infinity?                                                                                    // 15065
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 15066
                                                                                                                       // 15067
                // Either zero?                                                                                        // 15068
                if ( !xc[0] || !yc[0] ) {                                                                              // 15069
                                                                                                                       // 15070
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 15071
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 15072
                                                                                                                       // 15073
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 15074
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 15075
                }                                                                                                      // 15076
            }                                                                                                          // 15077
                                                                                                                       // 15078
            xe = bitFloor(xe);                                                                                         // 15079
            ye = bitFloor(ye);                                                                                         // 15080
            xc = xc.slice();                                                                                           // 15081
                                                                                                                       // 15082
            // Determine which is the bigger number.                                                                   // 15083
            if ( a = xe - ye ) {                                                                                       // 15084
                                                                                                                       // 15085
                if ( xLTy = a < 0 ) {                                                                                  // 15086
                    a = -a;                                                                                            // 15087
                    t = xc;                                                                                            // 15088
                } else {                                                                                               // 15089
                    ye = xe;                                                                                           // 15090
                    t = yc;                                                                                            // 15091
                }                                                                                                      // 15092
                                                                                                                       // 15093
                t.reverse();                                                                                           // 15094
                                                                                                                       // 15095
                // Prepend zeros to equalise exponents.                                                                // 15096
                for ( b = a; b--; t.push(0) );                                                                         // 15097
                t.reverse();                                                                                           // 15098
            } else {                                                                                                   // 15099
                                                                                                                       // 15100
                // Exponents equal. Check digit by digit.                                                              // 15101
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 15102
                                                                                                                       // 15103
                for ( a = b = 0; b < j; b++ ) {                                                                        // 15104
                                                                                                                       // 15105
                    if ( xc[b] != yc[b] ) {                                                                            // 15106
                        xLTy = xc[b] < yc[b];                                                                          // 15107
                        break;                                                                                         // 15108
                    }                                                                                                  // 15109
                }                                                                                                      // 15110
            }                                                                                                          // 15111
                                                                                                                       // 15112
            // x < y? Point xc to the array of the bigger number.                                                      // 15113
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 15114
                                                                                                                       // 15115
            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 15116
                                                                                                                       // 15117
            // Append zeros to xc if shorter.                                                                          // 15118
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 15119
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 15120
            b = BASE - 1;                                                                                              // 15121
                                                                                                                       // 15122
            // Subtract yc from xc.                                                                                    // 15123
            for ( ; j > a; ) {                                                                                         // 15124
                                                                                                                       // 15125
                if ( xc[--j] < yc[j] ) {                                                                               // 15126
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 15127
                    --xc[i];                                                                                           // 15128
                    xc[j] += BASE;                                                                                     // 15129
                }                                                                                                      // 15130
                                                                                                                       // 15131
                xc[j] -= yc[j];                                                                                        // 15132
            }                                                                                                          // 15133
                                                                                                                       // 15134
            // Remove leading zeros and adjust exponent accordingly.                                                   // 15135
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 15136
                                                                                                                       // 15137
            // Zero?                                                                                                   // 15138
            if ( !xc[0] ) {                                                                                            // 15139
                                                                                                                       // 15140
                // Following IEEE 754 (2008) 6.3,                                                                      // 15141
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 15142
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 15143
                y.c = [ y.e = 0 ];                                                                                     // 15144
                return y;                                                                                              // 15145
            }                                                                                                          // 15146
                                                                                                                       // 15147
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 15148
            // for finite x and y.                                                                                     // 15149
            return normalise( y, xc, ye );                                                                             // 15150
        };                                                                                                             // 15151
                                                                                                                       // 15152
                                                                                                                       // 15153
        /*                                                                                                             // 15154
         *   n % 0 =  N                                                                                                // 15155
         *   n % N =  N                                                                                                // 15156
         *   n % I =  n                                                                                                // 15157
         *   0 % n =  0                                                                                                // 15158
         *  -0 % n = -0                                                                                                // 15159
         *   0 % 0 =  N                                                                                                // 15160
         *   0 % N =  N                                                                                                // 15161
         *   0 % I =  0                                                                                                // 15162
         *   N % n =  N                                                                                                // 15163
         *   N % 0 =  N                                                                                                // 15164
         *   N % N =  N                                                                                                // 15165
         *   N % I =  N                                                                                                // 15166
         *   I % n =  N                                                                                                // 15167
         *   I % 0 =  N                                                                                                // 15168
         *   I % N =  N                                                                                                // 15169
         *   I % I =  N                                                                                                // 15170
         *                                                                                                             // 15171
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 15172
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 15173
         */                                                                                                            // 15174
        P.modulo = P.mod = function ( y, b ) {                                                                         // 15175
            var q, s,                                                                                                  // 15176
                x = this;                                                                                              // 15177
                                                                                                                       // 15178
            id = 11;                                                                                                   // 15179
            y = new BigNumber( y, b );                                                                                 // 15180
                                                                                                                       // 15181
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 15182
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 15183
                return new BigNumber(NaN);                                                                             // 15184
                                                                                                                       // 15185
            // Return x if y is Infinity or x is zero.                                                                 // 15186
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 15187
                return new BigNumber(x);                                                                               // 15188
            }                                                                                                          // 15189
                                                                                                                       // 15190
            if ( MODULO_MODE == 9 ) {                                                                                  // 15191
                                                                                                                       // 15192
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 15193
                // r = x - qy    where  0 <= r < abs(y)                                                                // 15194
                s = y.s;                                                                                               // 15195
                y.s = 1;                                                                                               // 15196
                q = div( x, y, 0, 3 );                                                                                 // 15197
                y.s = s;                                                                                               // 15198
                q.s *= s;                                                                                              // 15199
            } else {                                                                                                   // 15200
                q = div( x, y, 0, MODULO_MODE );                                                                       // 15201
            }                                                                                                          // 15202
                                                                                                                       // 15203
            return x.minus( q.times(y) );                                                                              // 15204
        };                                                                                                             // 15205
                                                                                                                       // 15206
                                                                                                                       // 15207
        /*                                                                                                             // 15208
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 15209
         * i.e. multiplied by -1.                                                                                      // 15210
         */                                                                                                            // 15211
        P.negated = P.neg = function () {                                                                              // 15212
            var x = new BigNumber(this);                                                                               // 15213
            x.s = -x.s || null;                                                                                        // 15214
            return x;                                                                                                  // 15215
        };                                                                                                             // 15216
                                                                                                                       // 15217
                                                                                                                       // 15218
        /*                                                                                                             // 15219
         *  n + 0 = n                                                                                                  // 15220
         *  n + N = N                                                                                                  // 15221
         *  n + I = I                                                                                                  // 15222
         *  0 + n = n                                                                                                  // 15223
         *  0 + 0 = 0                                                                                                  // 15224
         *  0 + N = N                                                                                                  // 15225
         *  0 + I = I                                                                                                  // 15226
         *  N + n = N                                                                                                  // 15227
         *  N + 0 = N                                                                                                  // 15228
         *  N + N = N                                                                                                  // 15229
         *  N + I = N                                                                                                  // 15230
         *  I + n = I                                                                                                  // 15231
         *  I + 0 = I                                                                                                  // 15232
         *  I + N = N                                                                                                  // 15233
         *  I + I = I                                                                                                  // 15234
         *                                                                                                             // 15235
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 15236
         * BigNumber(y, b).                                                                                            // 15237
         */                                                                                                            // 15238
        P.plus = P.add = function ( y, b ) {                                                                           // 15239
            var t,                                                                                                     // 15240
                x = this,                                                                                              // 15241
                a = x.s;                                                                                               // 15242
                                                                                                                       // 15243
            id = 12;                                                                                                   // 15244
            y = new BigNumber( y, b );                                                                                 // 15245
            b = y.s;                                                                                                   // 15246
                                                                                                                       // 15247
            // Either NaN?                                                                                             // 15248
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 15249
                                                                                                                       // 15250
            // Signs differ?                                                                                           // 15251
             if ( a != b ) {                                                                                           // 15252
                y.s = -b;                                                                                              // 15253
                return x.minus(y);                                                                                     // 15254
            }                                                                                                          // 15255
                                                                                                                       // 15256
            var xe = x.e / LOG_BASE,                                                                                   // 15257
                ye = y.e / LOG_BASE,                                                                                   // 15258
                xc = x.c,                                                                                              // 15259
                yc = y.c;                                                                                              // 15260
                                                                                                                       // 15261
            if ( !xe || !ye ) {                                                                                        // 15262
                                                                                                                       // 15263
                // Return ±Infinity if either ±Infinity.                                                               // 15264
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 15265
                                                                                                                       // 15266
                // Either zero?                                                                                        // 15267
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 15268
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 15269
            }                                                                                                          // 15270
                                                                                                                       // 15271
            xe = bitFloor(xe);                                                                                         // 15272
            ye = bitFloor(ye);                                                                                         // 15273
            xc = xc.slice();                                                                                           // 15274
                                                                                                                       // 15275
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 15276
            if ( a = xe - ye ) {                                                                                       // 15277
                if ( a > 0 ) {                                                                                         // 15278
                    ye = xe;                                                                                           // 15279
                    t = yc;                                                                                            // 15280
                } else {                                                                                               // 15281
                    a = -a;                                                                                            // 15282
                    t = xc;                                                                                            // 15283
                }                                                                                                      // 15284
                                                                                                                       // 15285
                t.reverse();                                                                                           // 15286
                for ( ; a--; t.push(0) );                                                                              // 15287
                t.reverse();                                                                                           // 15288
            }                                                                                                          // 15289
                                                                                                                       // 15290
            a = xc.length;                                                                                             // 15291
            b = yc.length;                                                                                             // 15292
                                                                                                                       // 15293
            // Point xc to the longer array, and b to the shorter length.                                              // 15294
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 15295
                                                                                                                       // 15296
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 15297
            for ( a = 0; b; ) {                                                                                        // 15298
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 15299
                xc[b] %= BASE;                                                                                         // 15300
            }                                                                                                          // 15301
                                                                                                                       // 15302
            if (a) {                                                                                                   // 15303
                xc.unshift(a);                                                                                         // 15304
                ++ye;                                                                                                  // 15305
            }                                                                                                          // 15306
                                                                                                                       // 15307
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 15308
            // ye = MAX_EXP + 1 possible                                                                               // 15309
            return normalise( y, xc, ye );                                                                             // 15310
        };                                                                                                             // 15311
                                                                                                                       // 15312
                                                                                                                       // 15313
        /*                                                                                                             // 15314
         * Return the number of significant digits of the value of this BigNumber.                                     // 15315
         *                                                                                                             // 15316
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 15317
         */                                                                                                            // 15318
        P.precision = P.sd = function (z) {                                                                            // 15319
            var n, v,                                                                                                  // 15320
                x = this,                                                                                              // 15321
                c = x.c;                                                                                               // 15322
                                                                                                                       // 15323
            // 'precision() argument not a boolean or binary digit: {z}'                                               // 15324
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 15325
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 15326
                if ( z != !!z ) z = null;                                                                              // 15327
            }                                                                                                          // 15328
                                                                                                                       // 15329
            if ( !c ) return null;                                                                                     // 15330
            v = c.length - 1;                                                                                          // 15331
            n = v * LOG_BASE + 1;                                                                                      // 15332
                                                                                                                       // 15333
            if ( v = c[v] ) {                                                                                          // 15334
                                                                                                                       // 15335
                // Subtract the number of trailing zeros of the last element.                                          // 15336
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 15337
                                                                                                                       // 15338
                // Add the number of digits of the first element.                                                      // 15339
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 15340
            }                                                                                                          // 15341
                                                                                                                       // 15342
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 15343
                                                                                                                       // 15344
            return n;                                                                                                  // 15345
        };                                                                                                             // 15346
                                                                                                                       // 15347
                                                                                                                       // 15348
        /*                                                                                                             // 15349
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15350
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 15351
         * omitted.                                                                                                    // 15352
         *                                                                                                             // 15353
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15354
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15355
         *                                                                                                             // 15356
         * 'round() decimal places out of range: {dp}'                                                                 // 15357
         * 'round() decimal places not an integer: {dp}'                                                               // 15358
         * 'round() rounding mode not an integer: {rm}'                                                                // 15359
         * 'round() rounding mode out of range: {rm}'                                                                  // 15360
         */                                                                                                            // 15361
        P.round = function ( dp, rm ) {                                                                                // 15362
            var n = new BigNumber(this);                                                                               // 15363
                                                                                                                       // 15364
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 15365
                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 15366
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 15367
            }                                                                                                          // 15368
                                                                                                                       // 15369
            return n;                                                                                                  // 15370
        };                                                                                                             // 15371
                                                                                                                       // 15372
                                                                                                                       // 15373
        /*                                                                                                             // 15374
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 15375
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 15376
         *                                                                                                             // 15377
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 15378
         *                                                                                                             // 15379
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 15380
         * otherwise.                                                                                                  // 15381
         *                                                                                                             // 15382
         * 'shift() argument not an integer: {k}'                                                                      // 15383
         * 'shift() argument out of range: {k}'                                                                        // 15384
         */                                                                                                            // 15385
        P.shift = function (k) {                                                                                       // 15386
            var n = this;                                                                                              // 15387
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 15388
                                                                                                                       // 15389
              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 15390
              ? n.times( '1e' + truncate(k) )                                                                          // 15391
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 15392
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 15393
                : n );                                                                                                 // 15394
        };                                                                                                             // 15395
                                                                                                                       // 15396
                                                                                                                       // 15397
        /*                                                                                                             // 15398
         *  sqrt(-n) =  N                                                                                              // 15399
         *  sqrt( N) =  N                                                                                              // 15400
         *  sqrt(-I) =  N                                                                                              // 15401
         *  sqrt( I) =  I                                                                                              // 15402
         *  sqrt( 0) =  0                                                                                              // 15403
         *  sqrt(-0) = -0                                                                                              // 15404
         *                                                                                                             // 15405
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 15406
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 15407
         */                                                                                                            // 15408
        P.squareRoot = P.sqrt = function () {                                                                          // 15409
            var m, n, r, rep, t,                                                                                       // 15410
                x = this,                                                                                              // 15411
                c = x.c,                                                                                               // 15412
                s = x.s,                                                                                               // 15413
                e = x.e,                                                                                               // 15414
                dp = DECIMAL_PLACES + 4,                                                                               // 15415
                half = new BigNumber('0.5');                                                                           // 15416
                                                                                                                       // 15417
            // Negative/NaN/Infinity/zero?                                                                             // 15418
            if ( s !== 1 || !c || !c[0] ) {                                                                            // 15419
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 15420
            }                                                                                                          // 15421
                                                                                                                       // 15422
            // Initial estimate.                                                                                       // 15423
            s = Math.sqrt( +x );                                                                                       // 15424
                                                                                                                       // 15425
            // Math.sqrt underflow/overflow?                                                                           // 15426
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 15427
            if ( s == 0 || s == 1 / 0 ) {                                                                              // 15428
                n = coeffToString(c);                                                                                  // 15429
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 15430
                s = Math.sqrt(n);                                                                                      // 15431
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 15432
                                                                                                                       // 15433
                if ( s == 1 / 0 ) {                                                                                    // 15434
                    n = '1e' + e;                                                                                      // 15435
                } else {                                                                                               // 15436
                    n = s.toExponential();                                                                             // 15437
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 15438
                }                                                                                                      // 15439
                                                                                                                       // 15440
                r = new BigNumber(n);                                                                                  // 15441
            } else {                                                                                                   // 15442
                r = new BigNumber( s + '' );                                                                           // 15443
            }                                                                                                          // 15444
                                                                                                                       // 15445
            // Check for zero.                                                                                         // 15446
            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 15447
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 15448
            // coeffToString to throw.                                                                                 // 15449
            if ( r.c[0] ) {                                                                                            // 15450
                e = r.e;                                                                                               // 15451
                s = e + dp;                                                                                            // 15452
                if ( s < 3 ) s = 0;                                                                                    // 15453
                                                                                                                       // 15454
                // Newton-Raphson iteration.                                                                           // 15455
                for ( ; ; ) {                                                                                          // 15456
                    t = r;                                                                                             // 15457
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 15458
                                                                                                                       // 15459
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 15460
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 15461
                                                                                                                       // 15462
                        // The exponent of r may here be one less than the final result exponent,                      // 15463
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 15464
                        // are indexed correctly.                                                                      // 15465
                        if ( r.e < e ) --s;                                                                            // 15466
                        n = n.slice( s - 3, s + 1 );                                                                   // 15467
                                                                                                                       // 15468
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 15469
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 15470
                        // iteration.                                                                                  // 15471
                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 15472
                                                                                                                       // 15473
                            // On the first iteration only, check to see if rounding up gives the                      // 15474
                            // exact result as the nines may infinitely repeat.                                        // 15475
                            if ( !rep ) {                                                                              // 15476
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 15477
                                                                                                                       // 15478
                                if ( t.times(t).eq(x) ) {                                                              // 15479
                                    r = t;                                                                             // 15480
                                    break;                                                                             // 15481
                                }                                                                                      // 15482
                            }                                                                                          // 15483
                                                                                                                       // 15484
                            dp += 4;                                                                                   // 15485
                            s += 4;                                                                                    // 15486
                            rep = 1;                                                                                   // 15487
                        } else {                                                                                       // 15488
                                                                                                                       // 15489
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 15490
                            // result. If not, then there are further digits and m will be truthy.                     // 15491
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 15492
                                                                                                                       // 15493
                                // Truncate to the first rounding digit.                                               // 15494
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 15495
                                m = !r.times(r).eq(x);                                                                 // 15496
                            }                                                                                          // 15497
                                                                                                                       // 15498
                            break;                                                                                     // 15499
                        }                                                                                              // 15500
                    }                                                                                                  // 15501
                }                                                                                                      // 15502
            }                                                                                                          // 15503
                                                                                                                       // 15504
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 15505
        };                                                                                                             // 15506
                                                                                                                       // 15507
                                                                                                                       // 15508
        /*                                                                                                             // 15509
         *  n * 0 = 0                                                                                                  // 15510
         *  n * N = N                                                                                                  // 15511
         *  n * I = I                                                                                                  // 15512
         *  0 * n = 0                                                                                                  // 15513
         *  0 * 0 = 0                                                                                                  // 15514
         *  0 * N = N                                                                                                  // 15515
         *  0 * I = N                                                                                                  // 15516
         *  N * n = N                                                                                                  // 15517
         *  N * 0 = N                                                                                                  // 15518
         *  N * N = N                                                                                                  // 15519
         *  N * I = N                                                                                                  // 15520
         *  I * n = I                                                                                                  // 15521
         *  I * 0 = N                                                                                                  // 15522
         *  I * N = N                                                                                                  // 15523
         *  I * I = I                                                                                                  // 15524
         *                                                                                                             // 15525
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 15526
         * BigNumber(y, b).                                                                                            // 15527
         */                                                                                                            // 15528
        P.times = P.mul = function ( y, b ) {                                                                          // 15529
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 15530
                base, sqrtBase,                                                                                        // 15531
                x = this,                                                                                              // 15532
                xc = x.c,                                                                                              // 15533
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 15534
                                                                                                                       // 15535
            // Either NaN, ±Infinity or ±0?                                                                            // 15536
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 15537
                                                                                                                       // 15538
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 15539
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 15540
                    y.c = y.e = y.s = null;                                                                            // 15541
                } else {                                                                                               // 15542
                    y.s *= x.s;                                                                                        // 15543
                                                                                                                       // 15544
                    // Return ±Infinity if either is ±Infinity.                                                        // 15545
                    if ( !xc || !yc ) {                                                                                // 15546
                        y.c = y.e = null;                                                                              // 15547
                                                                                                                       // 15548
                    // Return ±0 if either is ±0.                                                                      // 15549
                    } else {                                                                                           // 15550
                        y.c = [0];                                                                                     // 15551
                        y.e = 0;                                                                                       // 15552
                    }                                                                                                  // 15553
                }                                                                                                      // 15554
                                                                                                                       // 15555
                return y;                                                                                              // 15556
            }                                                                                                          // 15557
                                                                                                                       // 15558
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 15559
            y.s *= x.s;                                                                                                // 15560
            xcL = xc.length;                                                                                           // 15561
            ycL = yc.length;                                                                                           // 15562
                                                                                                                       // 15563
            // Ensure xc points to longer array and xcL to its length.                                                 // 15564
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 15565
                                                                                                                       // 15566
            // Initialise the result array with zeros.                                                                 // 15567
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 15568
                                                                                                                       // 15569
            base = BASE;                                                                                               // 15570
            sqrtBase = SQRT_BASE;                                                                                      // 15571
                                                                                                                       // 15572
            for ( i = ycL; --i >= 0; ) {                                                                               // 15573
                c = 0;                                                                                                 // 15574
                ylo = yc[i] % sqrtBase;                                                                                // 15575
                yhi = yc[i] / sqrtBase | 0;                                                                            // 15576
                                                                                                                       // 15577
                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 15578
                    xlo = xc[--k] % sqrtBase;                                                                          // 15579
                    xhi = xc[k] / sqrtBase | 0;                                                                        // 15580
                    m = yhi * xlo + xhi * ylo;                                                                         // 15581
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 15582
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 15583
                    zc[j--] = xlo % base;                                                                              // 15584
                }                                                                                                      // 15585
                                                                                                                       // 15586
                zc[j] = c;                                                                                             // 15587
            }                                                                                                          // 15588
                                                                                                                       // 15589
            if (c) {                                                                                                   // 15590
                ++e;                                                                                                   // 15591
            } else {                                                                                                   // 15592
                zc.shift();                                                                                            // 15593
            }                                                                                                          // 15594
                                                                                                                       // 15595
            return normalise( y, zc, e );                                                                              // 15596
        };                                                                                                             // 15597
                                                                                                                       // 15598
                                                                                                                       // 15599
        /*                                                                                                             // 15600
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15601
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 15602
         *                                                                                                             // 15603
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15604
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15605
         *                                                                                                             // 15606
         * 'toDigits() precision out of range: {sd}'                                                                   // 15607
         * 'toDigits() precision not an integer: {sd}'                                                                 // 15608
         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 15609
         * 'toDigits() rounding mode out of range: {rm}'                                                               // 15610
         */                                                                                                            // 15611
        P.toDigits = function ( sd, rm ) {                                                                             // 15612
            var n = new BigNumber(this);                                                                               // 15613
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 15614
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 15615
            return sd ? round( n, sd, rm ) : n;                                                                        // 15616
        };                                                                                                             // 15617
                                                                                                                       // 15618
                                                                                                                       // 15619
        /*                                                                                                             // 15620
         * Return a string representing the value of this BigNumber in exponential notation and                        // 15621
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 15622
         *                                                                                                             // 15623
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15624
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15625
         *                                                                                                             // 15626
         * 'toExponential() decimal places not an integer: {dp}'                                                       // 15627
         * 'toExponential() decimal places out of range: {dp}'                                                         // 15628
         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 15629
         * 'toExponential() rounding mode out of range: {rm}'                                                          // 15630
         */                                                                                                            // 15631
        P.toExponential = function ( dp, rm ) {                                                                        // 15632
            return format( this,                                                                                       // 15633
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 15634
        };                                                                                                             // 15635
                                                                                                                       // 15636
                                                                                                                       // 15637
        /*                                                                                                             // 15638
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 15639
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 15640
         *                                                                                                             // 15641
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 15642
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 15643
         *                                                                                                             // 15644
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15645
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15646
         *                                                                                                             // 15647
         * 'toFixed() decimal places not an integer: {dp}'                                                             // 15648
         * 'toFixed() decimal places out of range: {dp}'                                                               // 15649
         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 15650
         * 'toFixed() rounding mode out of range: {rm}'                                                                // 15651
         */                                                                                                            // 15652
        P.toFixed = function ( dp, rm ) {                                                                              // 15653
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 15654
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 15655
        };                                                                                                             // 15656
                                                                                                                       // 15657
                                                                                                                       // 15658
        /*                                                                                                             // 15659
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 15660
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 15661
         * of the FORMAT object (see BigNumber.config).                                                                // 15662
         *                                                                                                             // 15663
         * FORMAT = {                                                                                                  // 15664
         *      decimalSeparator : '.',                                                                                // 15665
         *      groupSeparator : ',',                                                                                  // 15666
         *      groupSize : 3,                                                                                         // 15667
         *      secondaryGroupSize : 0,                                                                                // 15668
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                              // 15669
         *      fractionGroupSize : 0                                                                                  // 15670
         * };                                                                                                          // 15671
         *                                                                                                             // 15672
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15673
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15674
         *                                                                                                             // 15675
         * 'toFormat() decimal places not an integer: {dp}'                                                            // 15676
         * 'toFormat() decimal places out of range: {dp}'                                                              // 15677
         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 15678
         * 'toFormat() rounding mode out of range: {rm}'                                                               // 15679
         */                                                                                                            // 15680
        P.toFormat = function ( dp, rm ) {                                                                             // 15681
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 15682
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 15683
                                                                                                                       // 15684
            if ( this.c ) {                                                                                            // 15685
                var i,                                                                                                 // 15686
                    arr = str.split('.'),                                                                              // 15687
                    g1 = +FORMAT.groupSize,                                                                            // 15688
                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 15689
                    groupSeparator = FORMAT.groupSeparator,                                                            // 15690
                    intPart = arr[0],                                                                                  // 15691
                    fractionPart = arr[1],                                                                             // 15692
                    isNeg = this.s < 0,                                                                                // 15693
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 15694
                    len = intDigits.length;                                                                            // 15695
                                                                                                                       // 15696
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 15697
                                                                                                                       // 15698
                if ( g1 > 0 && len > 0 ) {                                                                             // 15699
                    i = len % g1 || g1;                                                                                // 15700
                    intPart = intDigits.substr( 0, i );                                                                // 15701
                                                                                                                       // 15702
                    for ( ; i < len; i += g1 ) {                                                                       // 15703
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 15704
                    }                                                                                                  // 15705
                                                                                                                       // 15706
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 15707
                    if (isNeg) intPart = '-' + intPart;                                                                // 15708
                }                                                                                                      // 15709
                                                                                                                       // 15710
                str = fractionPart                                                                                     // 15711
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 15712
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                   // 15713
                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 15714
                    : fractionPart )                                                                                   // 15715
                  : intPart;                                                                                           // 15716
            }                                                                                                          // 15717
                                                                                                                       // 15718
            return str;                                                                                                // 15719
        };                                                                                                             // 15720
                                                                                                                       // 15721
                                                                                                                       // 15722
        /*                                                                                                             // 15723
         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 15724
         * an integer numerator and an integer denominator. The denominator will be a positive                         // 15725
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 15726
         * denominator is not specified, the denominator will be the lowest value necessary to                         // 15727
         * represent the number exactly.                                                                               // 15728
         *                                                                                                             // 15729
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 15730
         *                                                                                                             // 15731
         * 'toFraction() max denominator not an integer: {md}'                                                         // 15732
         * 'toFraction() max denominator out of range: {md}'                                                           // 15733
         */                                                                                                            // 15734
        P.toFraction = function (md) {                                                                                 // 15735
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 15736
                k = ERRORS,                                                                                            // 15737
                x = this,                                                                                              // 15738
                xc = x.c,                                                                                              // 15739
                d = new BigNumber(ONE),                                                                                // 15740
                n1 = d0 = new BigNumber(ONE),                                                                          // 15741
                d1 = n0 = new BigNumber(ONE);                                                                          // 15742
                                                                                                                       // 15743
            if ( md != null ) {                                                                                        // 15744
                ERRORS = false;                                                                                        // 15745
                n = new BigNumber(md);                                                                                 // 15746
                ERRORS = k;                                                                                            // 15747
                                                                                                                       // 15748
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 15749
                                                                                                                       // 15750
                    if (ERRORS) {                                                                                      // 15751
                        raise( 22,                                                                                     // 15752
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 15753
                    }                                                                                                  // 15754
                                                                                                                       // 15755
                    // ERRORS is false:                                                                                // 15756
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 15757
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 15758
                }                                                                                                      // 15759
            }                                                                                                          // 15760
                                                                                                                       // 15761
            if ( !xc ) return x.toString();                                                                            // 15762
            s = coeffToString(xc);                                                                                     // 15763
                                                                                                                       // 15764
            // Determine initial denominator.                                                                          // 15765
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 15766
            e = d.e = s.length - x.e - 1;                                                                              // 15767
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 15768
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 15769
                                                                                                                       // 15770
            exp = MAX_EXP;                                                                                             // 15771
            MAX_EXP = 1 / 0;                                                                                           // 15772
            n = new BigNumber(s);                                                                                      // 15773
                                                                                                                       // 15774
            // n0 = d1 = 0                                                                                             // 15775
            n0.c[0] = 0;                                                                                               // 15776
                                                                                                                       // 15777
            for ( ; ; )  {                                                                                             // 15778
                q = div( n, d, 0, 1 );                                                                                 // 15779
                d2 = d0.plus( q.times(d1) );                                                                           // 15780
                if ( d2.cmp(md) == 1 ) break;                                                                          // 15781
                d0 = d1;                                                                                               // 15782
                d1 = d2;                                                                                               // 15783
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 15784
                n0 = d2;                                                                                               // 15785
                d = n.minus( q.times( d2 = d ) );                                                                      // 15786
                n = d2;                                                                                                // 15787
            }                                                                                                          // 15788
                                                                                                                       // 15789
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 15790
            n0 = n0.plus( d2.times(n1) );                                                                              // 15791
            d0 = d0.plus( d2.times(d1) );                                                                              // 15792
            n0.s = n1.s = x.s;                                                                                         // 15793
            e *= 2;                                                                                                    // 15794
                                                                                                                       // 15795
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 15796
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 15797
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 15798
                    ? [ n1.toString(), d1.toString() ]                                                                 // 15799
                    : [ n0.toString(), d0.toString() ];                                                                // 15800
                                                                                                                       // 15801
            MAX_EXP = exp;                                                                                             // 15802
            return arr;                                                                                                // 15803
        };                                                                                                             // 15804
                                                                                                                       // 15805
                                                                                                                       // 15806
        /*                                                                                                             // 15807
         * Return the value of this BigNumber converted to a number primitive.                                         // 15808
         */                                                                                                            // 15809
        P.toNumber = function () {                                                                                     // 15810
            var x = this;                                                                                              // 15811
                                                                                                                       // 15812
            // Ensure zero has correct sign.                                                                           // 15813
            return +x || ( x.s ? x.s * 0 : NaN );                                                                      // 15814
        };                                                                                                             // 15815
                                                                                                                       // 15816
                                                                                                                       // 15817
        /*                                                                                                             // 15818
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 15819
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 15820
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                      // 15821
         *                                                                                                             // 15822
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                        // 15823
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                    // 15824
         *                                                                                                             // 15825
         * 'pow() exponent not an integer: {n}'                                                                        // 15826
         * 'pow() exponent out of range: {n}'                                                                          // 15827
         */                                                                                                            // 15828
        P.toPower = P.pow = function (n) {                                                                             // 15829
            var k, y,                                                                                                  // 15830
                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 15831
                x = this;                                                                                              // 15832
                                                                                                                       // 15833
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 15834
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 15835
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 15836
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                               // 15837
                return new BigNumber( Math.pow( +x, n ) );                                                             // 15838
            }                                                                                                          // 15839
                                                                                                                       // 15840
            // Truncating each coefficient array to a length of k after each multiplication equates                    // 15841
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                      // 15842
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                     // 15843
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                          // 15844
            y = new BigNumber(ONE);                                                                                    // 15845
                                                                                                                       // 15846
            for ( ; ; ) {                                                                                              // 15847
                                                                                                                       // 15848
                if ( i % 2 ) {                                                                                         // 15849
                    y = y.times(x);                                                                                    // 15850
                    if ( !y.c ) break;                                                                                 // 15851
                    if ( k && y.c.length > k ) y.c.length = k;                                                         // 15852
                }                                                                                                      // 15853
                                                                                                                       // 15854
                i = mathfloor( i / 2 );                                                                                // 15855
                if ( !i ) break;                                                                                       // 15856
                                                                                                                       // 15857
                x = x.times(x);                                                                                        // 15858
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                      // 15859
            }                                                                                                          // 15860
                                                                                                                       // 15861
            if ( n < 0 ) y = ONE.div(y);                                                                               // 15862
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                   // 15863
        };                                                                                                             // 15864
                                                                                                                       // 15865
                                                                                                                       // 15866
        /*                                                                                                             // 15867
         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 15868
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 15869
         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 15870
         * exponential notation.                                                                                       // 15871
         *                                                                                                             // 15872
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15873
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15874
         *                                                                                                             // 15875
         * 'toPrecision() precision not an integer: {sd}'                                                              // 15876
         * 'toPrecision() precision out of range: {sd}'                                                                // 15877
         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 15878
         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 15879
         */                                                                                                            // 15880
        P.toPrecision = function ( sd, rm ) {                                                                          // 15881
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 15882
              ? sd | 0 : null, rm, 24 );                                                                               // 15883
        };                                                                                                             // 15884
                                                                                                                       // 15885
                                                                                                                       // 15886
        /*                                                                                                             // 15887
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 15888
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 15889
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 15890
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 15891
         * TO_EXP_NEG, return exponential notation.                                                                    // 15892
         *                                                                                                             // 15893
         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 15894
         *                                                                                                             // 15895
         * 'toString() base not an integer: {b}'                                                                       // 15896
         * 'toString() base out of range: {b}'                                                                         // 15897
         */                                                                                                            // 15898
        P.toString = function (b) {                                                                                    // 15899
            var str,                                                                                                   // 15900
                n = this,                                                                                              // 15901
                s = n.s,                                                                                               // 15902
                e = n.e;                                                                                               // 15903
                                                                                                                       // 15904
            // Infinity or NaN?                                                                                        // 15905
            if ( e === null ) {                                                                                        // 15906
                                                                                                                       // 15907
                if (s) {                                                                                               // 15908
                    str = 'Infinity';                                                                                  // 15909
                    if ( s < 0 ) str = '-' + str;                                                                      // 15910
                } else {                                                                                               // 15911
                    str = 'NaN';                                                                                       // 15912
                }                                                                                                      // 15913
            } else {                                                                                                   // 15914
                str = coeffToString( n.c );                                                                            // 15915
                                                                                                                       // 15916
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 15917
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 15918
                      ? toExponential( str, e )                                                                        // 15919
                      : toFixedPoint( str, e );                                                                        // 15920
                } else {                                                                                               // 15921
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 15922
                }                                                                                                      // 15923
                                                                                                                       // 15924
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 15925
            }                                                                                                          // 15926
                                                                                                                       // 15927
            return str;                                                                                                // 15928
        };                                                                                                             // 15929
                                                                                                                       // 15930
                                                                                                                       // 15931
        /*                                                                                                             // 15932
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 15933
         * number.                                                                                                     // 15934
         */                                                                                                            // 15935
        P.truncated = P.trunc = function () {                                                                          // 15936
            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 15937
        };                                                                                                             // 15938
                                                                                                                       // 15939
                                                                                                                       // 15940
                                                                                                                       // 15941
        /*                                                                                                             // 15942
         * Return as toString, but do not accept a base argument.                                                      // 15943
         */                                                                                                            // 15944
        P.valueOf = P.toJSON = function () {                                                                           // 15945
            return this.toString();                                                                                    // 15946
        };                                                                                                             // 15947
                                                                                                                       // 15948
                                                                                                                       // 15949
        // Aliases for BigDecimal methods.                                                                             // 15950
        //P.add = P.plus;         // P.add included above                                                              // 15951
        //P.subtract = P.minus;   // P.sub included above                                                              // 15952
        //P.multiply = P.times;   // P.mul included above                                                              // 15953
        //P.divide = P.div;                                                                                            // 15954
        //P.remainder = P.mod;                                                                                         // 15955
        //P.compareTo = P.cmp;                                                                                         // 15956
        //P.negate = P.neg;                                                                                            // 15957
                                                                                                                       // 15958
                                                                                                                       // 15959
        if ( configObj != null ) BigNumber.config(configObj);                                                          // 15960
                                                                                                                       // 15961
        return BigNumber;                                                                                              // 15962
    }                                                                                                                  // 15963
                                                                                                                       // 15964
                                                                                                                       // 15965
    // PRIVATE HELPER FUNCTIONS                                                                                        // 15966
                                                                                                                       // 15967
                                                                                                                       // 15968
    function bitFloor(n) {                                                                                             // 15969
        var i = n | 0;                                                                                                 // 15970
        return n > 0 || n === i ? i : i - 1;                                                                           // 15971
    }                                                                                                                  // 15972
                                                                                                                       // 15973
                                                                                                                       // 15974
    // Return a coefficient array as a string of base 10 digits.                                                       // 15975
    function coeffToString(a) {                                                                                        // 15976
        var s, z,                                                                                                      // 15977
            i = 1,                                                                                                     // 15978
            j = a.length,                                                                                              // 15979
            r = a[0] + '';                                                                                             // 15980
                                                                                                                       // 15981
        for ( ; i < j; ) {                                                                                             // 15982
            s = a[i++] + '';                                                                                           // 15983
            z = LOG_BASE - s.length;                                                                                   // 15984
            for ( ; z--; s = '0' + s );                                                                                // 15985
            r += s;                                                                                                    // 15986
        }                                                                                                              // 15987
                                                                                                                       // 15988
        // Determine trailing zeros.                                                                                   // 15989
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 15990
        return r.slice( 0, j + 1 || 1 );                                                                               // 15991
    }                                                                                                                  // 15992
                                                                                                                       // 15993
                                                                                                                       // 15994
    // Compare the value of BigNumbers x and y.                                                                        // 15995
    function compare( x, y ) {                                                                                         // 15996
        var a, b,                                                                                                      // 15997
            xc = x.c,                                                                                                  // 15998
            yc = y.c,                                                                                                  // 15999
            i = x.s,                                                                                                   // 16000
            j = y.s,                                                                                                   // 16001
            k = x.e,                                                                                                   // 16002
            l = y.e;                                                                                                   // 16003
                                                                                                                       // 16004
        // Either NaN?                                                                                                 // 16005
        if ( !i || !j ) return null;                                                                                   // 16006
                                                                                                                       // 16007
        a = xc && !xc[0];                                                                                              // 16008
        b = yc && !yc[0];                                                                                              // 16009
                                                                                                                       // 16010
        // Either zero?                                                                                                // 16011
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 16012
                                                                                                                       // 16013
        // Signs differ?                                                                                               // 16014
        if ( i != j ) return i;                                                                                        // 16015
                                                                                                                       // 16016
        a = i < 0;                                                                                                     // 16017
        b = k == l;                                                                                                    // 16018
                                                                                                                       // 16019
        // Either Infinity?                                                                                            // 16020
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 16021
                                                                                                                       // 16022
        // Compare exponents.                                                                                          // 16023
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 16024
                                                                                                                       // 16025
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 16026
                                                                                                                       // 16027
        // Compare digit by digit.                                                                                     // 16028
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 16029
                                                                                                                       // 16030
        // Compare lengths.                                                                                            // 16031
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 16032
    }                                                                                                                  // 16033
                                                                                                                       // 16034
                                                                                                                       // 16035
    /*                                                                                                                 // 16036
     * Return true if n is a valid number in range, otherwise false.                                                   // 16037
     * Use for argument validation when ERRORS is false.                                                               // 16038
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 16039
     */                                                                                                                // 16040
    function intValidatorNoErrors( n, min, max ) {                                                                     // 16041
        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 16042
    }                                                                                                                  // 16043
                                                                                                                       // 16044
                                                                                                                       // 16045
    function isArray(obj) {                                                                                            // 16046
        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 16047
    }                                                                                                                  // 16048
                                                                                                                       // 16049
                                                                                                                       // 16050
    /*                                                                                                                 // 16051
     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 16052
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 16053
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 16054
     */                                                                                                                // 16055
    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 16056
        var j,                                                                                                         // 16057
            arr = [0],                                                                                                 // 16058
            arrL,                                                                                                      // 16059
            i = 0,                                                                                                     // 16060
            len = str.length;                                                                                          // 16061
                                                                                                                       // 16062
        for ( ; i < len; ) {                                                                                           // 16063
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 16064
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 16065
                                                                                                                       // 16066
            for ( ; j < arr.length; j++ ) {                                                                            // 16067
                                                                                                                       // 16068
                if ( arr[j] > baseOut - 1 ) {                                                                          // 16069
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 16070
                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 16071
                    arr[j] %= baseOut;                                                                                 // 16072
                }                                                                                                      // 16073
            }                                                                                                          // 16074
        }                                                                                                              // 16075
                                                                                                                       // 16076
        return arr.reverse();                                                                                          // 16077
    }                                                                                                                  // 16078
                                                                                                                       // 16079
                                                                                                                       // 16080
    function toExponential( str, e ) {                                                                                 // 16081
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 16082
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 16083
    }                                                                                                                  // 16084
                                                                                                                       // 16085
                                                                                                                       // 16086
    function toFixedPoint( str, e ) {                                                                                  // 16087
        var len, z;                                                                                                    // 16088
                                                                                                                       // 16089
        // Negative exponent?                                                                                          // 16090
        if ( e < 0 ) {                                                                                                 // 16091
                                                                                                                       // 16092
            // Prepend zeros.                                                                                          // 16093
            for ( z = '0.'; ++e; z += '0' );                                                                           // 16094
            str = z + str;                                                                                             // 16095
                                                                                                                       // 16096
        // Positive exponent                                                                                           // 16097
        } else {                                                                                                       // 16098
            len = str.length;                                                                                          // 16099
                                                                                                                       // 16100
            // Append zeros.                                                                                           // 16101
            if ( ++e > len ) {                                                                                         // 16102
                for ( z = '0', e -= len; --e; z += '0' );                                                              // 16103
                str += z;                                                                                              // 16104
            } else if ( e < len ) {                                                                                    // 16105
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 16106
            }                                                                                                          // 16107
        }                                                                                                              // 16108
                                                                                                                       // 16109
        return str;                                                                                                    // 16110
    }                                                                                                                  // 16111
                                                                                                                       // 16112
                                                                                                                       // 16113
    function truncate(n) {                                                                                             // 16114
        n = parseFloat(n);                                                                                             // 16115
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 16116
    }                                                                                                                  // 16117
                                                                                                                       // 16118
                                                                                                                       // 16119
    // EXPORT                                                                                                          // 16120
                                                                                                                       // 16121
                                                                                                                       // 16122
    BigNumber = another();                                                                                             // 16123
                                                                                                                       // 16124
    // AMD.                                                                                                            // 16125
    if ( typeof define == 'function' && define.amd ) {                                                                 // 16126
        define( function () { return BigNumber; } );                                                                   // 16127
                                                                                                                       // 16128
    // Node and other environments that support module.exports.                                                        // 16129
    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 16130
        module.exports = BigNumber;                                                                                    // 16131
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                                // 16132
                                                                                                                       // 16133
    // Browser.                                                                                                        // 16134
    } else {                                                                                                           // 16135
        global.BigNumber = BigNumber;                                                                                  // 16136
    }                                                                                                                  // 16137
})(this);                                                                                                              // 16138
                                                                                                                       // 16139
},{"crypto":50}],"web3":[function(require,module,exports){                                                             // 16140
var Web3 = require('./lib/web3');                                                                                      // 16141
                                                                                                                       // 16142
// dont override global variable                                                                                       // 16143
if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 16144
    window.Web3 = Web3;                                                                                                // 16145
}                                                                                                                      // 16146
                                                                                                                       // 16147
module.exports = Web3;                                                                                                 // 16148
                                                                                                                       // 16149
},{"./lib/web3":22}]},{},["web3"])                                                                                     // 16150
//# sourceMappingURL=web3.js.map                                                                                       // 16151
                                                                                                                       // 16152
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/package-init.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* jshint ignore:start */                                                                                              // 1
                                                                                                                       // 2
                                                                                                                       // 3
// Browser environment                                                                                                 // 4
if(typeof window !== 'undefined') {                                                                                    // 5
    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');                                       // 6
    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');                // 7
}                                                                                                                      // 8
                                                                                                                       // 9
                                                                                                                       // 10
// Node environment                                                                                                    // 11
if(typeof global !== 'undefined') {                                                                                    // 12
    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');                                       // 13
    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');                // 14
}                                                                                                                      // 15
                                                                                                                       // 16
/* jshint ignore:end */                                                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ethereum:web3'] = {}, {
  Web3: Web3,
  BigNumber: BigNumber
});

})();
