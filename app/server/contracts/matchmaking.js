matchmaking_json = {
"solidity": "pragma solidity ^0.4.2;\ncontract Matchmaking{\n\n    struct Match{\n        uint id;\n        uint[] visitedOwners;\n        uint[] visitedProperties;\n        uint[] visitedTradeables;\n        uint[] confirmed;\n\n        int256[] visitedPriorities;\n        uint[] confirmation;\n        uint visitedCount;\n        string result;\n    }\n\n\n    modifier onlyOwner()\n    {\n        if(msg.sender != owner) throw;\n        _;\n    }\n\n    Match[] public matches;\n    address owner;\n\n    function Matchmaking(){\n        owner = msg.sender;\n    }\n\n    function getMatchMaking(uint m_Id) constant returns(int256[], uint[], uint[], uint[], uint[], uint, string){\n        return (matches[m_Id].visitedPriorities, matches[m_Id].visitedOwners, matches[m_Id].visitedProperties, matches[m_Id].visitedTradeables, matches[m_Id].confirmation, matches[m_Id].visitedCount, matches[m_Id].result);\n    }\n\n    function getMatchMakingConfirmed(uint m_Id, uint s_Id) constant returns(uint){\n        uint s_Index;\n        for (uint i = 0 ; i < matches[m_Id].visitedOwners.length; i++){\n            if (matches[m_Id].visitedOwners[i] == s_Id){\n                s_Index = i;\n                break;\n            }\n        }\n        return (matches[m_Id].confirmed[s_Index]);\n    }\n\n    function getMatchMakingConfirmedArr(uint m_Id) constant returns (uint[]){\n        return matches[m_Id].confirmed;\n    }\n\n    function getMatchMakingConfirmationArr(uint m_Id) constant returns(uint[]){\n        return matches[m_Id].confirmation;\n    }\n\n    function updateConfirmation(uint m_Id, uint s_Id, uint confirmation) onlyOwner{\n        uint s_Index;\n        for (uint i = 0 ; i < matches[m_Id].visitedOwners.length; i++){\n            if (matches[m_Id].visitedOwners[i] == s_Id){\n                s_Index = i;\n                break;\n            }\n        }\n        matches[m_Id].confirmation[s_Index] = confirmation;\n        matches[m_Id].confirmed[s_Index] = 1;\n    }\n\n    function getMatchMakingLength() constant returns(uint){\n        return matches.length;\n    }\n\n    function gameCoreMatchingInit(uint _matchId, uint _visitedCount, string _result) onlyOwner{\n        matches.length++;\n\n        matches[_matchId].id = _matchId;\n        matches[_matchId].visitedCount = _visitedCount;\n        matches[_matchId].result = _result;\n\n    }\n\n    function gameCoreMatchingDetail(uint _matchId, int256 _priority, uint _owner, uint _property, uint _tradeable) onlyOwner{\n        matches[_matchId].visitedPriorities.push(_priority);\n        matches[_matchId].visitedOwners.push(_owner);\n        matches[_matchId].visitedProperties.push(_property);\n        matches[_matchId].visitedTradeables.push(_tradeable);\n\n\n    }\n\n    function gameCoreMatchingConfirmed(uint _matchId, uint _visitedLength) onlyOwner{\n        for (uint i = 0 ; i < _visitedLength ; i++){\n           matches[_matchId].confirmation.push(1);\n           matches[_matchId].confirmed.push(0);\n        }\n    }\n\n\n    function updateMatchResult(uint m_Id, string result) onlyOwner{\n        matches[m_Id].result = result;\n    }\n\n}\n",
"params":[],
"publish": ["Matchmaking"],
"private": privateKey,
"gas_limit": 3000000
}
